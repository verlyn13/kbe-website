{"summary":{"changed":0,"unchanged":155,"matches":0,"duration":{"secs":0,"nanos":180772214},"scannerDuration":{"secs":0,"nanos":7199192},"errors":37,"warnings":45,"skipped":0,"suggestedFixesSkipped":0,"diagnosticsNotPrinted":0},"diagnostics":[{"category":"lint/correctness/useExhaustiveDependencies","severity":"warning","description":"loadAnnouncements changes on every re-render and should not be used as a hook dependency.","message":[{"elements":["Emphasis"],"content":"loadAnnouncements"},{"elements":[],"content":" changes on every re-render and should not be used as a hook dependency."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"To fix this, wrap the definition of "},{"elements":["Emphasis"],"content":"loadAnnouncements"},{"elements":[],"content":" in its own "},{"elements":["Emphasis"],"content":"useCallback()"},{"elements":[],"content":" hook."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/admin/communications/page.tsx"},"span":[1526,1543],"sourceCode":"'use client';\n\nimport type { ColumnDef } from '@tanstack/react-table';\nimport { format } from 'date-fns';\nimport { Check, Clock, Eye, Plus, Send, Trash2 } from 'lucide-react';\nimport Link from 'next/link';\nimport { useEffect, useState } from 'react';\nimport { LazyDataTable } from '@/components/lazy';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useToast } from '@/hooks/use-toast';\nimport { type Announcement, announcementService } from '@/lib/firebase-admin';\n\nexport default function AdminCommunicationsPage() {\n  const [announcements, setAnnouncements] = useState<Announcement[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedAnnouncement, setSelectedAnnouncement] = useState<Announcement | null>(null);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [announcementToDelete, setAnnouncementToDelete] = useState<Announcement | null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadAnnouncements();\n  }, [loadAnnouncements]);\n\n  async function loadAnnouncements() {\n    try {\n      const data = await announcementService.getAll();\n      setAnnouncements(data);\n    } catch (error) {\n      console.error('Error loading announcements:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const columns: ColumnDef<Announcement>[] = [\n    {\n      accessorKey: 'title',\n      header: 'Title',\n      cell: ({ row }) => {\n        const pinned = row.original.pinned;\n        return (\n          <div className=\"flex items-center gap-2\">\n            {pinned && (\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                Pinned\n              </Badge>\n            )}\n            <span>{row.getValue('title')}</span>\n          </div>\n        );\n      },\n    },\n    {\n      accessorKey: 'recipients',\n      header: 'Recipients',\n      cell: ({ row }) => {\n        const recipients = row.getValue('recipients') as string;\n        return recipients.charAt(0).toUpperCase() + recipients.slice(1);\n      },\n    },\n    {\n      accessorKey: 'publishedAt',\n      header: 'Published',\n      cell: ({ row }) => {\n        const date = row.getValue('publishedAt') as Date | null;\n        if (!date) return '-';\n        return date.toLocaleDateString();\n      },\n    },\n    {\n      accessorKey: 'createdByName',\n      header: 'Created By',\n    },\n    {\n      accessorKey: 'status',\n      header: 'Status',\n      cell: ({ row }) => {\n        const status = row.getValue('status') as Announcement['status'];\n        const icon =\n          status === 'published' ? (\n            <Check className=\"h-3 w-3\" />\n          ) : status === 'archived' ? (\n            <Clock className=\"h-3 w-3\" />\n          ) : (\n            <Send className=\"h-3 w-3\" />\n          );\n\n        const variant =\n          status === 'published' ? 'default' : status === 'archived' ? 'secondary' : 'outline';\n\n        return (\n          <Badge variant={variant} className=\"gap-1\">\n            {icon}\n            {status}\n          </Badge>\n        );\n      },\n    },\n    {\n      id: 'actions',\n      header: 'Actions',\n      cell: ({ row }) => {\n        const announcement = row.original;\n        return (\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => setSelectedAnnouncement(announcement)}>\n              <Eye className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => {\n                setAnnouncementToDelete(announcement);\n                setDeleteDialogOpen(true);\n              }}\n            >\n              <Trash2 className=\"text-destructive h-4 w-4\" />\n            </Button>\n          </div>\n        );\n      },\n    },\n  ];\n\n  async function handleDelete() {\n    if (!announcementToDelete) return;\n\n    try {\n      await announcementService.delete(announcementToDelete.id);\n      toast({\n        title: 'Success',\n        description: 'Announcement deleted successfully',\n      });\n      loadAnnouncements();\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to delete announcement',\n        variant: 'destructive',\n      });\n    } finally {\n      setDeleteDialogOpen(false);\n      setAnnouncementToDelete(null);\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-64\" />\n        <Skeleton className=\"h-[400px]\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Communications</h1>\n          <p className=\"text-muted-foreground\">\n            Send announcements and manage communications with families\n          </p>\n        </div>\n        <Button asChild>\n          <Link href=\"/admin/communications/compose\">\n            <Plus className=\"mr-2 h-4 w-4\" />\n            New Announcement\n          </Link>\n        </Button>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Total Sent</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {announcements.filter((a) => a.status === 'published').length}\n            </div>\n            <p className=\"text-muted-foreground text-xs\">This month</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Archived</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {announcements.filter((a) => a.status === 'archived').length}\n            </div>\n            <p className=\"text-muted-foreground text-xs\">Upcoming</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Drafts</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {announcements.filter((a) => a.status === 'draft').length}\n            </div>\n            <p className=\"text-muted-foreground text-xs\">Saved</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Announcement History</CardTitle>\n          <CardDescription>View all sent and scheduled announcements</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <LazyDataTable columns={columns} data={announcements} searchKey=\"title\" />\n        </CardContent>\n      </Card>\n\n      {/* View Announcement Dialog */}\n      <Dialog open={!!selectedAnnouncement} onOpenChange={() => setSelectedAnnouncement(null)}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>{selectedAnnouncement?.title}</DialogTitle>\n            <DialogDescription>\n              {selectedAnnouncement?.publishedAt &&\n                format(new Date(selectedAnnouncement.publishedAt), 'MMMM d, yyyy at h:mm a')}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"flex gap-2\">\n              <Badge\n                variant={selectedAnnouncement?.priority === 'high' ? 'destructive' : 'default'}\n              >\n                {selectedAnnouncement?.priority} priority\n              </Badge>\n              <Badge variant=\"outline\">\n                {selectedAnnouncement?.recipients === 'all'\n                  ? 'All Families'\n                  : selectedAnnouncement?.recipients}\n              </Badge>\n              {selectedAnnouncement?.pinned && <Badge variant=\"secondary\">Pinned</Badge>}\n            </div>\n            <div className=\"bg-muted rounded-lg p-4\">\n              <p className=\"whitespace-pre-wrap\">{selectedAnnouncement?.content}</p>\n            </div>\n            <div className=\"text-muted-foreground text-sm\">\n              <p>Created by: {selectedAnnouncement?.createdByName}</p>\n              <p>Views: {selectedAnnouncement?.viewCount || 0}</p>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Announcement</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete \"{announcementToDelete?.title}\"? This action cannot be\n              undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleDelete}\n              className=\"bg-destructive text-destructive-foreground\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/a11y/noStaticElementInteractions","severity":"warning","description":"Static Elements should not be interactive.","message":[{"elements":[],"content":"Static Elements should not be interactive."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"To add interactivity such as a mouse or key event listener to a static element, give the element an appropriate role value."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/admin/dashboard/page.tsx"},"span":[7323,7646],"sourceCode":"'use client';\n\nimport {\n  AlertCircle,\n  Calendar,\n  Clock,\n  Download,\n  FileSpreadsheet,\n  Send,\n  UserPlus,\n  Users,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useAdmin } from '@/hooks/use-admin';\nimport { registrationService } from '@/lib/firebase-admin';\n\ninterface DashboardStats {\n  registrations: {\n    pending: number;\n    active: number;\n    waitlist: number;\n    totalStudents: number;\n  };\n  upcomingEvents: Array<{\n    id: string;\n    title: string;\n    date: Date;\n    type: 'meeting' | 'competition' | 'deadline';\n  }>;\n  recentActivity: Array<{\n    id: string;\n    action: string;\n    timestamp: Date;\n    user?: string;\n  }>;\n}\n\nfunction StatCard({\n  title,\n  value,\n  description,\n  icon: Icon,\n  trend,\n}: {\n  title: string;\n  value: number | string;\n  description?: string;\n  icon: React.ElementType;\n  trend?: 'up' | 'down' | 'neutral';\n}) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <Icon className=\"text-muted-foreground h-4 w-4\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">{value}</div>\n        {description && <p className=\"text-muted-foreground text-xs\">{description}</p>}\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction QuickActionCard({\n  title,\n  subtitle,\n  icon: Icon,\n  href,\n  onClick,\n}: {\n  title: string;\n  subtitle: string;\n  icon: React.ElementType;\n  href?: string;\n  onClick?: () => void;\n}) {\n  const content = (\n    <>\n      <Icon className=\"text-primary mb-2 h-6 w-6\" />\n      <h3 className=\"font-semibold\">{title}</h3>\n      <p className=\"text-muted-foreground text-sm\">{subtitle}</p>\n    </>\n  );\n\n  if (href) {\n    return (\n      <Link href={href}>\n        <Card className=\"hover:bg-accent h-full cursor-pointer transition-colors\">\n          <CardContent className=\"pt-6\">{content}</CardContent>\n        </Card>\n      </Link>\n    );\n  }\n\n  return (\n    <Card className=\"hover:bg-accent h-full cursor-pointer transition-colors\" onClick={onClick}>\n      <CardContent className=\"pt-6\">{content}</CardContent>\n    </Card>\n  );\n}\n\nexport default function AdminDashboardPage() {\n  const { admin } = useAdmin();\n  const [stats, setStats] = useState<DashboardStats | null>(null);\n  const [loading, setLoading] = useState(true);\n  const router = useRouter();\n\n  useEffect(() => {\n    async function loadDashboard() {\n      try {\n        const registrationStats = await registrationService.getStats('mathcounts-2025');\n\n        // Mock upcoming events for now\n        const upcomingEvents = [\n          {\n            id: '1',\n            title: 'MathCounts Meeting',\n            date: new Date('2025-09-09T16:00:00'),\n            type: 'meeting' as const,\n          },\n          {\n            id: '2',\n            title: 'Chapter Competition',\n            date: new Date('2025-01-18T09:00:00'),\n            type: 'competition' as const,\n          },\n          {\n            id: '3',\n            title: 'Registration Deadline',\n            date: new Date('2025-08-31T23:59:59'),\n            type: 'deadline' as const,\n          },\n        ];\n\n        // Mock recent activity\n        const recentActivity = [\n          {\n            id: '1',\n            action: 'New registration from Jane Smith',\n            timestamp: new Date(),\n          },\n          {\n            id: '2',\n            action: 'Announcement sent to all families',\n            timestamp: new Date(Date.now() - 3600000),\n            user: 'Admin',\n          },\n        ];\n\n        setStats({\n          registrations: registrationStats,\n          upcomingEvents,\n          recentActivity,\n        });\n      } catch (error) {\n        console.error('Error loading dashboard:', error);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    loadDashboard();\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-64\" />\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          {[1, 2, 3, 4].map((i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n        <Skeleton className=\"h-64\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Admin Dashboard</h1>\n        <p className=\"text-muted-foreground\">\n          Welcome back, {admin?.name}. Here's an overview of your programs.\n        </p>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <StatCard\n          title=\"Pending Registrations\"\n          value={stats?.registrations.pending || 0}\n          description=\"Awaiting approval\"\n          icon={AlertCircle}\n        />\n        <StatCard\n          title=\"Active Students\"\n          value={stats?.registrations.totalStudents || 0}\n          description={`${stats?.registrations.active || 0} families`}\n          icon={Users}\n        />\n        <StatCard\n          title=\"Waitlist\"\n          value={stats?.registrations.waitlist || 0}\n          description=\"Students waiting\"\n          icon={Clock}\n        />\n        <StatCard\n          title=\"Next Meeting\"\n          value=\"Sep 9\"\n          description=\"Tuesday, 4:00 PM\"\n          icon={Calendar}\n        />\n      </div>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n          <CardDescription>Common tasks and shortcuts</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n            <QuickActionCard\n              title=\"Send Announcement\"\n              subtitle=\"Email all families\"\n              icon={Send}\n              href=\"/admin/communications/compose\"\n            />\n            <QuickActionCard\n              title=\"Export Roster\"\n              subtitle=\"Download student list\"\n              icon={Download}\n              onClick={() => {\n                // TODO: Implement export\n                console.log('Export roster');\n              }}\n            />\n            <QuickActionCard\n              title=\"View Schedule\"\n              subtitle=\"Today's activities\"\n              icon={Calendar}\n              href=\"/calendar\"\n            />\n            <QuickActionCard\n              title=\"Registration Report\"\n              subtitle=\"View analytics\"\n              icon={FileSpreadsheet}\n              href=\"/admin/reports\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        {/* Upcoming Events */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Upcoming Events</CardTitle>\n            <CardDescription>Important dates and deadlines</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {stats?.upcomingEvents.map((event) => (\n                <div\n                  key={event.id}\n                  className=\"hover:bg-accent flex cursor-pointer items-start gap-3 rounded-lg p-2 transition-colors\"\n                  onClick={() =>\n                    router.push(`/calendar?eventId=${event.id}&date=${event.date.toISOString()}`)\n                  }\n                >\n                  <div\n                    className={`rounded-full p-2 ${\n                      event.type === 'competition'\n                        ? 'bg-green-100'\n                        : event.type === 'deadline'\n                          ? 'bg-red-100'\n                          : 'bg-blue-100'\n                    }`}\n                  >\n                    <Calendar className=\"h-4 w-4\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium\">{event.title}</p>\n                    <p className=\"text-muted-foreground text-sm\">\n                      {event.date.toLocaleDateString('en-US', {\n                        weekday: 'short',\n                        month: 'short',\n                        day: 'numeric',\n                        hour: 'numeric',\n                        minute: '2-digit',\n                      })}\n                    </p>\n                  </div>\n                  <Badge\n                    variant={\n                      event.type === 'competition'\n                        ? 'default'\n                        : event.type === 'deadline'\n                          ? 'destructive'\n                          : 'secondary'\n                    }\n                  >\n                    {event.type}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Activity */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Activity</CardTitle>\n            <CardDescription>Latest updates and changes</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {stats?.recentActivity.map((activity) => (\n                <div key={activity.id} className=\"flex items-start gap-3\">\n                  <div className=\"bg-muted rounded-full p-2\">\n                    <UserPlus className=\"h-4 w-4\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm\">{activity.action}</p>\n                    <p className=\"text-muted-foreground text-xs\">\n                      {activity.timestamp.toLocaleTimeString('en-US', {\n                        hour: 'numeric',\n                        minute: '2-digit',\n                      })}\n                      {activity.user && ` by ${activity.user}`}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n            <Button variant=\"outline\" className=\"mt-4 w-full\" asChild>\n              <Link href=\"/admin/activity\">View All Activity</Link>\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Pending Actions Alert */}\n      {stats?.registrations.pending && stats.registrations.pending > 0 && (\n        <Card className=\"border-orange-200 bg-orange-50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <AlertCircle className=\"h-5 w-5 text-orange-600\" />\n              Pending Actions Required\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"mb-4 text-sm\">\n              You have {stats.registrations.pending} registration\n              {stats.registrations.pending > 1 ? 's' : ''} waiting for approval.\n            </p>\n            <Button asChild>\n              <Link href=\"/admin/registrations?filter=pending\">Review Pending Registrations</Link>\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/a11y/useKeyWithClickEvents","severity":"warning","description":"Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.","message":[{"elements":[],"content":"Enforce to have the "},{"elements":["Emphasis"],"content":"onClick"},{"elements":[],"content":" mouse event with the "},{"elements":["Emphasis"],"content":"onKeyUp"},{"elements":[],"content":", the "},{"elements":["Emphasis"],"content":"onKeyDown"},{"elements":[],"content":", or the "},{"elements":["Emphasis"],"content":"onKeyPress"},{"elements":[],"content":" keyboard event."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/admin/dashboard/page.tsx"},"span":[7323,7646],"sourceCode":"'use client';\n\nimport {\n  AlertCircle,\n  Calendar,\n  Clock,\n  Download,\n  FileSpreadsheet,\n  Send,\n  UserPlus,\n  Users,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useAdmin } from '@/hooks/use-admin';\nimport { registrationService } from '@/lib/firebase-admin';\n\ninterface DashboardStats {\n  registrations: {\n    pending: number;\n    active: number;\n    waitlist: number;\n    totalStudents: number;\n  };\n  upcomingEvents: Array<{\n    id: string;\n    title: string;\n    date: Date;\n    type: 'meeting' | 'competition' | 'deadline';\n  }>;\n  recentActivity: Array<{\n    id: string;\n    action: string;\n    timestamp: Date;\n    user?: string;\n  }>;\n}\n\nfunction StatCard({\n  title,\n  value,\n  description,\n  icon: Icon,\n  trend,\n}: {\n  title: string;\n  value: number | string;\n  description?: string;\n  icon: React.ElementType;\n  trend?: 'up' | 'down' | 'neutral';\n}) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <Icon className=\"text-muted-foreground h-4 w-4\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">{value}</div>\n        {description && <p className=\"text-muted-foreground text-xs\">{description}</p>}\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction QuickActionCard({\n  title,\n  subtitle,\n  icon: Icon,\n  href,\n  onClick,\n}: {\n  title: string;\n  subtitle: string;\n  icon: React.ElementType;\n  href?: string;\n  onClick?: () => void;\n}) {\n  const content = (\n    <>\n      <Icon className=\"text-primary mb-2 h-6 w-6\" />\n      <h3 className=\"font-semibold\">{title}</h3>\n      <p className=\"text-muted-foreground text-sm\">{subtitle}</p>\n    </>\n  );\n\n  if (href) {\n    return (\n      <Link href={href}>\n        <Card className=\"hover:bg-accent h-full cursor-pointer transition-colors\">\n          <CardContent className=\"pt-6\">{content}</CardContent>\n        </Card>\n      </Link>\n    );\n  }\n\n  return (\n    <Card className=\"hover:bg-accent h-full cursor-pointer transition-colors\" onClick={onClick}>\n      <CardContent className=\"pt-6\">{content}</CardContent>\n    </Card>\n  );\n}\n\nexport default function AdminDashboardPage() {\n  const { admin } = useAdmin();\n  const [stats, setStats] = useState<DashboardStats | null>(null);\n  const [loading, setLoading] = useState(true);\n  const router = useRouter();\n\n  useEffect(() => {\n    async function loadDashboard() {\n      try {\n        const registrationStats = await registrationService.getStats('mathcounts-2025');\n\n        // Mock upcoming events for now\n        const upcomingEvents = [\n          {\n            id: '1',\n            title: 'MathCounts Meeting',\n            date: new Date('2025-09-09T16:00:00'),\n            type: 'meeting' as const,\n          },\n          {\n            id: '2',\n            title: 'Chapter Competition',\n            date: new Date('2025-01-18T09:00:00'),\n            type: 'competition' as const,\n          },\n          {\n            id: '3',\n            title: 'Registration Deadline',\n            date: new Date('2025-08-31T23:59:59'),\n            type: 'deadline' as const,\n          },\n        ];\n\n        // Mock recent activity\n        const recentActivity = [\n          {\n            id: '1',\n            action: 'New registration from Jane Smith',\n            timestamp: new Date(),\n          },\n          {\n            id: '2',\n            action: 'Announcement sent to all families',\n            timestamp: new Date(Date.now() - 3600000),\n            user: 'Admin',\n          },\n        ];\n\n        setStats({\n          registrations: registrationStats,\n          upcomingEvents,\n          recentActivity,\n        });\n      } catch (error) {\n        console.error('Error loading dashboard:', error);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    loadDashboard();\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-64\" />\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          {[1, 2, 3, 4].map((i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n        <Skeleton className=\"h-64\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Admin Dashboard</h1>\n        <p className=\"text-muted-foreground\">\n          Welcome back, {admin?.name}. Here's an overview of your programs.\n        </p>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <StatCard\n          title=\"Pending Registrations\"\n          value={stats?.registrations.pending || 0}\n          description=\"Awaiting approval\"\n          icon={AlertCircle}\n        />\n        <StatCard\n          title=\"Active Students\"\n          value={stats?.registrations.totalStudents || 0}\n          description={`${stats?.registrations.active || 0} families`}\n          icon={Users}\n        />\n        <StatCard\n          title=\"Waitlist\"\n          value={stats?.registrations.waitlist || 0}\n          description=\"Students waiting\"\n          icon={Clock}\n        />\n        <StatCard\n          title=\"Next Meeting\"\n          value=\"Sep 9\"\n          description=\"Tuesday, 4:00 PM\"\n          icon={Calendar}\n        />\n      </div>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n          <CardDescription>Common tasks and shortcuts</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n            <QuickActionCard\n              title=\"Send Announcement\"\n              subtitle=\"Email all families\"\n              icon={Send}\n              href=\"/admin/communications/compose\"\n            />\n            <QuickActionCard\n              title=\"Export Roster\"\n              subtitle=\"Download student list\"\n              icon={Download}\n              onClick={() => {\n                // TODO: Implement export\n                console.log('Export roster');\n              }}\n            />\n            <QuickActionCard\n              title=\"View Schedule\"\n              subtitle=\"Today's activities\"\n              icon={Calendar}\n              href=\"/calendar\"\n            />\n            <QuickActionCard\n              title=\"Registration Report\"\n              subtitle=\"View analytics\"\n              icon={FileSpreadsheet}\n              href=\"/admin/reports\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        {/* Upcoming Events */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Upcoming Events</CardTitle>\n            <CardDescription>Important dates and deadlines</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {stats?.upcomingEvents.map((event) => (\n                <div\n                  key={event.id}\n                  className=\"hover:bg-accent flex cursor-pointer items-start gap-3 rounded-lg p-2 transition-colors\"\n                  onClick={() =>\n                    router.push(`/calendar?eventId=${event.id}&date=${event.date.toISOString()}`)\n                  }\n                >\n                  <div\n                    className={`rounded-full p-2 ${\n                      event.type === 'competition'\n                        ? 'bg-green-100'\n                        : event.type === 'deadline'\n                          ? 'bg-red-100'\n                          : 'bg-blue-100'\n                    }`}\n                  >\n                    <Calendar className=\"h-4 w-4\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium\">{event.title}</p>\n                    <p className=\"text-muted-foreground text-sm\">\n                      {event.date.toLocaleDateString('en-US', {\n                        weekday: 'short',\n                        month: 'short',\n                        day: 'numeric',\n                        hour: 'numeric',\n                        minute: '2-digit',\n                      })}\n                    </p>\n                  </div>\n                  <Badge\n                    variant={\n                      event.type === 'competition'\n                        ? 'default'\n                        : event.type === 'deadline'\n                          ? 'destructive'\n                          : 'secondary'\n                    }\n                  >\n                    {event.type}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Activity */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Activity</CardTitle>\n            <CardDescription>Latest updates and changes</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {stats?.recentActivity.map((activity) => (\n                <div key={activity.id} className=\"flex items-start gap-3\">\n                  <div className=\"bg-muted rounded-full p-2\">\n                    <UserPlus className=\"h-4 w-4\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm\">{activity.action}</p>\n                    <p className=\"text-muted-foreground text-xs\">\n                      {activity.timestamp.toLocaleTimeString('en-US', {\n                        hour: 'numeric',\n                        minute: '2-digit',\n                      })}\n                      {activity.user && ` by ${activity.user}`}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n            <Button variant=\"outline\" className=\"mt-4 w-full\" asChild>\n              <Link href=\"/admin/activity\">View All Activity</Link>\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Pending Actions Alert */}\n      {stats?.registrations.pending && stats.registrations.pending > 0 && (\n        <Card className=\"border-orange-200 bg-orange-50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <AlertCircle className=\"h-5 w-5 text-orange-600\" />\n              Pending Actions Required\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"mb-4 text-sm\">\n              You have {stats.registrations.pending} registration\n              {stats.registrations.pending > 1 ? 's' : ''} waiting for approval.\n            </p>\n            <Button asChild>\n              <Link href=\"/admin/registrations?filter=pending\">Review Pending Registrations</Link>\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/noUnusedFunctionParameters","severity":"warning","description":"This parameter is unused.","message":[{"elements":[],"content":"This "},{"elements":["Emphasis"],"content":"parameter"},{"elements":[],"content":" is unused."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Unused parameters might be the result of an incomplete refactoring."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/admin/dashboard/page.tsx"},"span":[1071,1076],"sourceCode":"'use client';\n\nimport {\n  AlertCircle,\n  Calendar,\n  Clock,\n  Download,\n  FileSpreadsheet,\n  Send,\n  UserPlus,\n  Users,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useAdmin } from '@/hooks/use-admin';\nimport { registrationService } from '@/lib/firebase-admin';\n\ninterface DashboardStats {\n  registrations: {\n    pending: number;\n    active: number;\n    waitlist: number;\n    totalStudents: number;\n  };\n  upcomingEvents: Array<{\n    id: string;\n    title: string;\n    date: Date;\n    type: 'meeting' | 'competition' | 'deadline';\n  }>;\n  recentActivity: Array<{\n    id: string;\n    action: string;\n    timestamp: Date;\n    user?: string;\n  }>;\n}\n\nfunction StatCard({\n  title,\n  value,\n  description,\n  icon: Icon,\n  trend,\n}: {\n  title: string;\n  value: number | string;\n  description?: string;\n  icon: React.ElementType;\n  trend?: 'up' | 'down' | 'neutral';\n}) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <Icon className=\"text-muted-foreground h-4 w-4\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">{value}</div>\n        {description && <p className=\"text-muted-foreground text-xs\">{description}</p>}\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction QuickActionCard({\n  title,\n  subtitle,\n  icon: Icon,\n  href,\n  onClick,\n}: {\n  title: string;\n  subtitle: string;\n  icon: React.ElementType;\n  href?: string;\n  onClick?: () => void;\n}) {\n  const content = (\n    <>\n      <Icon className=\"text-primary mb-2 h-6 w-6\" />\n      <h3 className=\"font-semibold\">{title}</h3>\n      <p className=\"text-muted-foreground text-sm\">{subtitle}</p>\n    </>\n  );\n\n  if (href) {\n    return (\n      <Link href={href}>\n        <Card className=\"hover:bg-accent h-full cursor-pointer transition-colors\">\n          <CardContent className=\"pt-6\">{content}</CardContent>\n        </Card>\n      </Link>\n    );\n  }\n\n  return (\n    <Card className=\"hover:bg-accent h-full cursor-pointer transition-colors\" onClick={onClick}>\n      <CardContent className=\"pt-6\">{content}</CardContent>\n    </Card>\n  );\n}\n\nexport default function AdminDashboardPage() {\n  const { admin } = useAdmin();\n  const [stats, setStats] = useState<DashboardStats | null>(null);\n  const [loading, setLoading] = useState(true);\n  const router = useRouter();\n\n  useEffect(() => {\n    async function loadDashboard() {\n      try {\n        const registrationStats = await registrationService.getStats('mathcounts-2025');\n\n        // Mock upcoming events for now\n        const upcomingEvents = [\n          {\n            id: '1',\n            title: 'MathCounts Meeting',\n            date: new Date('2025-09-09T16:00:00'),\n            type: 'meeting' as const,\n          },\n          {\n            id: '2',\n            title: 'Chapter Competition',\n            date: new Date('2025-01-18T09:00:00'),\n            type: 'competition' as const,\n          },\n          {\n            id: '3',\n            title: 'Registration Deadline',\n            date: new Date('2025-08-31T23:59:59'),\n            type: 'deadline' as const,\n          },\n        ];\n\n        // Mock recent activity\n        const recentActivity = [\n          {\n            id: '1',\n            action: 'New registration from Jane Smith',\n            timestamp: new Date(),\n          },\n          {\n            id: '2',\n            action: 'Announcement sent to all families',\n            timestamp: new Date(Date.now() - 3600000),\n            user: 'Admin',\n          },\n        ];\n\n        setStats({\n          registrations: registrationStats,\n          upcomingEvents,\n          recentActivity,\n        });\n      } catch (error) {\n        console.error('Error loading dashboard:', error);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    loadDashboard();\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-64\" />\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          {[1, 2, 3, 4].map((i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n        <Skeleton className=\"h-64\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Admin Dashboard</h1>\n        <p className=\"text-muted-foreground\">\n          Welcome back, {admin?.name}. Here's an overview of your programs.\n        </p>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <StatCard\n          title=\"Pending Registrations\"\n          value={stats?.registrations.pending || 0}\n          description=\"Awaiting approval\"\n          icon={AlertCircle}\n        />\n        <StatCard\n          title=\"Active Students\"\n          value={stats?.registrations.totalStudents || 0}\n          description={`${stats?.registrations.active || 0} families`}\n          icon={Users}\n        />\n        <StatCard\n          title=\"Waitlist\"\n          value={stats?.registrations.waitlist || 0}\n          description=\"Students waiting\"\n          icon={Clock}\n        />\n        <StatCard\n          title=\"Next Meeting\"\n          value=\"Sep 9\"\n          description=\"Tuesday, 4:00 PM\"\n          icon={Calendar}\n        />\n      </div>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n          <CardDescription>Common tasks and shortcuts</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n            <QuickActionCard\n              title=\"Send Announcement\"\n              subtitle=\"Email all families\"\n              icon={Send}\n              href=\"/admin/communications/compose\"\n            />\n            <QuickActionCard\n              title=\"Export Roster\"\n              subtitle=\"Download student list\"\n              icon={Download}\n              onClick={() => {\n                // TODO: Implement export\n                console.log('Export roster');\n              }}\n            />\n            <QuickActionCard\n              title=\"View Schedule\"\n              subtitle=\"Today's activities\"\n              icon={Calendar}\n              href=\"/calendar\"\n            />\n            <QuickActionCard\n              title=\"Registration Report\"\n              subtitle=\"View analytics\"\n              icon={FileSpreadsheet}\n              href=\"/admin/reports\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        {/* Upcoming Events */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Upcoming Events</CardTitle>\n            <CardDescription>Important dates and deadlines</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {stats?.upcomingEvents.map((event) => (\n                <div\n                  key={event.id}\n                  className=\"hover:bg-accent flex cursor-pointer items-start gap-3 rounded-lg p-2 transition-colors\"\n                  onClick={() =>\n                    router.push(`/calendar?eventId=${event.id}&date=${event.date.toISOString()}`)\n                  }\n                >\n                  <div\n                    className={`rounded-full p-2 ${\n                      event.type === 'competition'\n                        ? 'bg-green-100'\n                        : event.type === 'deadline'\n                          ? 'bg-red-100'\n                          : 'bg-blue-100'\n                    }`}\n                  >\n                    <Calendar className=\"h-4 w-4\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium\">{event.title}</p>\n                    <p className=\"text-muted-foreground text-sm\">\n                      {event.date.toLocaleDateString('en-US', {\n                        weekday: 'short',\n                        month: 'short',\n                        day: 'numeric',\n                        hour: 'numeric',\n                        minute: '2-digit',\n                      })}\n                    </p>\n                  </div>\n                  <Badge\n                    variant={\n                      event.type === 'competition'\n                        ? 'default'\n                        : event.type === 'deadline'\n                          ? 'destructive'\n                          : 'secondary'\n                    }\n                  >\n                    {event.type}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Activity */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Activity</CardTitle>\n            <CardDescription>Latest updates and changes</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {stats?.recentActivity.map((activity) => (\n                <div key={activity.id} className=\"flex items-start gap-3\">\n                  <div className=\"bg-muted rounded-full p-2\">\n                    <UserPlus className=\"h-4 w-4\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm\">{activity.action}</p>\n                    <p className=\"text-muted-foreground text-xs\">\n                      {activity.timestamp.toLocaleTimeString('en-US', {\n                        hour: 'numeric',\n                        minute: '2-digit',\n                      })}\n                      {activity.user && ` by ${activity.user}`}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n            <Button variant=\"outline\" className=\"mt-4 w-full\" asChild>\n              <Link href=\"/admin/activity\">View All Activity</Link>\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Pending Actions Alert */}\n      {stats?.registrations.pending && stats.registrations.pending > 0 && (\n        <Card className=\"border-orange-200 bg-orange-50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <AlertCircle className=\"h-5 w-5 text-orange-600\" />\n              Pending Actions Required\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"mb-4 text-sm\">\n              You have {stats.registrations.pending} registration\n              {stats.registrations.pending > 1 ? 's' : ''} waiting for approval.\n            </p>\n            <Button asChild>\n              <Link href=\"/admin/registrations?filter=pending\">Review Pending Registrations</Link>\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/a11y/noSvgWithoutTitle","severity":"warning","description":"Alternative text title element cannot be empty","message":[{"elements":[],"content":"Alternative text "},{"elements":["Emphasis"],"content":"title"},{"elements":[],"content":" element cannot be empty"}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"For accessibility purposes, "},{"elements":["Emphasis"],"content":"SVGs"},{"elements":[],"content":" should have an alternative text, provided via "},{"elements":["Emphasis"],"content":"title"},{"elements":[],"content":" element. If the svg element has role=\"img\", you should add the "},{"elements":["Emphasis"],"content":"aria-label"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"aria-labelledby"},{"elements":[],"content":" attribute."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/admin/layout.tsx"},"span":[856,1123],"sourceCode":"'use client';\n\nimport {\n  Calendar,\n  FileCheck,\n  FileSpreadsheet,\n  FileText,\n  Home,\n  LayoutDashboard,\n  Mail,\n  Settings,\n  Users,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport { DashboardHeader } from '@/components/dashboard-header';\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarProvider,\n  useSidebar,\n} from '@/components/ui/sidebar';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { AdminProvider, useAdmin } from '@/hooks/use-admin';\nimport { useIsMobile } from '@/hooks/use-mobile';\n\nfunction HehLogo() {\n  const { state } = useSidebar();\n  return (\n    <Link href=\"/admin/dashboard\" className=\"flex items-center gap-2\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        className=\"text-sidebar-primary h-8 w-8\"\n      >\n        <path d=\"M12 2L2 7l10 5 10-5-10-5z\" />\n        <path d=\"M2 17l10 5 10-5\" />\n        <path d=\"M2 12l10 5 10-5\" />\n      </svg>\n      <h1 className=\"text-lg font-bold text-white transition-all duration-200 group-data-[collapsible=icon]:-translate-x-96 group-data-[collapsible=icon]:opacity-0\">\n        HEH Admin\n      </h1>\n    </Link>\n  );\n}\n\nfunction MobileAwareSidebarMenuButton({\n  href,\n  children,\n  isActive,\n  tooltip,\n}: {\n  href: string;\n  children: React.ReactNode;\n  isActive?: boolean;\n  tooltip?: string;\n}) {\n  const { setOpenMobile } = useSidebar();\n  const isMobile = useIsMobile();\n\n  const handleClick = () => {\n    if (isMobile) {\n      setOpenMobile(false);\n    }\n  };\n\n  return (\n    <SidebarMenuButton asChild isActive={isActive} tooltip={tooltip}>\n      <Link href={href} onClick={handleClick}>\n        {children}\n      </Link>\n    </SidebarMenuButton>\n  );\n}\n\nfunction AdminSidebar() {\n  const pathname = usePathname();\n  const { hasPermission } = useAdmin();\n\n  const navItems = [\n    {\n      group: 'Overview',\n      items: [\n        {\n          href: '/admin/dashboard',\n          label: 'Dashboard',\n          icon: LayoutDashboard,\n          permission: 'view_dashboard',\n        },\n        {\n          href: '/dashboard',\n          label: 'Guardian Portal',\n          icon: Home,\n          permission: 'view_dashboard',\n        },\n      ],\n    },\n    {\n      group: 'Management',\n      items: [\n        {\n          href: '/admin/registrations',\n          label: 'Registrations',\n          icon: Users,\n          permission: 'manage_registrations',\n        },\n        {\n          href: '/admin/waivers',\n          label: 'Waivers',\n          icon: FileCheck,\n          permission: 'manage_users',\n        },\n        {\n          href: '/admin/communications',\n          label: 'Communications',\n          icon: Mail,\n          permission: 'send_announcements',\n        },\n        {\n          href: '/admin/programs',\n          label: 'Programs',\n          icon: Calendar,\n          permission: 'manage_programs',\n        },\n        {\n          href: '/calendar',\n          label: 'Calendar',\n          icon: Calendar,\n          permission: 'manage_programs',\n        },\n      ],\n    },\n    {\n      group: 'Reports',\n      items: [\n        {\n          href: '/admin/reports',\n          label: 'Reports',\n          icon: FileSpreadsheet,\n          permission: 'view_reports',\n        },\n      ],\n    },\n    {\n      group: 'System',\n      items: [\n        {\n          href: '/admin/activity',\n          label: 'Activity Log',\n          icon: FileText,\n          permission: 'view_reports',\n        },\n        {\n          href: '/admin/users',\n          label: 'Users',\n          icon: Users,\n          permission: 'manage_settings',\n        },\n        {\n          href: '/admin/email-settings',\n          label: 'Email Settings',\n          icon: Mail,\n          permission: 'manage_settings',\n        },\n        {\n          href: '/admin/settings',\n          label: 'Settings',\n          icon: Settings,\n          permission: 'manage_settings',\n        },\n      ],\n    },\n  ];\n\n  return (\n    <Sidebar variant=\"sidebar\" collapsible=\"icon\">\n      <SidebarHeader>\n        <HehLogo />\n      </SidebarHeader>\n      <SidebarContent>\n        {navItems.map((group) => (\n          <SidebarGroup key={group.group}>\n            <SidebarGroupLabel>{group.group}</SidebarGroupLabel>\n            <SidebarMenu>\n              {group.items.map((item) => {\n                if (!hasPermission(item.permission)) return null;\n\n                return (\n                  <SidebarMenuItem key={item.href}>\n                    <MobileAwareSidebarMenuButton\n                      href={item.href}\n                      isActive={pathname === item.href}\n                      tooltip={item.label}\n                    >\n                      <item.icon />\n                      <span>{item.label}</span>\n                    </MobileAwareSidebarMenuButton>\n                  </SidebarMenuItem>\n                );\n              })}\n            </SidebarMenu>\n          </SidebarGroup>\n        ))}\n      </SidebarContent>\n      <SidebarFooter>\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <MobileAwareSidebarMenuButton href=\"/dashboard\" tooltip=\"Back to Portal\">\n              <Home />\n              <span>Back to Portal</span>\n            </MobileAwareSidebarMenuButton>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n\nfunction AdminLayoutContent({ children }: { children: React.ReactNode }) {\n  const { loading, isAdmin } = useAdmin();\n  const isMobile = useIsMobile();\n\n  if (loading) {\n    return (\n      <div className=\"flex h-screen\">\n        <div className=\"w-64\">\n          <Skeleton className=\"h-full w-full\" />\n        </div>\n        <div className=\"flex-1\">\n          <Skeleton className=\"h-16 w-full\" />\n          <Skeleton className=\"h-full w-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAdmin) {\n    return null; // Will redirect in useAdmin hook\n  }\n\n  return (\n    <SidebarProvider defaultOpen={!isMobile}>\n      <AdminSidebar />\n      <SidebarInset>\n        <DashboardHeader />\n        <main className=\"h-[calc(100vh-4rem)] overflow-y-auto p-4 sm:p-6 lg:p-8\">{children}</main>\n      </SidebarInset>\n    </SidebarProvider>\n  );\n}\n\nexport default function AdminLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <AdminProvider>\n      <AdminLayoutContent>{children}</AdminLayoutContent>\n    </AdminProvider>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useExhaustiveDependencies","severity":"warning","description":"loadRegistrations changes on every re-render and should not be used as a hook dependency.","message":[{"elements":["Emphasis"],"content":"loadRegistrations"},{"elements":[],"content":" changes on every re-render and should not be used as a hook dependency."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"To fix this, wrap the definition of "},{"elements":["Emphasis"],"content":"loadRegistrations"},{"elements":[],"content":" in its own "},{"elements":["Emphasis"],"content":"useCallback()"},{"elements":[],"content":" hook."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/admin/registrations/page.tsx"},"span":[1365,1382],"sourceCode":"'use client';\n\nimport type { ColumnDef } from '@tanstack/react-table';\nimport { Check, Clock, Eye, Mail, MoreHorizontal, X } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { DataTable } from '@/components/admin/data-table';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useAdmin } from '@/hooks/use-admin';\nimport { useToast } from '@/hooks/use-toast';\nimport { type Registration, registrationService } from '@/lib/firebase-admin';\n\nexport default function AdminRegistrationsPage() {\n  const { admin } = useAdmin();\n  const { toast } = useToast();\n  const [registrations, setRegistrations] = useState<Registration[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState<'all' | 'pending' | 'active' | 'waitlist'>('all');\n\n  useEffect(() => {\n    loadRegistrations();\n  }, [loadRegistrations]);\n\n  async function loadRegistrations() {\n    try {\n      const data = await registrationService.getAll();\n      setRegistrations(data);\n    } catch (error) {\n      console.error('Error loading registrations:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load registrations',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function handleStatusUpdate(id: string, status: Registration['status']) {\n    try {\n      await registrationService.updateStatus(id, status, admin!.id);\n      await loadRegistrations();\n      toast({\n        title: 'Success',\n        description: `Registration ${status === 'active' ? 'approved' : 'updated'}`,\n      });\n    } catch (error) {\n      console.error('Error updating status:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to update registration status',\n        variant: 'destructive',\n      });\n    }\n  }\n\n  const columns: ColumnDef<Registration>[] = [\n    {\n      id: 'select',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllPageRowsSelected()}\n          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n          aria-label=\"Select all\"\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          onCheckedChange={(value) => row.toggleSelected(!!value)}\n          aria-label=\"Select row\"\n        />\n      ),\n      enableSorting: false,\n      enableHiding: false,\n    },\n    {\n      accessorKey: 'parentName',\n      header: 'Parent Name',\n    },\n    {\n      accessorKey: 'parentEmail',\n      header: 'Email',\n    },\n    {\n      accessorKey: 'students',\n      header: 'Students',\n      cell: ({ row }) => {\n        const students = row.getValue('students') as Registration['students'];\n        return (\n          <div className=\"space-y-1\">\n            {students.map((student, idx) => (\n              <div key={idx} className=\"text-sm\">\n                {student.firstName} {student.lastName} ({student.grade}th)\n              </div>\n            ))}\n          </div>\n        );\n      },\n    },\n    {\n      accessorKey: 'registrationDate',\n      header: 'Registration Date',\n      cell: ({ row }) => {\n        const date = row.getValue('registrationDate') as Date;\n        return date.toLocaleDateString();\n      },\n    },\n    {\n      accessorKey: 'status',\n      header: 'Status',\n      cell: ({ row }) => {\n        const status = row.getValue('status') as Registration['status'];\n        const variant =\n          status === 'active'\n            ? 'default'\n            : status === 'pending'\n              ? 'secondary'\n              : status === 'waitlist'\n                ? 'outline'\n                : 'destructive';\n\n        return <Badge variant={variant}>{status}</Badge>;\n      },\n    },\n    {\n      accessorKey: 'paymentStatus',\n      header: 'Payment',\n      cell: ({ row }) => {\n        const payment = row.getValue('paymentStatus') as Registration['paymentStatus'];\n        const variant = payment === 'completed' ? 'default' : 'outline';\n        return <Badge variant={variant}>{payment}</Badge>;\n      },\n    },\n    {\n      id: 'actions',\n      cell: ({ row }) => {\n        const registration = row.original;\n\n        return (\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                <span className=\"sr-only\">Open menu</span>\n                <MoreHorizontal className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuLabel>Actions</DropdownMenuLabel>\n              <DropdownMenuItem>\n                <Eye className=\"mr-2 h-4 w-4\" />\n                View Details\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <Mail className=\"mr-2 h-4 w-4\" />\n                Email Parent\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              {registration.status === 'pending' && (\n                <>\n                  <DropdownMenuItem onClick={() => handleStatusUpdate(registration.id, 'active')}>\n                    <Check className=\"mr-2 h-4 w-4\" />\n                    Approve\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => handleStatusUpdate(registration.id, 'waitlist')}>\n                    <Clock className=\"mr-2 h-4 w-4\" />\n                    Add to Waitlist\n                  </DropdownMenuItem>\n                </>\n              )}\n              {registration.status === 'waitlist' && (\n                <DropdownMenuItem onClick={() => handleStatusUpdate(registration.id, 'active')}>\n                  <Check className=\"mr-2 h-4 w-4\" />\n                  Move to Active\n                </DropdownMenuItem>\n              )}\n              <DropdownMenuItem\n                onClick={() => handleStatusUpdate(registration.id, 'withdrawn')}\n                className=\"text-destructive\"\n              >\n                <X className=\"mr-2 h-4 w-4\" />\n                Withdraw\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        );\n      },\n    },\n  ];\n\n  const filteredRegistrations =\n    activeTab === 'all' ? registrations : registrations.filter((r) => r.status === activeTab);\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-64\" />\n        <Skeleton className=\"h-[400px]\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Registration Management</h1>\n        <p className=\"text-muted-foreground\">\n          Review and manage student registrations for all programs\n        </p>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Total Registrations</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{registrations.length}</div>\n            <p className=\"text-muted-foreground text-xs\">All time</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Pending Approval</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {registrations.filter((r) => r.status === 'pending').length}\n            </div>\n            <p className=\"text-muted-foreground text-xs\">Awaiting review</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Active Students</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {registrations\n                .filter((r) => r.status === 'active')\n                .reduce((sum, r) => sum + r.students.length, 0)}\n            </div>\n            <p className=\"text-muted-foreground text-xs\">Currently enrolled</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Waitlisted</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {registrations.filter((r) => r.status === 'waitlist').length}\n            </div>\n            <p className=\"text-muted-foreground text-xs\">Waiting for space</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={(v) => setActiveTab(v as any)}>\n        <TabsList>\n          <TabsTrigger value=\"all\">All Registrations</TabsTrigger>\n          <TabsTrigger value=\"pending\">Pending</TabsTrigger>\n          <TabsTrigger value=\"active\">Active</TabsTrigger>\n          <TabsTrigger value=\"waitlist\">Waitlist</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value={activeTab} className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Registration List</CardTitle>\n              <CardDescription>\n                Manage all student registrations for MathCounts 2025\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <DataTable\n                columns={columns}\n                data={filteredRegistrations}\n                searchKey=\"parentName\"\n                onExport={() => {\n                  // TODO: Implement export\n                  console.log('Export registrations');\n                }}\n                onEmailSelected={(ids) => {\n                  // TODO: Implement bulk email\n                  console.log('Email selected:', ids);\n                }}\n              />\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"warning","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[3327,3330],"sourceCode":"'use client';\n\nimport type { ColumnDef } from '@tanstack/react-table';\nimport { Check, Clock, Eye, Mail, MoreHorizontal, X } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { DataTable } from '@/components/admin/data-table';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useAdmin } from '@/hooks/use-admin';\nimport { useToast } from '@/hooks/use-toast';\nimport { type Registration, registrationService } from '@/lib/firebase-admin';\n\nexport default function AdminRegistrationsPage() {\n  const { admin } = useAdmin();\n  const { toast } = useToast();\n  const [registrations, setRegistrations] = useState<Registration[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState<'all' | 'pending' | 'active' | 'waitlist'>('all');\n\n  useEffect(() => {\n    loadRegistrations();\n  }, [loadRegistrations]);\n\n  async function loadRegistrations() {\n    try {\n      const data = await registrationService.getAll();\n      setRegistrations(data);\n    } catch (error) {\n      console.error('Error loading registrations:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load registrations',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function handleStatusUpdate(id: string, status: Registration['status']) {\n    try {\n      await registrationService.updateStatus(id, status, admin!.id);\n      await loadRegistrations();\n      toast({\n        title: 'Success',\n        description: `Registration ${status === 'active' ? 'approved' : 'updated'}`,\n      });\n    } catch (error) {\n      console.error('Error updating status:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to update registration status',\n        variant: 'destructive',\n      });\n    }\n  }\n\n  const columns: ColumnDef<Registration>[] = [\n    {\n      id: 'select',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllPageRowsSelected()}\n          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n          aria-label=\"Select all\"\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          onCheckedChange={(value) => row.toggleSelected(!!value)}\n          aria-label=\"Select row\"\n        />\n      ),\n      enableSorting: false,\n      enableHiding: false,\n    },\n    {\n      accessorKey: 'parentName',\n      header: 'Parent Name',\n    },\n    {\n      accessorKey: 'parentEmail',\n      header: 'Email',\n    },\n    {\n      accessorKey: 'students',\n      header: 'Students',\n      cell: ({ row }) => {\n        const students = row.getValue('students') as Registration['students'];\n        return (\n          <div className=\"space-y-1\">\n            {students.map((student, idx) => (\n              <div key={idx} className=\"text-sm\">\n                {student.firstName} {student.lastName} ({student.grade}th)\n              </div>\n            ))}\n          </div>\n        );\n      },\n    },\n    {\n      accessorKey: 'registrationDate',\n      header: 'Registration Date',\n      cell: ({ row }) => {\n        const date = row.getValue('registrationDate') as Date;\n        return date.toLocaleDateString();\n      },\n    },\n    {\n      accessorKey: 'status',\n      header: 'Status',\n      cell: ({ row }) => {\n        const status = row.getValue('status') as Registration['status'];\n        const variant =\n          status === 'active'\n            ? 'default'\n            : status === 'pending'\n              ? 'secondary'\n              : status === 'waitlist'\n                ? 'outline'\n                : 'destructive';\n\n        return <Badge variant={variant}>{status}</Badge>;\n      },\n    },\n    {\n      accessorKey: 'paymentStatus',\n      header: 'Payment',\n      cell: ({ row }) => {\n        const payment = row.getValue('paymentStatus') as Registration['paymentStatus'];\n        const variant = payment === 'completed' ? 'default' : 'outline';\n        return <Badge variant={variant}>{payment}</Badge>;\n      },\n    },\n    {\n      id: 'actions',\n      cell: ({ row }) => {\n        const registration = row.original;\n\n        return (\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                <span className=\"sr-only\">Open menu</span>\n                <MoreHorizontal className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuLabel>Actions</DropdownMenuLabel>\n              <DropdownMenuItem>\n                <Eye className=\"mr-2 h-4 w-4\" />\n                View Details\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <Mail className=\"mr-2 h-4 w-4\" />\n                Email Parent\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              {registration.status === 'pending' && (\n                <>\n                  <DropdownMenuItem onClick={() => handleStatusUpdate(registration.id, 'active')}>\n                    <Check className=\"mr-2 h-4 w-4\" />\n                    Approve\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => handleStatusUpdate(registration.id, 'waitlist')}>\n                    <Clock className=\"mr-2 h-4 w-4\" />\n                    Add to Waitlist\n                  </DropdownMenuItem>\n                </>\n              )}\n              {registration.status === 'waitlist' && (\n                <DropdownMenuItem onClick={() => handleStatusUpdate(registration.id, 'active')}>\n                  <Check className=\"mr-2 h-4 w-4\" />\n                  Move to Active\n                </DropdownMenuItem>\n              )}\n              <DropdownMenuItem\n                onClick={() => handleStatusUpdate(registration.id, 'withdrawn')}\n                className=\"text-destructive\"\n              >\n                <X className=\"mr-2 h-4 w-4\" />\n                Withdraw\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        );\n      },\n    },\n  ];\n\n  const filteredRegistrations =\n    activeTab === 'all' ? registrations : registrations.filter((r) => r.status === activeTab);\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-64\" />\n        <Skeleton className=\"h-[400px]\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Registration Management</h1>\n        <p className=\"text-muted-foreground\">\n          Review and manage student registrations for all programs\n        </p>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Total Registrations</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{registrations.length}</div>\n            <p className=\"text-muted-foreground text-xs\">All time</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Pending Approval</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {registrations.filter((r) => r.status === 'pending').length}\n            </div>\n            <p className=\"text-muted-foreground text-xs\">Awaiting review</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Active Students</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {registrations\n                .filter((r) => r.status === 'active')\n                .reduce((sum, r) => sum + r.students.length, 0)}\n            </div>\n            <p className=\"text-muted-foreground text-xs\">Currently enrolled</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Waitlisted</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {registrations.filter((r) => r.status === 'waitlist').length}\n            </div>\n            <p className=\"text-muted-foreground text-xs\">Waiting for space</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={(v) => setActiveTab(v as any)}>\n        <TabsList>\n          <TabsTrigger value=\"all\">All Registrations</TabsTrigger>\n          <TabsTrigger value=\"pending\">Pending</TabsTrigger>\n          <TabsTrigger value=\"active\">Active</TabsTrigger>\n          <TabsTrigger value=\"waitlist\">Waitlist</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value={activeTab} className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Registration List</CardTitle>\n              <CardDescription>\n                Manage all student registrations for MathCounts 2025\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <DataTable\n                columns={columns}\n                data={filteredRegistrations}\n                searchKey=\"parentName\"\n                onExport={() => {\n                  // TODO: Implement export\n                  console.log('Export registrations');\n                }}\n                onEmailSelected={(ids) => {\n                  // TODO: Implement bulk email\n                  console.log('Email selected:', ids);\n                }}\n              />\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/admin/registrations/page.tsx"},"span":[3361,3364],"sourceCode":"'use client';\n\nimport type { ColumnDef } from '@tanstack/react-table';\nimport { Check, Clock, Eye, Mail, MoreHorizontal, X } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { DataTable } from '@/components/admin/data-table';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useAdmin } from '@/hooks/use-admin';\nimport { useToast } from '@/hooks/use-toast';\nimport { type Registration, registrationService } from '@/lib/firebase-admin';\n\nexport default function AdminRegistrationsPage() {\n  const { admin } = useAdmin();\n  const { toast } = useToast();\n  const [registrations, setRegistrations] = useState<Registration[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState<'all' | 'pending' | 'active' | 'waitlist'>('all');\n\n  useEffect(() => {\n    loadRegistrations();\n  }, [loadRegistrations]);\n\n  async function loadRegistrations() {\n    try {\n      const data = await registrationService.getAll();\n      setRegistrations(data);\n    } catch (error) {\n      console.error('Error loading registrations:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load registrations',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function handleStatusUpdate(id: string, status: Registration['status']) {\n    try {\n      await registrationService.updateStatus(id, status, admin!.id);\n      await loadRegistrations();\n      toast({\n        title: 'Success',\n        description: `Registration ${status === 'active' ? 'approved' : 'updated'}`,\n      });\n    } catch (error) {\n      console.error('Error updating status:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to update registration status',\n        variant: 'destructive',\n      });\n    }\n  }\n\n  const columns: ColumnDef<Registration>[] = [\n    {\n      id: 'select',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllPageRowsSelected()}\n          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n          aria-label=\"Select all\"\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          onCheckedChange={(value) => row.toggleSelected(!!value)}\n          aria-label=\"Select row\"\n        />\n      ),\n      enableSorting: false,\n      enableHiding: false,\n    },\n    {\n      accessorKey: 'parentName',\n      header: 'Parent Name',\n    },\n    {\n      accessorKey: 'parentEmail',\n      header: 'Email',\n    },\n    {\n      accessorKey: 'students',\n      header: 'Students',\n      cell: ({ row }) => {\n        const students = row.getValue('students') as Registration['students'];\n        return (\n          <div className=\"space-y-1\">\n            {students.map((student, idx) => (\n              <div key={idx} className=\"text-sm\">\n                {student.firstName} {student.lastName} ({student.grade}th)\n              </div>\n            ))}\n          </div>\n        );\n      },\n    },\n    {\n      accessorKey: 'registrationDate',\n      header: 'Registration Date',\n      cell: ({ row }) => {\n        const date = row.getValue('registrationDate') as Date;\n        return date.toLocaleDateString();\n      },\n    },\n    {\n      accessorKey: 'status',\n      header: 'Status',\n      cell: ({ row }) => {\n        const status = row.getValue('status') as Registration['status'];\n        const variant =\n          status === 'active'\n            ? 'default'\n            : status === 'pending'\n              ? 'secondary'\n              : status === 'waitlist'\n                ? 'outline'\n                : 'destructive';\n\n        return <Badge variant={variant}>{status}</Badge>;\n      },\n    },\n    {\n      accessorKey: 'paymentStatus',\n      header: 'Payment',\n      cell: ({ row }) => {\n        const payment = row.getValue('paymentStatus') as Registration['paymentStatus'];\n        const variant = payment === 'completed' ? 'default' : 'outline';\n        return <Badge variant={variant}>{payment}</Badge>;\n      },\n    },\n    {\n      id: 'actions',\n      cell: ({ row }) => {\n        const registration = row.original;\n\n        return (\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                <span className=\"sr-only\">Open menu</span>\n                <MoreHorizontal className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuLabel>Actions</DropdownMenuLabel>\n              <DropdownMenuItem>\n                <Eye className=\"mr-2 h-4 w-4\" />\n                View Details\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <Mail className=\"mr-2 h-4 w-4\" />\n                Email Parent\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              {registration.status === 'pending' && (\n                <>\n                  <DropdownMenuItem onClick={() => handleStatusUpdate(registration.id, 'active')}>\n                    <Check className=\"mr-2 h-4 w-4\" />\n                    Approve\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => handleStatusUpdate(registration.id, 'waitlist')}>\n                    <Clock className=\"mr-2 h-4 w-4\" />\n                    Add to Waitlist\n                  </DropdownMenuItem>\n                </>\n              )}\n              {registration.status === 'waitlist' && (\n                <DropdownMenuItem onClick={() => handleStatusUpdate(registration.id, 'active')}>\n                  <Check className=\"mr-2 h-4 w-4\" />\n                  Move to Active\n                </DropdownMenuItem>\n              )}\n              <DropdownMenuItem\n                onClick={() => handleStatusUpdate(registration.id, 'withdrawn')}\n                className=\"text-destructive\"\n              >\n                <X className=\"mr-2 h-4 w-4\" />\n                Withdraw\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        );\n      },\n    },\n  ];\n\n  const filteredRegistrations =\n    activeTab === 'all' ? registrations : registrations.filter((r) => r.status === activeTab);\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-64\" />\n        <Skeleton className=\"h-[400px]\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Registration Management</h1>\n        <p className=\"text-muted-foreground\">\n          Review and manage student registrations for all programs\n        </p>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Total Registrations</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{registrations.length}</div>\n            <p className=\"text-muted-foreground text-xs\">All time</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Pending Approval</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {registrations.filter((r) => r.status === 'pending').length}\n            </div>\n            <p className=\"text-muted-foreground text-xs\">Awaiting review</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Active Students</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {registrations\n                .filter((r) => r.status === 'active')\n                .reduce((sum, r) => sum + r.students.length, 0)}\n            </div>\n            <p className=\"text-muted-foreground text-xs\">Currently enrolled</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Waitlisted</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {registrations.filter((r) => r.status === 'waitlist').length}\n            </div>\n            <p className=\"text-muted-foreground text-xs\">Waiting for space</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={(v) => setActiveTab(v as any)}>\n        <TabsList>\n          <TabsTrigger value=\"all\">All Registrations</TabsTrigger>\n          <TabsTrigger value=\"pending\">Pending</TabsTrigger>\n          <TabsTrigger value=\"active\">Active</TabsTrigger>\n          <TabsTrigger value=\"waitlist\">Waitlist</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value={activeTab} className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Registration List</CardTitle>\n              <CardDescription>\n                Manage all student registrations for MathCounts 2025\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <DataTable\n                columns={columns}\n                data={filteredRegistrations}\n                searchKey=\"parentName\"\n                onExport={() => {\n                  // TODO: Implement export\n                  console.log('Export registrations');\n                }}\n                onEmailSelected={(ids) => {\n                  // TODO: Implement bulk email\n                  console.log('Email selected:', ids);\n                }}\n              />\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useExhaustiveDependencies","severity":"warning","description":"loadRegistrationData changes on every re-render and should not be used as a hook dependency.","message":[{"elements":["Emphasis"],"content":"loadRegistrationData"},{"elements":[],"content":" changes on every re-render and should not be used as a hook dependency."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"To fix this, wrap the definition of "},{"elements":["Emphasis"],"content":"loadRegistrationData"},{"elements":[],"content":" in its own "},{"elements":["Emphasis"],"content":"useCallback()"},{"elements":[],"content":" hook."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/admin/reports/page.tsx"},"span":[1472,1492],"sourceCode":"'use client';\n\nimport { AlertCircle, Clock, Download, UserCheck, Users } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { useAdmin } from '@/hooks/use-admin';\nimport { useToast } from '@/hooks/use-toast';\nimport { type Registration, registrationService } from '@/lib/firebase-admin';\n\ninterface RegistrationStats {\n  total: number;\n  pending: number;\n  active: number;\n  waitlist: number;\n  byGrade: Record<string, number>;\n  bySchool: Record<string, number>;\n}\n\nexport default function AdminReportsPage() {\n  const { hasPermission } = useAdmin();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(true);\n  const [selectedProgram, setSelectedProgram] = useState('mathcounts-2025');\n  const [registrations, setRegistrations] = useState<Registration[]>([]);\n  const [stats, setStats] = useState<RegistrationStats | null>(null);\n\n  useEffect(() => {\n    if (hasPermission('view_reports')) {\n      loadRegistrationData();\n    }\n  }, [hasPermission, loadRegistrationData]);\n\n  async function loadRegistrationData() {\n    try {\n      setLoading(true);\n      const [regs, statsData] = await Promise.all([\n        registrationService.getAll({ programId: selectedProgram }),\n        registrationService.getStats(selectedProgram),\n      ]);\n\n      setRegistrations(regs);\n\n      // Calculate additional stats\n      const byGrade: Record<string, number> = {};\n      const bySchool: Record<string, number> = {};\n\n      regs.forEach((reg) => {\n        reg.students.forEach((student) => {\n          // Count by grade\n          const grade = student.grade.toString();\n          byGrade[grade] = (byGrade[grade] || 0) + 1;\n\n          // Count by school\n          const school = student.school || 'Unknown';\n          bySchool[school] = (bySchool[school] || 0) + 1;\n        });\n      });\n\n      setStats({\n        total: statsData.totalStudents,\n        pending: statsData.pending,\n        active: statsData.active,\n        waitlist: statsData.waitlist,\n        byGrade,\n        bySchool,\n      });\n    } catch (error) {\n      console.error('Error loading registration data:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load registration data',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function exportData() {\n    try {\n      const csvHeaders = [\n        'Guardian Name',\n        'Guardian Email',\n        'Guardian Phone',\n        'Student Name',\n        'Student Grade',\n        'Student School',\n        'Status',\n        'Registration Date',\n      ];\n\n      const csvRows = registrations.flatMap((reg) =>\n        reg.students.map((student) => [\n          reg.parentName,\n          reg.parentEmail,\n          reg.parentPhone,\n          `${student.firstName} ${student.lastName}`.trim(),\n          student.grade,\n          student.school || '',\n          reg.status,\n          new Date(reg.registrationDate).toLocaleDateString(),\n        ])\n      );\n\n      const csvContent = [\n        csvHeaders.join(','),\n        ...csvRows.map((row) => row.map((cell) => `\"${cell}\"`).join(',')),\n      ].join('\\n');\n\n      const blob = new Blob([csvContent], { type: 'text/csv' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `registrations-${selectedProgram}-${new Date().toISOString().split('T')[0]}.csv`;\n      a.click();\n      window.URL.revokeObjectURL(url);\n\n      toast({\n        title: 'Export successful',\n        description: 'Registration data exported to CSV',\n      });\n    } catch (error) {\n      console.error('Error exporting data:', error);\n      toast({\n        title: 'Export failed',\n        description: 'Failed to export registration data',\n        variant: 'destructive',\n      });\n    }\n  }\n\n  if (!hasPermission('view_reports')) {\n    return (\n      <div className=\"flex h-full items-center justify-center\">\n        <p className=\"text-muted-foreground\">You don't have permission to view reports.</p>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-64\" />\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          {[1, 2, 3, 4].map((i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n        <Skeleton className=\"h-64\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Registration Report</h1>\n          <p className=\"text-muted-foreground\">View and export registration data</p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <Select value={selectedProgram} onValueChange={setSelectedProgram}>\n            <SelectTrigger className=\"w-[200px]\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"mathcounts-2025\">MathCounts 2025</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button onClick={exportData}>\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export CSV\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Students</CardTitle>\n            <Users className=\"text-muted-foreground h-4 w-4\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.total || 0}</div>\n            <p className=\"text-muted-foreground text-xs\">Across {registrations.length} families</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active</CardTitle>\n            <UserCheck className=\"text-muted-foreground h-4 w-4\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.active || 0}</div>\n            <p className=\"text-muted-foreground text-xs\">Confirmed registrations</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n            <Clock className=\"text-muted-foreground h-4 w-4\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.pending || 0}</div>\n            <p className=\"text-muted-foreground text-xs\">Awaiting approval</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Waitlist</CardTitle>\n            <AlertCircle className=\"text-muted-foreground h-4 w-4\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.waitlist || 0}</div>\n            <p className=\"text-muted-foreground text-xs\">Waiting for space</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        {/* Grade Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Students by Grade</CardTitle>\n            <CardDescription>Distribution across grade levels</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {stats &&\n                Object.entries(stats.byGrade)\n                  .sort(([a], [b]) => Number(a) - Number(b))\n                  .map(([grade, count]) => (\n                    <div key={grade} className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Grade {grade}</span>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"bg-muted h-2 w-32 rounded-full\">\n                          <div\n                            className=\"bg-primary h-2 rounded-full\"\n                            style={{ width: `${(count / stats.total) * 100}%` }}\n                          />\n                        </div>\n                        <span className=\"w-8 text-right text-sm font-medium\">{count}</span>\n                      </div>\n                    </div>\n                  ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* School Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Students by School</CardTitle>\n            <CardDescription>Top schools by enrollment</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {stats &&\n                Object.entries(stats.bySchool)\n                  .sort(([, a], [, b]) => b - a)\n                  .slice(0, 5)\n                  .map(([school, count]) => (\n                    <div key={school} className=\"flex items-center justify-between\">\n                      <span className=\"max-w-[200px] truncate text-sm\">{school}</span>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"bg-muted h-2 w-32 rounded-full\">\n                          <div\n                            className=\"bg-primary h-2 rounded-full\"\n                            style={{ width: `${(count / stats.total) * 100}%` }}\n                          />\n                        </div>\n                        <span className=\"w-8 text-right text-sm font-medium\">{count}</span>\n                      </div>\n                    </div>\n                  ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Registrations */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Registrations</CardTitle>\n          <CardDescription>Latest registration submissions</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Guardian</TableHead>\n                <TableHead>Students</TableHead>\n                <TableHead>Date</TableHead>\n                <TableHead>Status</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {registrations.slice(0, 10).map((reg) => (\n                <TableRow key={reg.id}>\n                  <TableCell>\n                    <div>\n                      <p className=\"font-medium\">{reg.parentName}</p>\n                      <p className=\"text-muted-foreground text-sm\">{reg.parentEmail}</p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {reg.students.map((student, i) => (\n                      <div key={i} className=\"text-sm\">\n                        {`${student.firstName} ${student.lastName}`.trim()} (Grade {student.grade})\n                      </div>\n                    ))}\n                  </TableCell>\n                  <TableCell className=\"text-sm\">\n                    {new Date(reg.registrationDate).toLocaleDateString()}\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      variant={\n                        reg.status === 'active'\n                          ? 'default'\n                          : reg.status === 'pending'\n                            ? 'secondary'\n                            : 'outline'\n                      }\n                    >\n                      {reg.status}\n                    </Badge>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"warning","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[11430,11431],"sourceCode":"'use client';\n\nimport { AlertCircle, Clock, Download, UserCheck, Users } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { useAdmin } from '@/hooks/use-admin';\nimport { useToast } from '@/hooks/use-toast';\nimport { type Registration, registrationService } from '@/lib/firebase-admin';\n\ninterface RegistrationStats {\n  total: number;\n  pending: number;\n  active: number;\n  waitlist: number;\n  byGrade: Record<string, number>;\n  bySchool: Record<string, number>;\n}\n\nexport default function AdminReportsPage() {\n  const { hasPermission } = useAdmin();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(true);\n  const [selectedProgram, setSelectedProgram] = useState('mathcounts-2025');\n  const [registrations, setRegistrations] = useState<Registration[]>([]);\n  const [stats, setStats] = useState<RegistrationStats | null>(null);\n\n  useEffect(() => {\n    if (hasPermission('view_reports')) {\n      loadRegistrationData();\n    }\n  }, [hasPermission, loadRegistrationData]);\n\n  async function loadRegistrationData() {\n    try {\n      setLoading(true);\n      const [regs, statsData] = await Promise.all([\n        registrationService.getAll({ programId: selectedProgram }),\n        registrationService.getStats(selectedProgram),\n      ]);\n\n      setRegistrations(regs);\n\n      // Calculate additional stats\n      const byGrade: Record<string, number> = {};\n      const bySchool: Record<string, number> = {};\n\n      regs.forEach((reg) => {\n        reg.students.forEach((student) => {\n          // Count by grade\n          const grade = student.grade.toString();\n          byGrade[grade] = (byGrade[grade] || 0) + 1;\n\n          // Count by school\n          const school = student.school || 'Unknown';\n          bySchool[school] = (bySchool[school] || 0) + 1;\n        });\n      });\n\n      setStats({\n        total: statsData.totalStudents,\n        pending: statsData.pending,\n        active: statsData.active,\n        waitlist: statsData.waitlist,\n        byGrade,\n        bySchool,\n      });\n    } catch (error) {\n      console.error('Error loading registration data:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load registration data',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function exportData() {\n    try {\n      const csvHeaders = [\n        'Guardian Name',\n        'Guardian Email',\n        'Guardian Phone',\n        'Student Name',\n        'Student Grade',\n        'Student School',\n        'Status',\n        'Registration Date',\n      ];\n\n      const csvRows = registrations.flatMap((reg) =>\n        reg.students.map((student) => [\n          reg.parentName,\n          reg.parentEmail,\n          reg.parentPhone,\n          `${student.firstName} ${student.lastName}`.trim(),\n          student.grade,\n          student.school || '',\n          reg.status,\n          new Date(reg.registrationDate).toLocaleDateString(),\n        ])\n      );\n\n      const csvContent = [\n        csvHeaders.join(','),\n        ...csvRows.map((row) => row.map((cell) => `\"${cell}\"`).join(',')),\n      ].join('\\n');\n\n      const blob = new Blob([csvContent], { type: 'text/csv' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `registrations-${selectedProgram}-${new Date().toISOString().split('T')[0]}.csv`;\n      a.click();\n      window.URL.revokeObjectURL(url);\n\n      toast({\n        title: 'Export successful',\n        description: 'Registration data exported to CSV',\n      });\n    } catch (error) {\n      console.error('Error exporting data:', error);\n      toast({\n        title: 'Export failed',\n        description: 'Failed to export registration data',\n        variant: 'destructive',\n      });\n    }\n  }\n\n  if (!hasPermission('view_reports')) {\n    return (\n      <div className=\"flex h-full items-center justify-center\">\n        <p className=\"text-muted-foreground\">You don't have permission to view reports.</p>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-64\" />\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          {[1, 2, 3, 4].map((i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n        <Skeleton className=\"h-64\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Registration Report</h1>\n          <p className=\"text-muted-foreground\">View and export registration data</p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <Select value={selectedProgram} onValueChange={setSelectedProgram}>\n            <SelectTrigger className=\"w-[200px]\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"mathcounts-2025\">MathCounts 2025</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button onClick={exportData}>\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export CSV\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Students</CardTitle>\n            <Users className=\"text-muted-foreground h-4 w-4\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.total || 0}</div>\n            <p className=\"text-muted-foreground text-xs\">Across {registrations.length} families</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active</CardTitle>\n            <UserCheck className=\"text-muted-foreground h-4 w-4\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.active || 0}</div>\n            <p className=\"text-muted-foreground text-xs\">Confirmed registrations</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n            <Clock className=\"text-muted-foreground h-4 w-4\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.pending || 0}</div>\n            <p className=\"text-muted-foreground text-xs\">Awaiting approval</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Waitlist</CardTitle>\n            <AlertCircle className=\"text-muted-foreground h-4 w-4\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.waitlist || 0}</div>\n            <p className=\"text-muted-foreground text-xs\">Waiting for space</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        {/* Grade Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Students by Grade</CardTitle>\n            <CardDescription>Distribution across grade levels</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {stats &&\n                Object.entries(stats.byGrade)\n                  .sort(([a], [b]) => Number(a) - Number(b))\n                  .map(([grade, count]) => (\n                    <div key={grade} className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Grade {grade}</span>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"bg-muted h-2 w-32 rounded-full\">\n                          <div\n                            className=\"bg-primary h-2 rounded-full\"\n                            style={{ width: `${(count / stats.total) * 100}%` }}\n                          />\n                        </div>\n                        <span className=\"w-8 text-right text-sm font-medium\">{count}</span>\n                      </div>\n                    </div>\n                  ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* School Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Students by School</CardTitle>\n            <CardDescription>Top schools by enrollment</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {stats &&\n                Object.entries(stats.bySchool)\n                  .sort(([, a], [, b]) => b - a)\n                  .slice(0, 5)\n                  .map(([school, count]) => (\n                    <div key={school} className=\"flex items-center justify-between\">\n                      <span className=\"max-w-[200px] truncate text-sm\">{school}</span>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"bg-muted h-2 w-32 rounded-full\">\n                          <div\n                            className=\"bg-primary h-2 rounded-full\"\n                            style={{ width: `${(count / stats.total) * 100}%` }}\n                          />\n                        </div>\n                        <span className=\"w-8 text-right text-sm font-medium\">{count}</span>\n                      </div>\n                    </div>\n                  ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Registrations */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Registrations</CardTitle>\n          <CardDescription>Latest registration submissions</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Guardian</TableHead>\n                <TableHead>Students</TableHead>\n                <TableHead>Date</TableHead>\n                <TableHead>Status</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {registrations.slice(0, 10).map((reg) => (\n                <TableRow key={reg.id}>\n                  <TableCell>\n                    <div>\n                      <p className=\"font-medium\">{reg.parentName}</p>\n                      <p className=\"text-muted-foreground text-sm\">{reg.parentEmail}</p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {reg.students.map((student, i) => (\n                      <div key={i} className=\"text-sm\">\n                        {`${student.firstName} ${student.lastName}`.trim()} (Grade {student.grade})\n                      </div>\n                    ))}\n                  </TableCell>\n                  <TableCell className=\"text-sm\">\n                    {new Date(reg.registrationDate).toLocaleDateString()}\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      variant={\n                        reg.status === 'active'\n                          ? 'default'\n                          : reg.status === 'pending'\n                            ? 'secondary'\n                            : 'outline'\n                      }\n                    >\n                      {reg.status}\n                    </Badge>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/admin/reports/page.tsx"},"span":[11470,11471],"sourceCode":"'use client';\n\nimport { AlertCircle, Clock, Download, UserCheck, Users } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { useAdmin } from '@/hooks/use-admin';\nimport { useToast } from '@/hooks/use-toast';\nimport { type Registration, registrationService } from '@/lib/firebase-admin';\n\ninterface RegistrationStats {\n  total: number;\n  pending: number;\n  active: number;\n  waitlist: number;\n  byGrade: Record<string, number>;\n  bySchool: Record<string, number>;\n}\n\nexport default function AdminReportsPage() {\n  const { hasPermission } = useAdmin();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(true);\n  const [selectedProgram, setSelectedProgram] = useState('mathcounts-2025');\n  const [registrations, setRegistrations] = useState<Registration[]>([]);\n  const [stats, setStats] = useState<RegistrationStats | null>(null);\n\n  useEffect(() => {\n    if (hasPermission('view_reports')) {\n      loadRegistrationData();\n    }\n  }, [hasPermission, loadRegistrationData]);\n\n  async function loadRegistrationData() {\n    try {\n      setLoading(true);\n      const [regs, statsData] = await Promise.all([\n        registrationService.getAll({ programId: selectedProgram }),\n        registrationService.getStats(selectedProgram),\n      ]);\n\n      setRegistrations(regs);\n\n      // Calculate additional stats\n      const byGrade: Record<string, number> = {};\n      const bySchool: Record<string, number> = {};\n\n      regs.forEach((reg) => {\n        reg.students.forEach((student) => {\n          // Count by grade\n          const grade = student.grade.toString();\n          byGrade[grade] = (byGrade[grade] || 0) + 1;\n\n          // Count by school\n          const school = student.school || 'Unknown';\n          bySchool[school] = (bySchool[school] || 0) + 1;\n        });\n      });\n\n      setStats({\n        total: statsData.totalStudents,\n        pending: statsData.pending,\n        active: statsData.active,\n        waitlist: statsData.waitlist,\n        byGrade,\n        bySchool,\n      });\n    } catch (error) {\n      console.error('Error loading registration data:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load registration data',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function exportData() {\n    try {\n      const csvHeaders = [\n        'Guardian Name',\n        'Guardian Email',\n        'Guardian Phone',\n        'Student Name',\n        'Student Grade',\n        'Student School',\n        'Status',\n        'Registration Date',\n      ];\n\n      const csvRows = registrations.flatMap((reg) =>\n        reg.students.map((student) => [\n          reg.parentName,\n          reg.parentEmail,\n          reg.parentPhone,\n          `${student.firstName} ${student.lastName}`.trim(),\n          student.grade,\n          student.school || '',\n          reg.status,\n          new Date(reg.registrationDate).toLocaleDateString(),\n        ])\n      );\n\n      const csvContent = [\n        csvHeaders.join(','),\n        ...csvRows.map((row) => row.map((cell) => `\"${cell}\"`).join(',')),\n      ].join('\\n');\n\n      const blob = new Blob([csvContent], { type: 'text/csv' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `registrations-${selectedProgram}-${new Date().toISOString().split('T')[0]}.csv`;\n      a.click();\n      window.URL.revokeObjectURL(url);\n\n      toast({\n        title: 'Export successful',\n        description: 'Registration data exported to CSV',\n      });\n    } catch (error) {\n      console.error('Error exporting data:', error);\n      toast({\n        title: 'Export failed',\n        description: 'Failed to export registration data',\n        variant: 'destructive',\n      });\n    }\n  }\n\n  if (!hasPermission('view_reports')) {\n    return (\n      <div className=\"flex h-full items-center justify-center\">\n        <p className=\"text-muted-foreground\">You don't have permission to view reports.</p>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-64\" />\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          {[1, 2, 3, 4].map((i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n        <Skeleton className=\"h-64\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Registration Report</h1>\n          <p className=\"text-muted-foreground\">View and export registration data</p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <Select value={selectedProgram} onValueChange={setSelectedProgram}>\n            <SelectTrigger className=\"w-[200px]\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"mathcounts-2025\">MathCounts 2025</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button onClick={exportData}>\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export CSV\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Students</CardTitle>\n            <Users className=\"text-muted-foreground h-4 w-4\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.total || 0}</div>\n            <p className=\"text-muted-foreground text-xs\">Across {registrations.length} families</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active</CardTitle>\n            <UserCheck className=\"text-muted-foreground h-4 w-4\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.active || 0}</div>\n            <p className=\"text-muted-foreground text-xs\">Confirmed registrations</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n            <Clock className=\"text-muted-foreground h-4 w-4\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.pending || 0}</div>\n            <p className=\"text-muted-foreground text-xs\">Awaiting approval</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Waitlist</CardTitle>\n            <AlertCircle className=\"text-muted-foreground h-4 w-4\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.waitlist || 0}</div>\n            <p className=\"text-muted-foreground text-xs\">Waiting for space</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        {/* Grade Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Students by Grade</CardTitle>\n            <CardDescription>Distribution across grade levels</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {stats &&\n                Object.entries(stats.byGrade)\n                  .sort(([a], [b]) => Number(a) - Number(b))\n                  .map(([grade, count]) => (\n                    <div key={grade} className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Grade {grade}</span>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"bg-muted h-2 w-32 rounded-full\">\n                          <div\n                            className=\"bg-primary h-2 rounded-full\"\n                            style={{ width: `${(count / stats.total) * 100}%` }}\n                          />\n                        </div>\n                        <span className=\"w-8 text-right text-sm font-medium\">{count}</span>\n                      </div>\n                    </div>\n                  ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* School Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Students by School</CardTitle>\n            <CardDescription>Top schools by enrollment</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {stats &&\n                Object.entries(stats.bySchool)\n                  .sort(([, a], [, b]) => b - a)\n                  .slice(0, 5)\n                  .map(([school, count]) => (\n                    <div key={school} className=\"flex items-center justify-between\">\n                      <span className=\"max-w-[200px] truncate text-sm\">{school}</span>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"bg-muted h-2 w-32 rounded-full\">\n                          <div\n                            className=\"bg-primary h-2 rounded-full\"\n                            style={{ width: `${(count / stats.total) * 100}%` }}\n                          />\n                        </div>\n                        <span className=\"w-8 text-right text-sm font-medium\">{count}</span>\n                      </div>\n                    </div>\n                  ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Registrations */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Registrations</CardTitle>\n          <CardDescription>Latest registration submissions</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Guardian</TableHead>\n                <TableHead>Students</TableHead>\n                <TableHead>Date</TableHead>\n                <TableHead>Status</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {registrations.slice(0, 10).map((reg) => (\n                <TableRow key={reg.id}>\n                  <TableCell>\n                    <div>\n                      <p className=\"font-medium\">{reg.parentName}</p>\n                      <p className=\"text-muted-foreground text-sm\">{reg.parentEmail}</p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {reg.students.map((student, i) => (\n                      <div key={i} className=\"text-sm\">\n                        {`${student.firstName} ${student.lastName}`.trim()} (Grade {student.grade})\n                      </div>\n                    ))}\n                  </TableCell>\n                  <TableCell className=\"text-sm\">\n                    {new Date(reg.registrationDate).toLocaleDateString()}\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      variant={\n                        reg.status === 'active'\n                          ? 'default'\n                          : reg.status === 'pending'\n                            ? 'secondary'\n                            : 'outline'\n                      }\n                    >\n                      {reg.status}\n                    </Badge>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useExhaustiveDependencies","severity":"warning","description":"loadUsers changes on every re-render and should not be used as a hook dependency.","message":[{"elements":["Emphasis"],"content":"loadUsers"},{"elements":[],"content":" changes on every re-render and should not be used as a hook dependency."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"To fix this, wrap the definition of "},{"elements":["Emphasis"],"content":"loadUsers"},{"elements":[],"content":" in its own "},{"elements":["Emphasis"],"content":"useCallback()"},{"elements":[],"content":" hook."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/admin/users/page.tsx"},"span":[2042,2051],"sourceCode":"'use client';\n\nimport {\n  AlertCircle,\n  Calendar,\n  Mail,\n  MoreVertical,\n  Phone,\n  Search,\n  Shield,\n  ShieldOff,\n  Trash2,\n  User,\n} from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Input } from '@/components/ui/input';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { useAdmin } from '@/hooks/use-admin';\nimport { useToast } from '@/hooks/use-toast';\nimport { type AdminUser, adminService, type Profile, profileService } from '@/lib/firebase-admin';\nimport { formatPhoneNumber } from '@/lib/utils';\n\ninterface UserWithProfile extends Profile {\n  isAdmin?: boolean;\n  adminRole?: 'admin' | 'superAdmin';\n}\n\nexport default function UserManagementPage() {\n  const { hasPermission, admin: currentAdmin } = useAdmin();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(true);\n  const [users, setUsers] = useState<UserWithProfile[]>([]);\n  const [admins, setAdmins] = useState<AdminUser[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [deleteUserId, setDeleteUserId] = useState<string | null>(null);\n  const [deleteUserName, setDeleteUserName] = useState<string>('');\n\n  useEffect(() => {\n    if (hasPermission('manage_settings')) {\n      loadUsers();\n    }\n  }, [hasPermission, loadUsers]);\n\n  async function loadUsers() {\n    try {\n      setLoading(true);\n\n      // Load all user profiles\n      const [profiles, adminList] = await Promise.all([\n        profileService.getAll(),\n        adminService.getAll(),\n      ]);\n\n      // Merge admin status with user profiles\n      const adminIds = new Set(adminList.map((a) => a.id));\n      const adminRoles = Object.fromEntries(adminList.map((a) => [a.id, a.role]));\n\n      const usersWithAdminStatus = profiles.map((profile) => ({\n        ...profile,\n        isAdmin: adminIds.has(profile.userId),\n        adminRole: adminRoles[profile.userId] as 'admin' | 'superAdmin' | undefined,\n      }));\n\n      setUsers(usersWithAdminStatus);\n      setAdmins(adminList);\n    } catch (error) {\n      console.error('Error loading users:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load users',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function handleDeleteUser(userId: string) {\n    try {\n      // Delete user profile\n      await profileService.delete(userId);\n\n      // If user is admin, remove admin access\n      if (admins.some((a) => a.id === userId)) {\n        await adminService.delete(userId);\n      }\n\n      toast({\n        title: 'User deleted',\n        description: 'The user has been removed from the system',\n      });\n\n      // Reload users\n      loadUsers();\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to delete user',\n        variant: 'destructive',\n      });\n    } finally {\n      setDeleteUserId(null);\n    }\n  }\n\n  async function handleToggleAdmin(user: UserWithProfile) {\n    try {\n      if (user.isAdmin) {\n        // Remove admin access\n        await adminService.delete(user.userId);\n        toast({\n          title: 'Admin access removed',\n          description: `${user.displayName} is no longer an admin`,\n        });\n      } else {\n        // Grant admin access\n        const newAdmin: Omit<AdminUser, 'id' | 'createdAt'> = {\n          email: user.email,\n          name: user.displayName || user.email,\n          role: 'admin',\n          permissions: [\n            'view_dashboard',\n            'manage_registrations',\n            'send_announcements',\n            'manage_programs',\n            'view_reports',\n          ],\n        };\n\n        await adminService.create(user.userId, newAdmin);\n        toast({\n          title: 'Admin access granted',\n          description: `${user.displayName} is now an admin`,\n        });\n      }\n\n      // Reload users\n      loadUsers();\n    } catch (error) {\n      console.error('Error toggling admin status:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to update admin status',\n        variant: 'destructive',\n      });\n    }\n  }\n\n  async function handleToggleSuperAdmin(user: UserWithProfile) {\n    try {\n      if (user.adminRole === 'superAdmin') {\n        // Demote to regular admin\n        await adminService.update(user.userId, { role: 'admin' });\n        toast({\n          title: 'Super admin access removed',\n          description: `${user.displayName} is now a regular admin`,\n        });\n      } else {\n        // Promote to super admin\n        await adminService.update(user.userId, {\n          role: 'superAdmin',\n          permissions: ['all'],\n        });\n        toast({\n          title: 'Super admin access granted',\n          description: `${user.displayName} is now a super admin`,\n        });\n      }\n\n      // Reload users\n      loadUsers();\n    } catch (error) {\n      console.error('Error toggling super admin status:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to update super admin status',\n        variant: 'destructive',\n      });\n    }\n  }\n\n  const filteredUsers = users.filter(\n    (user) =>\n      user.displayName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      user.phone?.includes(searchQuery.replace(/\\D/g, ''))\n  );\n\n  if (!hasPermission('manage_settings')) {\n    return (\n      <div className=\"flex h-full items-center justify-center\">\n        <p className=\"text-muted-foreground\">You don't have permission to manage users.</p>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-64\" />\n        <Skeleton className=\"h-64\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">User Management</h1>\n        <p className=\"text-muted-foreground\">Manage user accounts and admin access</p>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n            <User className=\"text-muted-foreground h-4 w-4\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{users.length}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Admins</CardTitle>\n            <Shield className=\"text-muted-foreground h-4 w-4\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{admins.length}</div>\n            <p className=\"text-muted-foreground text-xs\">\n              {admins.filter((a) => a.role === 'superAdmin').length} super admins\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Guardians</CardTitle>\n            <User className=\"text-muted-foreground h-4 w-4\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{users.filter((u) => !u.isAdmin).length}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle>All Users</CardTitle>\n          <CardDescription>Search and manage user accounts</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"mb-4\">\n            <div className=\"relative\">\n              <Search className=\"text-muted-foreground absolute top-1/2 left-3 h-4 w-4 -translate-y-1/2\" />\n              <Input\n                placeholder=\"Search by name, email, or phone...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-9\"\n              />\n            </div>\n          </div>\n\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>User</TableHead>\n                  <TableHead>Contact</TableHead>\n                  <TableHead>Role</TableHead>\n                  <TableHead>Joined</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredUsers.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={5} className=\"text-muted-foreground text-center\">\n                      No users found\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredUsers.map((user) => (\n                    <TableRow key={user.userId}>\n                      <TableCell>\n                        <div className=\"flex items-center gap-3\">\n                          <Avatar className=\"h-8 w-8\">\n                            <AvatarImage src={user.avatarUrl} />\n                            <AvatarFallback>\n                              {user.displayName?.charAt(0) || user.email.charAt(0)}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <p className=\"font-medium\">{user.displayName || 'No name'}</p>\n                            <p className=\"text-muted-foreground text-sm\">{user.email}</p>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"space-y-1\">\n                          <div className=\"flex items-center gap-1 text-sm\">\n                            <Mail className=\"h-3 w-3\" />\n                            {user.email}\n                          </div>\n                          {user.phone && (\n                            <div className=\"text-muted-foreground flex items-center gap-1 text-sm\">\n                              <Phone className=\"h-3 w-3\" />\n                              {formatPhoneNumber(user.phone)}\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {user.isAdmin ? (\n                          <Badge\n                            variant={user.adminRole === 'superAdmin' ? 'default' : 'secondary'}\n                          >\n                            <Shield className=\"mr-1 h-3 w-3\" />\n                            {user.adminRole === 'superAdmin' ? 'Super Admin' : 'Admin'}\n                          </Badge>\n                        ) : (\n                          <Badge variant=\"outline\">Guardian</Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-muted-foreground flex items-center gap-1 text-sm\">\n                          <Calendar className=\"h-3 w-3\" />\n                          {user.createdAt\n                            ? new Date(user.createdAt).toLocaleDateString()\n                            : 'Unknown'}\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"icon\">\n                              <MoreVertical className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                            <DropdownMenuSeparator />\n\n                            {/* Don't allow users to modify their own admin status */}\n                            {user.userId !== currentAdmin?.id && (\n                              <>\n                                {user.isAdmin ? (\n                                  <>\n                                    <DropdownMenuItem onClick={() => handleToggleAdmin(user)}>\n                                      <ShieldOff className=\"mr-2 h-4 w-4\" />\n                                      Remove Admin Access\n                                    </DropdownMenuItem>\n                                    {user.adminRole === 'admin' && (\n                                      <DropdownMenuItem\n                                        onClick={() => handleToggleSuperAdmin(user)}\n                                      >\n                                        <Shield className=\"mr-2 h-4 w-4\" />\n                                        Promote to Super Admin\n                                      </DropdownMenuItem>\n                                    )}\n                                    {user.adminRole === 'superAdmin' &&\n                                      currentAdmin?.role === 'superAdmin' && (\n                                        <DropdownMenuItem\n                                          onClick={() => handleToggleSuperAdmin(user)}\n                                        >\n                                          <ShieldOff className=\"mr-2 h-4 w-4\" />\n                                          Demote to Admin\n                                        </DropdownMenuItem>\n                                      )}\n                                  </>\n                                ) : (\n                                  <DropdownMenuItem onClick={() => handleToggleAdmin(user)}>\n                                    <Shield className=\"mr-2 h-4 w-4\" />\n                                    Grant Admin Access\n                                  </DropdownMenuItem>\n                                )}\n                                <DropdownMenuSeparator />\n                              </>\n                            )}\n\n                            <DropdownMenuItem\n                              className=\"text-destructive\"\n                              onClick={() => {\n                                setDeleteUserId(user.userId);\n                                setDeleteUserName(user.displayName || user.email);\n                              }}\n                              disabled={user.userId === currentAdmin?.id}\n                            >\n                              <Trash2 className=\"mr-2 h-4 w-4\" />\n                              Delete User\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!deleteUserId} onOpenChange={(open) => !open && setDeleteUserId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete User</AlertDialogTitle>\n            <AlertDialogDescription>\n              <div className=\"space-y-3\">\n                <p>\n                  Are you sure you want to delete <strong>{deleteUserName}</strong>?\n                </p>\n                <div className=\"flex items-center gap-2 text-amber-600\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <span className=\"text-sm\">This action cannot be undone.</span>\n                </div>\n                <p className=\"text-muted-foreground text-sm\">\n                  The user's profile and all associated data will be permanently removed.\n                </p>\n              </div>\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deleteUserId && handleDeleteUser(deleteUserId)}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              Delete User\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useExhaustiveDependencies","severity":"warning","description":"loadStudents changes on every re-render and should not be used as a hook dependency.","message":[{"elements":["Emphasis"],"content":"loadStudents"},{"elements":[],"content":" changes on every re-render and should not be used as a hook dependency."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"To fix this, wrap the definition of "},{"elements":["Emphasis"],"content":"loadStudents"},{"elements":[],"content":" in its own "},{"elements":["Emphasis"],"content":"useCallback()"},{"elements":[],"content":" hook."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/admin/waivers/page.tsx"},"span":[1769,1781],"sourceCode":"'use client';\n\nimport { collection, doc, getDocs, query, updateDoc, where } from 'firebase/firestore';\nimport {\n  AlertCircle,\n  Calendar,\n  CheckCircle,\n  Clock,\n  FileCheck,\n  FileX,\n  Search,\n  User,\n  XCircle,\n} from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { useAdmin } from '@/hooks/use-admin';\nimport { useToast } from '@/hooks/use-toast';\nimport { db } from '@/lib/firebase';\n\ninterface Student {\n  id: string;\n  displayName: string;\n  grade: number;\n  school: string;\n  guardianId: string;\n  guardianName?: string;\n  guardianEmail?: string;\n  waiverStatus: 'pending' | 'received' | 'rejected';\n  waiverDate?: Date;\n  createdAt: Date;\n}\n\nexport default function WaiversPage() {\n  const { isAdmin, hasPermission } = useAdmin();\n  const { toast } = useToast();\n  const [students, setStudents] = useState<Student[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState<'all' | 'pending' | 'received' | 'rejected'>(\n    'all'\n  );\n  const [updating, setUpdating] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadStudents();\n  }, [loadStudents]);\n\n  async function loadStudents() {\n    try {\n      // Get all students\n      const studentsSnapshot = await getDocs(collection(db, 'students'));\n      const studentsData: Student[] = [];\n\n      for (const studentDoc of studentsSnapshot.docs) {\n        const data = studentDoc.data();\n\n        // Get guardian info\n        let guardianName = '';\n        let guardianEmail = '';\n\n        if (data.guardianId) {\n          const guardianQuery = query(\n            collection(db, 'profiles'),\n            where('__name__', '==', data.guardianId)\n          );\n          const guardianSnapshot = await getDocs(guardianQuery);\n\n          if (!guardianSnapshot.empty) {\n            const guardianData = guardianSnapshot.docs[0].data();\n            guardianName = guardianData.displayName || guardianData.guardianName || '';\n            guardianEmail = guardianData.email || '';\n          }\n        }\n\n        studentsData.push({\n          id: studentDoc.id,\n          displayName: data.displayName || `${data.firstName} ${data.lastName}`,\n          grade: data.grade,\n          school: data.school,\n          guardianId: data.guardianId,\n          guardianName,\n          guardianEmail,\n          waiverStatus: data.waiverStatus || 'pending',\n          waiverDate: data.waiverDate?.toDate(),\n          createdAt: data.createdAt?.toDate() || new Date(),\n        });\n      }\n\n      // Sort by waiver status (pending first) then by name\n      studentsData.sort((a, b) => {\n        if (a.waiverStatus === 'pending' && b.waiverStatus !== 'pending') return -1;\n        if (a.waiverStatus !== 'pending' && b.waiverStatus === 'pending') return 1;\n        return a.displayName.localeCompare(b.displayName);\n      });\n\n      setStudents(studentsData);\n    } catch (error) {\n      console.error('Error loading students:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load student waivers',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function updateWaiverStatus(\n    studentId: string,\n    newStatus: 'pending' | 'received' | 'rejected'\n  ) {\n    setUpdating(studentId);\n\n    try {\n      const updateData: any = {\n        waiverStatus: newStatus,\n      };\n\n      // Add or remove waiver date based on status\n      if (newStatus === 'received') {\n        updateData.waiverDate = new Date();\n      } else {\n        updateData.waiverDate = null;\n      }\n\n      await updateDoc(doc(db, 'students', studentId), updateData);\n\n      // Update local state\n      setStudents(\n        students.map((s) =>\n          s.id === studentId\n            ? {\n                ...s,\n                waiverStatus: newStatus,\n                waiverDate: newStatus === 'received' ? new Date() : undefined,\n              }\n            : s\n        )\n      );\n\n      toast({\n        title: 'Success',\n        description: `Waiver status updated to ${newStatus}`,\n      });\n    } catch (error) {\n      console.error('Error updating waiver status:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to update waiver status',\n        variant: 'destructive',\n      });\n    } finally {\n      setUpdating(null);\n    }\n  }\n\n  const filteredStudents = students.filter((student) => {\n    const matchesSearch =\n      student.displayName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      student.guardianName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      student.guardianEmail?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      student.school.toLowerCase().includes(searchQuery.toLowerCase());\n\n    const matchesStatus = statusFilter === 'all' || student.waiverStatus === statusFilter;\n\n    return matchesSearch && matchesStatus;\n  });\n\n  const stats = {\n    total: students.length,\n    pending: students.filter((s) => s.waiverStatus === 'pending').length,\n    received: students.filter((s) => s.waiverStatus === 'received').length,\n    rejected: students.filter((s) => s.waiverStatus === 'rejected').length,\n  };\n\n  if (!hasPermission('manage_users')) {\n    return (\n      <div className=\"flex h-full items-center justify-center\">\n        <p className=\"text-muted-foreground\">You don't have permission to manage waivers.</p>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-64\" />\n        <Skeleton className=\"h-64\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Waiver Management</h1>\n        <p className=\"text-muted-foreground\">Track and manage student liability waivers</p>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Students</CardTitle>\n            <User className=\"text-muted-foreground h-4 w-4\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.total}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Waivers</CardTitle>\n            <Clock className=\"h-4 w-4 text-amber-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-amber-600\">{stats.pending}</div>\n            <p className=\"text-muted-foreground text-xs\">\n              {stats.total > 0 ? Math.round((stats.pending / stats.total) * 100) : 0}% of total\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Received</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{stats.received}</div>\n            <p className=\"text-muted-foreground text-xs\">\n              {stats.total > 0 ? Math.round((stats.received / stats.total) * 100) : 0}% complete\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Rejected</CardTitle>\n            <XCircle className=\"text-destructive h-4 w-4\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-destructive text-2xl font-bold\">{stats.rejected}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Alert for pending waivers */}\n      {stats.pending > 0 && (\n        <Alert className=\"border-amber-200 bg-amber-50\">\n          <AlertCircle className=\"h-4 w-4 text-amber-600\" />\n          <AlertDescription className=\"text-amber-800\">\n            <strong>{stats.pending} students</strong> are waiting for waiver approval. Students\n            cannot participate in programs until their waiver is received.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Filters and Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Student Waivers</CardTitle>\n          <CardDescription>Search and update waiver status for all students</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"mb-4 flex flex-col gap-4 sm:flex-row\">\n            <div className=\"relative flex-1\">\n              <Search className=\"text-muted-foreground absolute top-1/2 left-3 h-4 w-4 -translate-y-1/2\" />\n              <Input\n                placeholder=\"Search by student name, guardian, or school...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-9\"\n              />\n            </div>\n            <Select value={statusFilter} onValueChange={(value: any) => setStatusFilter(value)}>\n              <SelectTrigger className=\"w-full sm:w-[180px]\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Students</SelectItem>\n                <SelectItem value=\"pending\">Pending Only</SelectItem>\n                <SelectItem value=\"received\">Received Only</SelectItem>\n                <SelectItem value=\"rejected\">Rejected Only</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Student</TableHead>\n                  <TableHead>Guardian</TableHead>\n                  <TableHead>Grade/School</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Waiver Date</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredStudents.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-muted-foreground text-center\">\n                      No students found\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredStudents.map((student) => (\n                    <TableRow key={student.id}>\n                      <TableCell>\n                        <div className=\"font-medium\">{student.displayName}</div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"space-y-1\">\n                          <p className=\"text-sm\">{student.guardianName || 'Unknown'}</p>\n                          <p className=\"text-muted-foreground text-xs\">{student.guardianEmail}</p>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-sm\">\n                          <p>Grade {student.grade}</p>\n                          <p className=\"text-muted-foreground text-xs\">{student.school}</p>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {student.waiverStatus === 'pending' && (\n                          <Badge\n                            variant=\"outline\"\n                            className=\"border-amber-200 bg-amber-50 text-amber-700\"\n                          >\n                            <Clock className=\"mr-1 h-3 w-3\" />\n                            Pending\n                          </Badge>\n                        )}\n                        {student.waiverStatus === 'received' && (\n                          <Badge\n                            variant=\"outline\"\n                            className=\"border-green-200 bg-green-50 text-green-700\"\n                          >\n                            <CheckCircle className=\"mr-1 h-3 w-3\" />\n                            Received\n                          </Badge>\n                        )}\n                        {student.waiverStatus === 'rejected' && (\n                          <Badge\n                            variant=\"outline\"\n                            className=\"border-red-200 bg-red-50 text-red-700\"\n                          >\n                            <XCircle className=\"mr-1 h-3 w-3\" />\n                            Rejected\n                          </Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-muted-foreground text-sm\">\n                          {student.waiverDate ? (\n                            <div className=\"flex items-center gap-1\">\n                              <Calendar className=\"h-3 w-3\" />\n                              {student.waiverDate.toLocaleDateString()}\n                            </div>\n                          ) : (\n                            '-'\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          {student.waiverStatus !== 'received' && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"text-green-600 hover:text-green-700\"\n                              onClick={() => updateWaiverStatus(student.id, 'received')}\n                              disabled={updating === student.id}\n                            >\n                              <FileCheck className=\"h-4 w-4\" />\n                              Mark Received\n                            </Button>\n                          )}\n                          {student.waiverStatus === 'received' && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"text-amber-600 hover:text-amber-700\"\n                              onClick={() => updateWaiverStatus(student.id, 'pending')}\n                              disabled={updating === student.id}\n                            >\n                              <Clock className=\"h-4 w-4\" />\n                              Mark Pending\n                            </Button>\n                          )}\n                          {student.waiverStatus !== 'rejected' && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"text-destructive hover:text-destructive/90\"\n                              onClick={() => updateWaiverStatus(student.id, 'rejected')}\n                              disabled={updating === student.id}\n                            >\n                              <FileX className=\"h-4 w-4\" />\n                              Reject\n                            </Button>\n                          )}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useExhaustiveDependencies","severity":"warning","description":"loadAnnouncements changes on every re-render and should not be used as a hook dependency.","message":[{"elements":["Emphasis"],"content":"loadAnnouncements"},{"elements":[],"content":" changes on every re-render and should not be used as a hook dependency."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"To fix this, wrap the definition of "},{"elements":["Emphasis"],"content":"loadAnnouncements"},{"elements":[],"content":" in its own "},{"elements":["Emphasis"],"content":"useCallback()"},{"elements":[],"content":" hook."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/announcements/page.tsx"},"span":[1837,1854],"sourceCode":"'use client';\n\nimport { format, formatDistanceToNow } from 'date-fns';\nimport {\n  AlertCircle,\n  ArrowLeft,\n  CheckCircle,\n  Clock,\n  Eye,\n  EyeOff,\n  Info,\n  MoreVertical,\n  Pin,\n  Trash2,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { useEffect, useState } from 'react';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Separator } from '@/components/ui/separator';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { type Announcement, announcementService } from '@/lib/firebase-admin';\n\nexport default function AnnouncementsPage() {\n  const [announcements, setAnnouncements] = useState<Announcement[]>([]);\n  const [hiddenAnnouncements, setHiddenAnnouncements] = useState<Announcement[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedAnnouncement, setSelectedAnnouncement] = useState<Announcement | null>(null);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [announcementToDelete, setAnnouncementToDelete] = useState<Announcement | null>(null);\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadAnnouncements();\n  }, [loadAnnouncements]);\n\n  async function loadAnnouncements() {\n    if (!user) return;\n\n    try {\n      // Load visible announcements\n      const visibleData = await announcementService.getAll({\n        status: 'published',\n        userId: user.uid,\n        showHidden: false,\n      });\n      setAnnouncements(visibleData);\n\n      // Load hidden announcements\n      const allData = await announcementService.getAll({\n        status: 'published',\n        userId: user.uid,\n        showHidden: true,\n      });\n      const hidden = allData.filter((a) => a.hiddenBy?.includes(user.uid));\n      setHiddenAnnouncements(hidden);\n\n      // Mark as viewed\n      if (visibleData.length > 0) {\n        visibleData.forEach(async (announcement) => {\n          if (!announcement.acknowledgedBy.includes(user.uid)) {\n            await announcementService.markAsRead(announcement.id, user.uid);\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error loading announcements:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load announcements',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function handleHide(announcement: Announcement) {\n    if (!user) return;\n\n    try {\n      await announcementService.hide(announcement.id, user.uid);\n      toast({\n        title: 'Hidden',\n        description: 'Announcement hidden from your view',\n      });\n      loadAnnouncements();\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to hide announcement',\n        variant: 'destructive',\n      });\n    }\n  }\n\n  async function handleUnhide(announcement: Announcement) {\n    if (!user) return;\n\n    try {\n      await announcementService.unhide(announcement.id, user.uid);\n      toast({\n        title: 'Restored',\n        description: 'Announcement restored to your view',\n      });\n      loadAnnouncements();\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to restore announcement',\n        variant: 'destructive',\n      });\n    }\n  }\n\n  async function handleDelete() {\n    if (!announcementToDelete) return;\n\n    try {\n      await announcementService.delete(announcementToDelete.id);\n      toast({\n        title: 'Deleted',\n        description: 'Announcement deleted permanently',\n      });\n      loadAnnouncements();\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to delete announcement',\n        variant: 'destructive',\n      });\n    } finally {\n      setDeleteDialogOpen(false);\n      setAnnouncementToDelete(null);\n      setSelectedAnnouncement(null);\n    }\n  }\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return <AlertCircle className=\"h-5 w-5 text-red-500\" />;\n      case 'normal':\n        return <Info className=\"h-5 w-5 text-blue-500\" />;\n      default:\n        return <Info className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return <Badge variant=\"destructive\">High Priority</Badge>;\n      case 'normal':\n        return <Badge>Normal</Badge>;\n      default:\n        return <Badge variant=\"secondary\">Low</Badge>;\n    }\n  };\n\n  const AnnouncementCard = ({\n    announcement,\n    isHidden = false,\n  }: {\n    announcement: Announcement;\n    isHidden?: boolean;\n  }) => (\n    <Card\n      className={`cursor-pointer transition-shadow hover:shadow-lg ${isHidden ? 'opacity-60' : ''}`}\n      onClick={() => setSelectedAnnouncement(announcement)}\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between gap-2\">\n          <div className=\"flex items-center gap-2\">\n            {getPriorityIcon(announcement.priority)}\n            {announcement.pinned && <Pin className=\"text-muted-foreground h-4 w-4\" />}\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {announcement.recipients === 'all' ? 'All' : announcement.recipients}\n            </Badge>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>\n                <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                  <MoreVertical className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                {isHidden ? (\n                  <DropdownMenuItem\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleUnhide(announcement);\n                    }}\n                  >\n                    <Eye className=\"mr-2 h-4 w-4\" />\n                    Unhide\n                  </DropdownMenuItem>\n                ) : (\n                  <DropdownMenuItem\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleHide(announcement);\n                    }}\n                  >\n                    <EyeOff className=\"mr-2 h-4 w-4\" />\n                    Hide\n                  </DropdownMenuItem>\n                )}\n                {user && announcement.createdBy === user.uid && (\n                  <>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem\n                      className=\"text-destructive\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setAnnouncementToDelete(announcement);\n                        setDeleteDialogOpen(true);\n                      }}\n                    >\n                      <Trash2 className=\"mr-2 h-4 w-4\" />\n                      Delete\n                    </DropdownMenuItem>\n                  </>\n                )}\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n        <CardTitle className=\"line-clamp-1\">{announcement.title}</CardTitle>\n        <CardDescription className=\"text-xs\">\n          {announcement.publishedAt &&\n            formatDistanceToNow(new Date(announcement.publishedAt), { addSuffix: true })}{' '}\n          by {announcement.createdByName}\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-muted-foreground line-clamp-3 text-sm\">{announcement.content}</p>\n        <div className=\"text-muted-foreground mt-4 flex items-center gap-4 text-xs\">\n          <span>{announcement.viewCount} views</span>\n          {announcement.acknowledgedBy.includes(user?.uid || '') && (\n            <span className=\"flex items-center gap-1\">\n              <CheckCircle className=\"h-3 w-3\" /> Read\n            </span>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto max-w-6xl space-y-6 p-6\">\n        <Skeleton className=\"h-10 w-64\" />\n        <div className=\"grid gap-4 md:grid-cols-2\">\n          {[1, 2, 3, 4].map((i) => (\n            <Skeleton key={i} className=\"h-40\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (selectedAnnouncement) {\n    const isOwner = user && selectedAnnouncement.createdBy === user.uid;\n\n    return (\n      <div className=\"container mx-auto max-w-4xl p-6\">\n        <Button variant=\"ghost\" onClick={() => setSelectedAnnouncement(null)} className=\"mb-6\">\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          Back to all announcements\n        </Button>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-start justify-between gap-4\">\n              <div className=\"space-y-1\">\n                <div className=\"flex items-center gap-2\">\n                  {selectedAnnouncement.pinned && <Pin className=\"h-4 w-4\" />}\n                  <CardTitle className=\"text-2xl\">{selectedAnnouncement.title}</CardTitle>\n                </div>\n                <CardDescription>\n                  By {selectedAnnouncement.createdByName} •{' '}\n                  {selectedAnnouncement.publishedAt &&\n                    format(new Date(selectedAnnouncement.publishedAt), 'MMMM d, yyyy at h:mm a')}\n                </CardDescription>\n              </div>\n              <div className=\"flex flex-col items-end gap-2\">\n                {getPriorityBadge(selectedAnnouncement.priority)}\n                <Badge variant=\"outline\">\n                  {selectedAnnouncement.recipients === 'all'\n                    ? 'All Families'\n                    : selectedAnnouncement.recipients}\n                </Badge>\n                {isOwner && (\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setAnnouncementToDelete(selectedAnnouncement);\n                      setDeleteDialogOpen(true);\n                    }}\n                  >\n                    <Trash2 className=\"mr-2 h-4 w-4\" />\n                    Delete\n                  </Button>\n                )}\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"prose prose-sm max-w-none\">\n              <p className=\"whitespace-pre-wrap\">{selectedAnnouncement.content}</p>\n            </div>\n            <Separator className=\"my-6\" />\n            <div className=\"text-muted-foreground flex items-center justify-between text-sm\">\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle className=\"h-4 w-4\" />\n                <span>{selectedAnnouncement.viewCount} views</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"h-4 w-4\" />\n                <span>\n                  Posted{' '}\n                  {selectedAnnouncement.publishedAt &&\n                    formatDistanceToNow(new Date(selectedAnnouncement.publishedAt), {\n                      addSuffix: true,\n                    })}\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-6xl space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Announcements</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Stay up to date with all program announcements\n          </p>\n        </div>\n        <Button variant=\"ghost\" asChild>\n          <Link href=\"/dashboard\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Dashboard\n          </Link>\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"visible\" className=\"w-full\">\n        <TabsList>\n          <TabsTrigger value=\"visible\">Announcements ({announcements.length})</TabsTrigger>\n          <TabsTrigger value=\"hidden\">Hidden ({hiddenAnnouncements.length})</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"visible\" className=\"mt-6\">\n          {announcements.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-16\">\n                <Info className=\"text-muted-foreground mb-4 h-12 w-12\" />\n                <p className=\"text-muted-foreground text-lg\">No announcements to show</p>\n                <p className=\"text-muted-foreground mt-2 text-sm\">\n                  Check the hidden tab if you've hidden any announcements\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4 md:grid-cols-2\">\n              {announcements.map((announcement) => (\n                <AnnouncementCard key={announcement.id} announcement={announcement} />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"hidden\" className=\"mt-6\">\n          {hiddenAnnouncements.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-16\">\n                <EyeOff className=\"text-muted-foreground mb-4 h-12 w-12\" />\n                <p className=\"text-muted-foreground text-lg\">No hidden announcements</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4 md:grid-cols-2\">\n              {hiddenAnnouncements.map((announcement) => (\n                <AnnouncementCard key={announcement.id} announcement={announcement} isHidden />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Announcement</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete \"{announcementToDelete?.title}\"? This will remove it\n              for all users and cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleDelete}\n              className=\"bg-destructive text-destructive-foreground\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useExhaustiveDependencies","severity":"warning","description":"addStatus changes on every re-render and should not be used as a hook dependency.","message":[{"elements":["Emphasis"],"content":"addStatus"},{"elements":[],"content":" changes on every re-render and should not be used as a hook dependency."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"To fix this, wrap the definition of "},{"elements":["Emphasis"],"content":"addStatus"},{"elements":[],"content":" in its own "},{"elements":["Emphasis"],"content":"useCallback()"},{"elements":[],"content":" hook."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/auth-diagnostics/page.tsx"},"span":[3044,3053],"sourceCode":"'use client';\n\nimport {\n  getToken as getAppCheckToken,\n  initializeAppCheck,\n  ReCaptchaEnterpriseProvider,\n} from 'firebase/app-check';\nimport {\n  GoogleAuthProvider,\n  getRedirectResult,\n  signInWithPopup,\n  signInWithRedirect,\n} from 'firebase/auth';\nimport { useEffect, useState } from 'react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { app, auth } from '@/lib/firebase';\n\nexport default function AuthDiagnosticsPage() {\n  const [status, setStatus] = useState<string[]>([]);\n  const [error, setError] = useState<string>('');\n  const [appCheckInfo, setAppCheckInfo] = useState<string>('');\n\n  const addStatus = (message: string) => {\n    setStatus((prev) => [...prev, message]);\n  };\n\n  useEffect(() => {\n    // Check for redirect result\n    getRedirectResult(auth)\n      .then((result) => {\n        if (result) {\n          addStatus('✅ Redirect sign-in successful!');\n          addStatus(`User: ${result.user.email}`);\n        }\n      })\n      .catch((error) => {\n        if (error.code !== 'auth/popup-blocked-by-browser') {\n          addStatus(`❌ Redirect error: ${error.message}`);\n        }\n      });\n\n    // Log current environment\n    addStatus(`🌐 Current URL: ${window.location.href}`);\n    addStatus(`🔑 Auth Domain: ${auth.app.options.authDomain}`);\n    addStatus(`📱 Project ID: ${auth.app.options.projectId}`);\n\n    // Try to detect App Check initialization by attempting to get a token\n    try {\n      addStatus('🛡 Attempting to get App Check token...');\n      // Try to initialize App Check if not already initialized\n      let appCheck;\n      try {\n        const siteKey = process.env.NEXT_PUBLIC_RECAPTCHA_ENTERPRISE_SITE_KEY;\n        if (siteKey) {\n          appCheck = initializeAppCheck(app, {\n            provider: new ReCaptchaEnterpriseProvider(siteKey),\n            isTokenAutoRefreshEnabled: true,\n          });\n        }\n      } catch (e) {\n        // App Check might already be initialized\n        addStatus('! App Check may already be initialized');\n      }\n\n      // Attempt to get a token without forcing refresh\n      if (appCheck) {\n        getAppCheckToken(appCheck, false)\n          .then((res) => {\n            if (res?.token) {\n              setAppCheckInfo('App Check token acquired');\n              addStatus('✅ App Check token acquired successfully');\n            } else {\n              setAppCheckInfo('App Check token not available');\n              addStatus('! App Check token not available');\n            }\n          })\n          .catch((e) => {\n            setAppCheckInfo(`App Check token error: ${e?.message || e}`);\n            addStatus(`❌ App Check token error: ${e?.code || ''} ${e?.message || e}`);\n          });\n      }\n    } catch (e: any) {\n      setAppCheckInfo('App Check not initialized');\n      addStatus('❌ App Check not initialized or error accessing it');\n    }\n  }, [addStatus]);\n\n  const testGooglePopup = async () => {\n    try {\n      setError('');\n      addStatus('🔄 Testing Google sign-in with popup...');\n\n      const provider = new GoogleAuthProvider();\n      const result = await signInWithPopup(auth, provider);\n\n      addStatus('✅ Popup sign-in successful!');\n      addStatus(`User: ${result.user.email}`);\n      addStatus(`Provider: ${result.providerId}`);\n    } catch (error: any) {\n      setError(error.message);\n      addStatus(`❌ Popup error: ${error.code}`);\n      addStatus(`Details: ${error.message}`);\n\n      if (error.code === 'auth/popup-blocked-by-browser') {\n        addStatus('💡 Popup was blocked. Trying redirect...');\n        testGoogleRedirect();\n      }\n    }\n  };\n\n  const testGoogleRedirect = async () => {\n    try {\n      setError('');\n      addStatus('🔄 Testing Google sign-in with redirect...');\n\n      const provider = new GoogleAuthProvider();\n      await signInWithRedirect(auth, provider);\n    } catch (error: any) {\n      setError(error.message);\n      addStatus(`❌ Redirect error: ${error.code}`);\n      addStatus(`Details: ${error.message}`);\n    }\n  };\n\n  const checkAuthState = () => {\n    addStatus('🔍 Checking auth state...');\n    addStatus(`Current user: ${auth.currentUser ? auth.currentUser.email : 'None'}`);\n    const hasAuthReady = typeof (auth as any).authStateReady === 'function';\n    addStatus(`Auth ready method: ${hasAuthReady ? 'Available' : 'Unavailable'}`);\n  };\n\n  return (\n    <div className=\"container mx-auto max-w-3xl p-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Firebase Auth Diagnostics</CardTitle>\n          <CardDescription>Comprehensive authentication testing and diagnostics</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n            <Button onClick={testGooglePopup} variant=\"default\">\n              Test Google Popup\n            </Button>\n            <Button onClick={testGoogleRedirect} variant=\"secondary\">\n              Test Google Redirect\n            </Button>\n            <Button onClick={checkAuthState} variant=\"outline\">\n              Check Auth State\n            </Button>\n          </div>\n\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertDescription>\n                <strong>Error:</strong> {error}\n              </AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"space-y-2\">\n            <h3 className=\"font-semibold\">Status Log:</h3>\n            <div className=\"bg-muted h-96 overflow-y-auto rounded-lg p-4\">\n              {status.map((s, i) => (\n                <div key={i} className=\"py-1 font-mono text-sm\">\n                  {s}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <Alert>\n            <AlertDescription>\n              <strong>Common Issues:</strong>\n              <ul className=\"mt-2 list-inside list-disc space-y-1\">\n                <li>OAuth consent screen not configured</li>\n                <li>Domain not in authorized domains list</li>\n                <li>Google provider not enabled in Firebase</li>\n                <li>API restrictions blocking auth</li>\n              </ul>\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"bg-muted rounded-lg p-4\">\n            <h4 className=\"mb-2 font-semibold\">Required Firebase Console Checks:</h4>\n            {appCheckInfo && (\n              <p className=\"mb-2 text-sm\">\n                <strong>App Check:</strong> {appCheckInfo}\n              </p>\n            )}\n            <ol className=\"list-inside list-decimal space-y-1 text-sm\">\n              <li>\n                <a\n                  href=\"https://console.firebase.google.com/project/kbe-website/authentication/providers\"\n                  target=\"_blank\"\n                  className=\"text-primary hover:underline\"\n                  rel=\"noopener\"\n                >\n                  Check Google Provider is Enabled\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"https://console.firebase.google.com/project/kbe-website/authentication/settings\"\n                  target=\"_blank\"\n                  className=\"text-primary hover:underline\"\n                  rel=\"noopener\"\n                >\n                  Check Authorized Domains\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"https://console.cloud.google.com/apis/credentials/consent?project=kbe-website\"\n                  target=\"_blank\"\n                  className=\"text-primary hover:underline\"\n                  rel=\"noopener\"\n                >\n                  Check OAuth Consent Screen\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"https://console.firebase.google.com/project/kbe-website/appcheck/apps\"\n                  target=\"_blank\"\n                  className=\"text-primary hover:underline\"\n                  rel=\"noopener\"\n                >\n                  Verify App Check (reCAPTCHA Enterprise) domains include homerenrichment.com and\n                  www\n                </a>\n              </li>\n            </ol>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"warning","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[5702,5703],"sourceCode":"'use client';\n\nimport {\n  getToken as getAppCheckToken,\n  initializeAppCheck,\n  ReCaptchaEnterpriseProvider,\n} from 'firebase/app-check';\nimport {\n  GoogleAuthProvider,\n  getRedirectResult,\n  signInWithPopup,\n  signInWithRedirect,\n} from 'firebase/auth';\nimport { useEffect, useState } from 'react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { app, auth } from '@/lib/firebase';\n\nexport default function AuthDiagnosticsPage() {\n  const [status, setStatus] = useState<string[]>([]);\n  const [error, setError] = useState<string>('');\n  const [appCheckInfo, setAppCheckInfo] = useState<string>('');\n\n  const addStatus = (message: string) => {\n    setStatus((prev) => [...prev, message]);\n  };\n\n  useEffect(() => {\n    // Check for redirect result\n    getRedirectResult(auth)\n      .then((result) => {\n        if (result) {\n          addStatus('✅ Redirect sign-in successful!');\n          addStatus(`User: ${result.user.email}`);\n        }\n      })\n      .catch((error) => {\n        if (error.code !== 'auth/popup-blocked-by-browser') {\n          addStatus(`❌ Redirect error: ${error.message}`);\n        }\n      });\n\n    // Log current environment\n    addStatus(`🌐 Current URL: ${window.location.href}`);\n    addStatus(`🔑 Auth Domain: ${auth.app.options.authDomain}`);\n    addStatus(`📱 Project ID: ${auth.app.options.projectId}`);\n\n    // Try to detect App Check initialization by attempting to get a token\n    try {\n      addStatus('🛡 Attempting to get App Check token...');\n      // Try to initialize App Check if not already initialized\n      let appCheck;\n      try {\n        const siteKey = process.env.NEXT_PUBLIC_RECAPTCHA_ENTERPRISE_SITE_KEY;\n        if (siteKey) {\n          appCheck = initializeAppCheck(app, {\n            provider: new ReCaptchaEnterpriseProvider(siteKey),\n            isTokenAutoRefreshEnabled: true,\n          });\n        }\n      } catch (e) {\n        // App Check might already be initialized\n        addStatus('! App Check may already be initialized');\n      }\n\n      // Attempt to get a token without forcing refresh\n      if (appCheck) {\n        getAppCheckToken(appCheck, false)\n          .then((res) => {\n            if (res?.token) {\n              setAppCheckInfo('App Check token acquired');\n              addStatus('✅ App Check token acquired successfully');\n            } else {\n              setAppCheckInfo('App Check token not available');\n              addStatus('! App Check token not available');\n            }\n          })\n          .catch((e) => {\n            setAppCheckInfo(`App Check token error: ${e?.message || e}`);\n            addStatus(`❌ App Check token error: ${e?.code || ''} ${e?.message || e}`);\n          });\n      }\n    } catch (e: any) {\n      setAppCheckInfo('App Check not initialized');\n      addStatus('❌ App Check not initialized or error accessing it');\n    }\n  }, [addStatus]);\n\n  const testGooglePopup = async () => {\n    try {\n      setError('');\n      addStatus('🔄 Testing Google sign-in with popup...');\n\n      const provider = new GoogleAuthProvider();\n      const result = await signInWithPopup(auth, provider);\n\n      addStatus('✅ Popup sign-in successful!');\n      addStatus(`User: ${result.user.email}`);\n      addStatus(`Provider: ${result.providerId}`);\n    } catch (error: any) {\n      setError(error.message);\n      addStatus(`❌ Popup error: ${error.code}`);\n      addStatus(`Details: ${error.message}`);\n\n      if (error.code === 'auth/popup-blocked-by-browser') {\n        addStatus('💡 Popup was blocked. Trying redirect...');\n        testGoogleRedirect();\n      }\n    }\n  };\n\n  const testGoogleRedirect = async () => {\n    try {\n      setError('');\n      addStatus('🔄 Testing Google sign-in with redirect...');\n\n      const provider = new GoogleAuthProvider();\n      await signInWithRedirect(auth, provider);\n    } catch (error: any) {\n      setError(error.message);\n      addStatus(`❌ Redirect error: ${error.code}`);\n      addStatus(`Details: ${error.message}`);\n    }\n  };\n\n  const checkAuthState = () => {\n    addStatus('🔍 Checking auth state...');\n    addStatus(`Current user: ${auth.currentUser ? auth.currentUser.email : 'None'}`);\n    const hasAuthReady = typeof (auth as any).authStateReady === 'function';\n    addStatus(`Auth ready method: ${hasAuthReady ? 'Available' : 'Unavailable'}`);\n  };\n\n  return (\n    <div className=\"container mx-auto max-w-3xl p-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Firebase Auth Diagnostics</CardTitle>\n          <CardDescription>Comprehensive authentication testing and diagnostics</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n            <Button onClick={testGooglePopup} variant=\"default\">\n              Test Google Popup\n            </Button>\n            <Button onClick={testGoogleRedirect} variant=\"secondary\">\n              Test Google Redirect\n            </Button>\n            <Button onClick={checkAuthState} variant=\"outline\">\n              Check Auth State\n            </Button>\n          </div>\n\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertDescription>\n                <strong>Error:</strong> {error}\n              </AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"space-y-2\">\n            <h3 className=\"font-semibold\">Status Log:</h3>\n            <div className=\"bg-muted h-96 overflow-y-auto rounded-lg p-4\">\n              {status.map((s, i) => (\n                <div key={i} className=\"py-1 font-mono text-sm\">\n                  {s}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <Alert>\n            <AlertDescription>\n              <strong>Common Issues:</strong>\n              <ul className=\"mt-2 list-inside list-disc space-y-1\">\n                <li>OAuth consent screen not configured</li>\n                <li>Domain not in authorized domains list</li>\n                <li>Google provider not enabled in Firebase</li>\n                <li>API restrictions blocking auth</li>\n              </ul>\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"bg-muted rounded-lg p-4\">\n            <h4 className=\"mb-2 font-semibold\">Required Firebase Console Checks:</h4>\n            {appCheckInfo && (\n              <p className=\"mb-2 text-sm\">\n                <strong>App Check:</strong> {appCheckInfo}\n              </p>\n            )}\n            <ol className=\"list-inside list-decimal space-y-1 text-sm\">\n              <li>\n                <a\n                  href=\"https://console.firebase.google.com/project/kbe-website/authentication/providers\"\n                  target=\"_blank\"\n                  className=\"text-primary hover:underline\"\n                  rel=\"noopener\"\n                >\n                  Check Google Provider is Enabled\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"https://console.firebase.google.com/project/kbe-website/authentication/settings\"\n                  target=\"_blank\"\n                  className=\"text-primary hover:underline\"\n                  rel=\"noopener\"\n                >\n                  Check Authorized Domains\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"https://console.cloud.google.com/apis/credentials/consent?project=kbe-website\"\n                  target=\"_blank\"\n                  className=\"text-primary hover:underline\"\n                  rel=\"noopener\"\n                >\n                  Check OAuth Consent Screen\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"https://console.firebase.google.com/project/kbe-website/appcheck/apps\"\n                  target=\"_blank\"\n                  className=\"text-primary hover:underline\"\n                  rel=\"noopener\"\n                >\n                  Verify App Check (reCAPTCHA Enterprise) domains include homerenrichment.com and\n                  www\n                </a>\n              </li>\n            </ol>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/auth-diagnostics/page.tsx"},"span":[5736,5737],"sourceCode":"'use client';\n\nimport {\n  getToken as getAppCheckToken,\n  initializeAppCheck,\n  ReCaptchaEnterpriseProvider,\n} from 'firebase/app-check';\nimport {\n  GoogleAuthProvider,\n  getRedirectResult,\n  signInWithPopup,\n  signInWithRedirect,\n} from 'firebase/auth';\nimport { useEffect, useState } from 'react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { app, auth } from '@/lib/firebase';\n\nexport default function AuthDiagnosticsPage() {\n  const [status, setStatus] = useState<string[]>([]);\n  const [error, setError] = useState<string>('');\n  const [appCheckInfo, setAppCheckInfo] = useState<string>('');\n\n  const addStatus = (message: string) => {\n    setStatus((prev) => [...prev, message]);\n  };\n\n  useEffect(() => {\n    // Check for redirect result\n    getRedirectResult(auth)\n      .then((result) => {\n        if (result) {\n          addStatus('✅ Redirect sign-in successful!');\n          addStatus(`User: ${result.user.email}`);\n        }\n      })\n      .catch((error) => {\n        if (error.code !== 'auth/popup-blocked-by-browser') {\n          addStatus(`❌ Redirect error: ${error.message}`);\n        }\n      });\n\n    // Log current environment\n    addStatus(`🌐 Current URL: ${window.location.href}`);\n    addStatus(`🔑 Auth Domain: ${auth.app.options.authDomain}`);\n    addStatus(`📱 Project ID: ${auth.app.options.projectId}`);\n\n    // Try to detect App Check initialization by attempting to get a token\n    try {\n      addStatus('🛡 Attempting to get App Check token...');\n      // Try to initialize App Check if not already initialized\n      let appCheck;\n      try {\n        const siteKey = process.env.NEXT_PUBLIC_RECAPTCHA_ENTERPRISE_SITE_KEY;\n        if (siteKey) {\n          appCheck = initializeAppCheck(app, {\n            provider: new ReCaptchaEnterpriseProvider(siteKey),\n            isTokenAutoRefreshEnabled: true,\n          });\n        }\n      } catch (e) {\n        // App Check might already be initialized\n        addStatus('! App Check may already be initialized');\n      }\n\n      // Attempt to get a token without forcing refresh\n      if (appCheck) {\n        getAppCheckToken(appCheck, false)\n          .then((res) => {\n            if (res?.token) {\n              setAppCheckInfo('App Check token acquired');\n              addStatus('✅ App Check token acquired successfully');\n            } else {\n              setAppCheckInfo('App Check token not available');\n              addStatus('! App Check token not available');\n            }\n          })\n          .catch((e) => {\n            setAppCheckInfo(`App Check token error: ${e?.message || e}`);\n            addStatus(`❌ App Check token error: ${e?.code || ''} ${e?.message || e}`);\n          });\n      }\n    } catch (e: any) {\n      setAppCheckInfo('App Check not initialized');\n      addStatus('❌ App Check not initialized or error accessing it');\n    }\n  }, [addStatus]);\n\n  const testGooglePopup = async () => {\n    try {\n      setError('');\n      addStatus('🔄 Testing Google sign-in with popup...');\n\n      const provider = new GoogleAuthProvider();\n      const result = await signInWithPopup(auth, provider);\n\n      addStatus('✅ Popup sign-in successful!');\n      addStatus(`User: ${result.user.email}`);\n      addStatus(`Provider: ${result.providerId}`);\n    } catch (error: any) {\n      setError(error.message);\n      addStatus(`❌ Popup error: ${error.code}`);\n      addStatus(`Details: ${error.message}`);\n\n      if (error.code === 'auth/popup-blocked-by-browser') {\n        addStatus('💡 Popup was blocked. Trying redirect...');\n        testGoogleRedirect();\n      }\n    }\n  };\n\n  const testGoogleRedirect = async () => {\n    try {\n      setError('');\n      addStatus('🔄 Testing Google sign-in with redirect...');\n\n      const provider = new GoogleAuthProvider();\n      await signInWithRedirect(auth, provider);\n    } catch (error: any) {\n      setError(error.message);\n      addStatus(`❌ Redirect error: ${error.code}`);\n      addStatus(`Details: ${error.message}`);\n    }\n  };\n\n  const checkAuthState = () => {\n    addStatus('🔍 Checking auth state...');\n    addStatus(`Current user: ${auth.currentUser ? auth.currentUser.email : 'None'}`);\n    const hasAuthReady = typeof (auth as any).authStateReady === 'function';\n    addStatus(`Auth ready method: ${hasAuthReady ? 'Available' : 'Unavailable'}`);\n  };\n\n  return (\n    <div className=\"container mx-auto max-w-3xl p-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Firebase Auth Diagnostics</CardTitle>\n          <CardDescription>Comprehensive authentication testing and diagnostics</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n            <Button onClick={testGooglePopup} variant=\"default\">\n              Test Google Popup\n            </Button>\n            <Button onClick={testGoogleRedirect} variant=\"secondary\">\n              Test Google Redirect\n            </Button>\n            <Button onClick={checkAuthState} variant=\"outline\">\n              Check Auth State\n            </Button>\n          </div>\n\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertDescription>\n                <strong>Error:</strong> {error}\n              </AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"space-y-2\">\n            <h3 className=\"font-semibold\">Status Log:</h3>\n            <div className=\"bg-muted h-96 overflow-y-auto rounded-lg p-4\">\n              {status.map((s, i) => (\n                <div key={i} className=\"py-1 font-mono text-sm\">\n                  {s}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <Alert>\n            <AlertDescription>\n              <strong>Common Issues:</strong>\n              <ul className=\"mt-2 list-inside list-disc space-y-1\">\n                <li>OAuth consent screen not configured</li>\n                <li>Domain not in authorized domains list</li>\n                <li>Google provider not enabled in Firebase</li>\n                <li>API restrictions blocking auth</li>\n              </ul>\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"bg-muted rounded-lg p-4\">\n            <h4 className=\"mb-2 font-semibold\">Required Firebase Console Checks:</h4>\n            {appCheckInfo && (\n              <p className=\"mb-2 text-sm\">\n                <strong>App Check:</strong> {appCheckInfo}\n              </p>\n            )}\n            <ol className=\"list-inside list-decimal space-y-1 text-sm\">\n              <li>\n                <a\n                  href=\"https://console.firebase.google.com/project/kbe-website/authentication/providers\"\n                  target=\"_blank\"\n                  className=\"text-primary hover:underline\"\n                  rel=\"noopener\"\n                >\n                  Check Google Provider is Enabled\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"https://console.firebase.google.com/project/kbe-website/authentication/settings\"\n                  target=\"_blank\"\n                  className=\"text-primary hover:underline\"\n                  rel=\"noopener\"\n                >\n                  Check Authorized Domains\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"https://console.cloud.google.com/apis/credentials/consent?project=kbe-website\"\n                  target=\"_blank\"\n                  className=\"text-primary hover:underline\"\n                  rel=\"noopener\"\n                >\n                  Check OAuth Consent Screen\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"https://console.firebase.google.com/project/kbe-website/appcheck/apps\"\n                  target=\"_blank\"\n                  className=\"text-primary hover:underline\"\n                  rel=\"noopener\"\n                >\n                  Verify App Check (reCAPTCHA Enterprise) domains include homerenrichment.com and\n                  www\n                </a>\n              </li>\n            </ol>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"warning","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[2537,2542],"sourceCode":"'use client';\n\nimport { AlertCircle, CheckCircle2, XCircle } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function AuthStatusPage() {\n  const [checks, setChecks] = useState<any[]>([]);\n\n  useEffect(() => {\n    const performChecks = async () => {\n      const statusChecks = [];\n\n      // Check current domain\n      statusChecks.push({\n        name: 'Current Domain',\n        status: 'success',\n        value: window.location.hostname,\n        expected: [\n          'homerenrichment.com',\n          'kbe-website--kbe-website.us-central1.hosted.app',\n          'localhost',\n        ],\n      });\n\n      // Check Firebase config\n      const config = {\n        apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n        authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n        projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n      };\n\n      statusChecks.push({\n        name: 'Firebase Config',\n        status: config.apiKey ? 'success' : 'error',\n        value: config.projectId || 'Not configured',\n        expected: 'kbe-website',\n      });\n\n      // Check auth domain\n      statusChecks.push({\n        name: 'Auth Domain',\n        status: config.authDomain === 'kbe-website.firebaseapp.com' ? 'success' : 'warning',\n        value: config.authDomain || 'Not set',\n        expected: 'kbe-website.firebaseapp.com',\n      });\n\n      // Check API key format\n      statusChecks.push({\n        name: 'API Key',\n        status: config.apiKey?.startsWith('AIza') ? 'success' : 'error',\n        value: config.apiKey ? '✓ Configured' : '✗ Missing',\n        expected: 'AIzaSy...',\n      });\n\n      setChecks(statusChecks);\n    };\n\n    performChecks();\n  }, []);\n\n  const getIcon = (status: string) => {\n    switch (status) {\n      case 'success':\n        return <CheckCircle2 className=\"h-5 w-5 text-green-500\" />;\n      case 'error':\n        return <XCircle className=\"h-5 w-5 text-red-500\" />;\n      case 'warning':\n        return <AlertCircle className=\"h-5 w-5 text-yellow-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto max-w-2xl p-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Authentication Status Check</CardTitle>\n          <CardDescription>Verifying your authentication configuration</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {checks.map((check, index) => (\n              <div key={index} className=\"flex items-center justify-between rounded-lg border p-3\">\n                <div className=\"flex items-center gap-3\">\n                  {getIcon(check.status)}\n                  <div>\n                    <div className=\"font-medium\">{check.name}</div>\n                    <div className=\"text-muted-foreground text-sm\">\n                      Expected:{' '}\n                      {Array.isArray(check.expected) ? check.expected.join(' or ') : check.expected}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"font-mono text-sm\">{check.value}</div>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"bg-muted mt-6 rounded-lg p-4\">\n            <h3 className=\"mb-2 font-semibold\">OAuth Configuration Updated ✓</h3>\n            <p className=\"text-muted-foreground mb-2 text-sm\">You've successfully updated:</p>\n            <ul className=\"list-inside list-disc space-y-1 text-sm\">\n              <li>Added authorized domains</li>\n              <li>Set developer contact email</li>\n              <li>OAuth consent screen is in production</li>\n            </ul>\n            <p className=\"text-muted-foreground mt-3 text-sm\">\n              Google Sign-in should now be working. If not, wait a few more minutes for propagation.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/auth-status/page.tsx"},"span":[2573,2578],"sourceCode":"'use client';\n\nimport { AlertCircle, CheckCircle2, XCircle } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function AuthStatusPage() {\n  const [checks, setChecks] = useState<any[]>([]);\n\n  useEffect(() => {\n    const performChecks = async () => {\n      const statusChecks = [];\n\n      // Check current domain\n      statusChecks.push({\n        name: 'Current Domain',\n        status: 'success',\n        value: window.location.hostname,\n        expected: [\n          'homerenrichment.com',\n          'kbe-website--kbe-website.us-central1.hosted.app',\n          'localhost',\n        ],\n      });\n\n      // Check Firebase config\n      const config = {\n        apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n        authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n        projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n      };\n\n      statusChecks.push({\n        name: 'Firebase Config',\n        status: config.apiKey ? 'success' : 'error',\n        value: config.projectId || 'Not configured',\n        expected: 'kbe-website',\n      });\n\n      // Check auth domain\n      statusChecks.push({\n        name: 'Auth Domain',\n        status: config.authDomain === 'kbe-website.firebaseapp.com' ? 'success' : 'warning',\n        value: config.authDomain || 'Not set',\n        expected: 'kbe-website.firebaseapp.com',\n      });\n\n      // Check API key format\n      statusChecks.push({\n        name: 'API Key',\n        status: config.apiKey?.startsWith('AIza') ? 'success' : 'error',\n        value: config.apiKey ? '✓ Configured' : '✗ Missing',\n        expected: 'AIzaSy...',\n      });\n\n      setChecks(statusChecks);\n    };\n\n    performChecks();\n  }, []);\n\n  const getIcon = (status: string) => {\n    switch (status) {\n      case 'success':\n        return <CheckCircle2 className=\"h-5 w-5 text-green-500\" />;\n      case 'error':\n        return <XCircle className=\"h-5 w-5 text-red-500\" />;\n      case 'warning':\n        return <AlertCircle className=\"h-5 w-5 text-yellow-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto max-w-2xl p-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Authentication Status Check</CardTitle>\n          <CardDescription>Verifying your authentication configuration</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {checks.map((check, index) => (\n              <div key={index} className=\"flex items-center justify-between rounded-lg border p-3\">\n                <div className=\"flex items-center gap-3\">\n                  {getIcon(check.status)}\n                  <div>\n                    <div className=\"font-medium\">{check.name}</div>\n                    <div className=\"text-muted-foreground text-sm\">\n                      Expected:{' '}\n                      {Array.isArray(check.expected) ? check.expected.join(' or ') : check.expected}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"font-mono text-sm\">{check.value}</div>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"bg-muted mt-6 rounded-lg p-4\">\n            <h3 className=\"mb-2 font-semibold\">OAuth Configuration Updated ✓</h3>\n            <p className=\"text-muted-foreground mb-2 text-sm\">You've successfully updated:</p>\n            <ul className=\"list-inside list-disc space-y-1 text-sm\">\n              <li>Added authorized domains</li>\n              <li>Set developer contact email</li>\n              <li>OAuth consent screen is in production</li>\n            </ul>\n            <p className=\"text-muted-foreground mt-3 text-sm\">\n              Google Sign-in should now be working. If not, wait a few more minutes for propagation.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/a11y/noStaticElementInteractions","severity":"warning","description":"Static Elements should not be interactive.","message":[{"elements":[],"content":"Static Elements should not be interactive."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"To add interactivity such as a mouse or key event listener to a static element, give the element an appropriate role value."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/calendar/page.tsx"},"span":[8863,9339],"sourceCode":"'use client';\n\nimport { addMonths } from 'date-fns/addMonths';\nimport { eachDayOfInterval } from 'date-fns/eachDayOfInterval';\nimport { endOfMonth } from 'date-fns/endOfMonth';\nimport { endOfWeek } from 'date-fns/endOfWeek';\n// Optimize date-fns imports by importing only what we need\nimport { format } from 'date-fns/format';\nimport { isSameDay } from 'date-fns/isSameDay';\nimport { isSameMonth } from 'date-fns/isSameMonth';\nimport { isToday } from 'date-fns/isToday';\nimport { startOfMonth } from 'date-fns/startOfMonth';\nimport { startOfWeek } from 'date-fns/startOfWeek';\nimport { subMonths } from 'date-fns/subMonths';\nimport {\n  ArrowLeft,\n  Calendar as CalendarIcon,\n  ChevronLeft,\n  ChevronRight,\n  Clock,\n  Coffee,\n  MapPin,\n  MoreVertical,\n  Palmtree,\n  Plus,\n  Trophy,\n  Users,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { useSearchParams } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { LazyEventDialog } from '@/components/lazy';\nimport { CalendarSkeleton } from '@/components/loading/calendar-skeleton';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { AdminProvider, useAdmin } from '@/hooks/use-admin';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { type CalendarEvent, calendarService } from '@/lib/firebase-admin';\nimport { cn } from '@/lib/utils';\n\nconst eventTypeConfig = {\n  class: { icon: Users, color: 'bg-blue-500', label: 'Class' },\n  competition: { icon: Trophy, color: 'bg-purple-500', label: 'Competition' },\n  meeting: { icon: Coffee, color: 'bg-green-500', label: 'Meeting' },\n  holiday: { icon: Palmtree, color: 'bg-orange-500', label: 'Holiday' },\n  other: { icon: CalendarIcon, color: 'bg-gray-500', label: 'Other' },\n};\n\nfunction CalendarPageContent() {\n  const searchParams = useSearchParams();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n  const [events, setEvents] = useState<CalendarEvent[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [view, setView] = useState<'month' | 'week' | 'day'>('month');\n  const [eventDialogOpen, setEventDialogOpen] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);\n  const { user } = useAuth();\n  const { isAdmin } = useAdmin();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadEvents();\n  }, [loadEvents]);\n\n  useEffect(() => {\n    // Handle navigation from upcoming events\n    const eventDate = searchParams.get('date');\n    const eventId = searchParams.get('eventId');\n\n    if (eventDate) {\n      const date = new Date(eventDate);\n      setCurrentDate(date);\n      setSelectedDate(date);\n\n      // Scroll to selected date section after render\n      setTimeout(() => {\n        const selectedDateElement = document.getElementById('selected-date-events');\n        if (selectedDateElement) {\n          selectedDateElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n      }, 500);\n    }\n  }, [searchParams]);\n\n  async function loadEvents() {\n    try {\n      const start = startOfMonth(currentDate);\n      const end = endOfMonth(currentDate);\n      const data = await calendarService.getEvents(start, end);\n      setEvents(data);\n    } catch (error) {\n      console.error('Error loading events:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n  const calendarStart = startOfWeek(monthStart);\n  const calendarEnd = endOfWeek(monthEnd);\n  const calendarDays = eachDayOfInterval({ start: calendarStart, end: calendarEnd });\n\n  const previousMonth = () => setCurrentDate(subMonths(currentDate, 1));\n  const nextMonth = () => setCurrentDate(addMonths(currentDate, 1));\n  const goToToday = () => setCurrentDate(new Date());\n\n  const getEventsForDay = (day: Date) => {\n    return events.filter((event) => {\n      const eventDate = new Date(event.startDate);\n      return isSameDay(eventDate, day);\n    });\n  };\n\n  const handleAddEvent = () => {\n    setSelectedEvent(null);\n    setEventDialogOpen(true);\n  };\n\n  const handleEditEvent = (event: CalendarEvent) => {\n    setSelectedEvent(event);\n    setEventDialogOpen(true);\n  };\n\n  const handleDeleteEvent = async (eventId: string) => {\n    if (!user || !window.confirm('Are you sure you want to delete this event?')) return;\n\n    try {\n      await calendarService.delete(eventId, user.uid, user.displayName || user.email || 'Unknown');\n      toast({\n        title: 'Event deleted',\n        description: 'The event has been removed from the calendar.',\n      });\n      loadEvents();\n    } catch (error) {\n      console.error('Error deleting event:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to delete event. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto max-w-7xl space-y-6 px-4 py-6\">\n        <Skeleton className=\"h-10 w-64\" />\n        <CalendarSkeleton />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-7xl space-y-4 p-4 sm:space-y-6 sm:p-6\">\n      <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <div className=\"mb-2 flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"sm\" asChild className=\"sm:hidden\">\n              <Link href=\"/dashboard\">\n                <ArrowLeft className=\"h-4 w-4\" />\n              </Link>\n            </Button>\n            <h1 className=\"text-2xl font-bold sm:text-3xl\">Calendar</h1>\n          </div>\n          <p className=\"text-muted-foreground text-sm sm:text-base\">\n            View upcoming classes, competitions, and events\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"ghost\" asChild className=\"hidden sm:inline-flex\">\n            <Link href=\"/dashboard\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back\n            </Link>\n          </Button>\n          {isAdmin && (\n            <Button onClick={handleAddEvent} size=\"sm\" className=\"sm:size-default\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Add Event</span>\n              <span className=\"sm:hidden\">Add</span>\n            </Button>\n          )}\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader className=\"pb-3 sm:pb-6\">\n          <div className=\"flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between\">\n            <CardTitle className=\"text-xl sm:text-2xl\">\n              {format(currentDate, 'MMMM yyyy')}\n            </CardTitle>\n            <div className=\"flex items-center gap-1 sm:gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={goToToday}\n                className=\"text-xs sm:text-sm\"\n              >\n                Today\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={previousMonth}\n                className=\"h-8 w-8 sm:h-9 sm:w-9\"\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={nextMonth}\n                className=\"h-8 w-8 sm:h-9 sm:w-9\"\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {/* Calendar Grid */}\n          <div className=\"bg-muted grid grid-cols-7 gap-px overflow-hidden rounded-lg\">\n            {/* Day Headers */}\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\n              <div\n                key={day}\n                className=\"bg-background text-muted-foreground p-1 text-center text-xs font-medium sm:p-2 sm:text-sm\"\n              >\n                <span className=\"sm:hidden\">{day.slice(0, 1)}</span>\n                <span className=\"hidden sm:inline\">{day}</span>\n              </div>\n            ))}\n\n            {/* Calendar Days */}\n            {calendarDays.map((day, index) => {\n              const dayEvents = getEventsForDay(day);\n              const isCurrentMonth = isSameMonth(day, currentDate);\n              const isSelectedDay = selectedDate && isSameDay(day, selectedDate);\n              const isTodayDate = isToday(day);\n\n              return (\n                <div\n                  key={index}\n                  onClick={() => setSelectedDate(day)}\n                  className={cn(\n                    'bg-background hover:bg-muted/50 min-h-[60px] cursor-pointer p-1 transition-colors sm:min-h-[100px] sm:p-2',\n                    !isCurrentMonth && 'text-muted-foreground bg-muted/30',\n                    isSelectedDay && 'ring-primary ring-2',\n                    isTodayDate && 'bg-primary/5'\n                  )}\n                >\n                  <div className=\"mb-1 flex items-start justify-between\">\n                    <span\n                      className={cn(\n                        'text-xs font-medium sm:text-sm',\n                        isTodayDate &&\n                          'bg-primary text-primary-foreground flex h-5 w-5 items-center justify-center rounded-full text-[10px] sm:h-7 sm:w-7 sm:text-xs'\n                      )}\n                    >\n                      {format(day, 'd')}\n                    </span>\n                  </div>\n\n                  {/* Event Dots - Mobile */}\n                  <div className=\"sm:hidden\">\n                    {dayEvents.length > 0 && (\n                      <div className=\"flex gap-0.5\">\n                        {dayEvents.slice(0, 3).map((event, idx) => {\n                          const config = eventTypeConfig[event.type];\n                          return (\n                            <div\n                              key={idx}\n                              className={cn('h-1.5 w-1.5 rounded-full', config.color)}\n                            />\n                          );\n                        })}\n                        {dayEvents.length > 3 && (\n                          <span className=\"text-muted-foreground ml-0.5 text-[8px]\">\n                            +{dayEvents.length - 3}\n                          </span>\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Event List - Desktop */}\n                  <div className=\"hidden space-y-1 sm:block\">\n                    {dayEvents.slice(0, 3).map((event, eventIndex) => {\n                      const config = eventTypeConfig[event.type];\n                      return (\n                        <div key={eventIndex} className=\"flex items-center gap-1\">\n                          <div className={cn('h-2 w-2 flex-shrink-0 rounded-full', config.color)} />\n                          <span className=\"truncate text-xs\">{event.title}</span>\n                        </div>\n                      );\n                    })}\n                    {dayEvents.length > 3 && (\n                      <span className=\"text-muted-foreground text-xs\">\n                        +{dayEvents.length - 3} more\n                      </span>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Selected Day Events */}\n      {selectedDate && (\n        <Card id=\"selected-date-events\">\n          <CardHeader>\n            <CardTitle>Events on {format(selectedDate, 'MMMM d, yyyy')}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {getEventsForDay(selectedDate).length === 0 ? (\n              <p className=\"text-muted-foreground py-8 text-center\">\n                No events scheduled for this day\n              </p>\n            ) : (\n              <div className=\"space-y-4\">\n                {getEventsForDay(selectedDate).map((event) => {\n                  const config = eventTypeConfig[event.type];\n                  const Icon = config.icon;\n\n                  return (\n                    <div key={event.id} className=\"flex items-start gap-4 rounded-lg border p-4\">\n                      <div className={cn('rounded-lg p-2', config.color, 'bg-opacity-20')}>\n                        <Icon className={cn('h-5 w-5', config.color.replace('bg-', 'text-'))} />\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h3 className=\"font-semibold\">{event.title}</h3>\n                            <div className=\"text-muted-foreground mt-1 flex items-center gap-4 text-sm\">\n                              {!event.allDay && (\n                                <span className=\"flex items-center gap-1\">\n                                  <Clock className=\"h-3 w-3\" />\n                                  {format(new Date(event.startDate), 'h:mm a')}\n                                  {event.endDate &&\n                                    ` - ${format(new Date(event.endDate), 'h:mm a')}`}\n                                </span>\n                              )}\n                              {event.location && (\n                                <span className=\"flex items-center gap-1\">\n                                  <MapPin className=\"h-3 w-3\" />\n                                  {event.location}\n                                </span>\n                              )}\n                            </div>\n                            {event.description && (\n                              <p className=\"text-muted-foreground mt-2 text-sm\">\n                                {event.description}\n                              </p>\n                            )}\n                          </div>\n                          {isAdmin && (\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\">\n                                  <MoreVertical className=\"h-4 w-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem onClick={() => handleEditEvent(event)}>\n                                  Edit\n                                </DropdownMenuItem>\n                                <DropdownMenuItem\n                                  className=\"text-destructive\"\n                                  onClick={() => handleDeleteEvent(event.id)}\n                                >\n                                  Delete\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Event Type Legend */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Event Types</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-4\">\n            {Object.entries(eventTypeConfig).map(([type, config]) => {\n              const Icon = config.icon;\n              return (\n                <div key={type} className=\"flex items-center gap-2\">\n                  <div className={cn('h-4 w-4 rounded-full', config.color)} />\n                  <span className=\"text-sm\">{config.label}</span>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Event Dialog - Only load when needed */}\n      {eventDialogOpen && (\n        <LazyEventDialog\n          open={eventDialogOpen}\n          onOpenChange={setEventDialogOpen}\n          event={selectedEvent}\n          initialDate={selectedDate || undefined}\n          onSuccess={loadEvents}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default function CalendarPage() {\n  return (\n    <AdminProvider>\n      <CalendarPageContent />\n    </AdminProvider>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/a11y/useKeyWithClickEvents","severity":"warning","description":"Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.","message":[{"elements":[],"content":"Enforce to have the "},{"elements":["Emphasis"],"content":"onClick"},{"elements":[],"content":" mouse event with the "},{"elements":["Emphasis"],"content":"onKeyUp"},{"elements":[],"content":", the "},{"elements":["Emphasis"],"content":"onKeyDown"},{"elements":[],"content":", or the "},{"elements":["Emphasis"],"content":"onKeyPress"},{"elements":[],"content":" keyboard event."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/calendar/page.tsx"},"span":[8863,9339],"sourceCode":"'use client';\n\nimport { addMonths } from 'date-fns/addMonths';\nimport { eachDayOfInterval } from 'date-fns/eachDayOfInterval';\nimport { endOfMonth } from 'date-fns/endOfMonth';\nimport { endOfWeek } from 'date-fns/endOfWeek';\n// Optimize date-fns imports by importing only what we need\nimport { format } from 'date-fns/format';\nimport { isSameDay } from 'date-fns/isSameDay';\nimport { isSameMonth } from 'date-fns/isSameMonth';\nimport { isToday } from 'date-fns/isToday';\nimport { startOfMonth } from 'date-fns/startOfMonth';\nimport { startOfWeek } from 'date-fns/startOfWeek';\nimport { subMonths } from 'date-fns/subMonths';\nimport {\n  ArrowLeft,\n  Calendar as CalendarIcon,\n  ChevronLeft,\n  ChevronRight,\n  Clock,\n  Coffee,\n  MapPin,\n  MoreVertical,\n  Palmtree,\n  Plus,\n  Trophy,\n  Users,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { useSearchParams } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { LazyEventDialog } from '@/components/lazy';\nimport { CalendarSkeleton } from '@/components/loading/calendar-skeleton';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { AdminProvider, useAdmin } from '@/hooks/use-admin';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { type CalendarEvent, calendarService } from '@/lib/firebase-admin';\nimport { cn } from '@/lib/utils';\n\nconst eventTypeConfig = {\n  class: { icon: Users, color: 'bg-blue-500', label: 'Class' },\n  competition: { icon: Trophy, color: 'bg-purple-500', label: 'Competition' },\n  meeting: { icon: Coffee, color: 'bg-green-500', label: 'Meeting' },\n  holiday: { icon: Palmtree, color: 'bg-orange-500', label: 'Holiday' },\n  other: { icon: CalendarIcon, color: 'bg-gray-500', label: 'Other' },\n};\n\nfunction CalendarPageContent() {\n  const searchParams = useSearchParams();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n  const [events, setEvents] = useState<CalendarEvent[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [view, setView] = useState<'month' | 'week' | 'day'>('month');\n  const [eventDialogOpen, setEventDialogOpen] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);\n  const { user } = useAuth();\n  const { isAdmin } = useAdmin();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadEvents();\n  }, [loadEvents]);\n\n  useEffect(() => {\n    // Handle navigation from upcoming events\n    const eventDate = searchParams.get('date');\n    const eventId = searchParams.get('eventId');\n\n    if (eventDate) {\n      const date = new Date(eventDate);\n      setCurrentDate(date);\n      setSelectedDate(date);\n\n      // Scroll to selected date section after render\n      setTimeout(() => {\n        const selectedDateElement = document.getElementById('selected-date-events');\n        if (selectedDateElement) {\n          selectedDateElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n      }, 500);\n    }\n  }, [searchParams]);\n\n  async function loadEvents() {\n    try {\n      const start = startOfMonth(currentDate);\n      const end = endOfMonth(currentDate);\n      const data = await calendarService.getEvents(start, end);\n      setEvents(data);\n    } catch (error) {\n      console.error('Error loading events:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n  const calendarStart = startOfWeek(monthStart);\n  const calendarEnd = endOfWeek(monthEnd);\n  const calendarDays = eachDayOfInterval({ start: calendarStart, end: calendarEnd });\n\n  const previousMonth = () => setCurrentDate(subMonths(currentDate, 1));\n  const nextMonth = () => setCurrentDate(addMonths(currentDate, 1));\n  const goToToday = () => setCurrentDate(new Date());\n\n  const getEventsForDay = (day: Date) => {\n    return events.filter((event) => {\n      const eventDate = new Date(event.startDate);\n      return isSameDay(eventDate, day);\n    });\n  };\n\n  const handleAddEvent = () => {\n    setSelectedEvent(null);\n    setEventDialogOpen(true);\n  };\n\n  const handleEditEvent = (event: CalendarEvent) => {\n    setSelectedEvent(event);\n    setEventDialogOpen(true);\n  };\n\n  const handleDeleteEvent = async (eventId: string) => {\n    if (!user || !window.confirm('Are you sure you want to delete this event?')) return;\n\n    try {\n      await calendarService.delete(eventId, user.uid, user.displayName || user.email || 'Unknown');\n      toast({\n        title: 'Event deleted',\n        description: 'The event has been removed from the calendar.',\n      });\n      loadEvents();\n    } catch (error) {\n      console.error('Error deleting event:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to delete event. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto max-w-7xl space-y-6 px-4 py-6\">\n        <Skeleton className=\"h-10 w-64\" />\n        <CalendarSkeleton />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-7xl space-y-4 p-4 sm:space-y-6 sm:p-6\">\n      <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <div className=\"mb-2 flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"sm\" asChild className=\"sm:hidden\">\n              <Link href=\"/dashboard\">\n                <ArrowLeft className=\"h-4 w-4\" />\n              </Link>\n            </Button>\n            <h1 className=\"text-2xl font-bold sm:text-3xl\">Calendar</h1>\n          </div>\n          <p className=\"text-muted-foreground text-sm sm:text-base\">\n            View upcoming classes, competitions, and events\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"ghost\" asChild className=\"hidden sm:inline-flex\">\n            <Link href=\"/dashboard\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back\n            </Link>\n          </Button>\n          {isAdmin && (\n            <Button onClick={handleAddEvent} size=\"sm\" className=\"sm:size-default\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Add Event</span>\n              <span className=\"sm:hidden\">Add</span>\n            </Button>\n          )}\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader className=\"pb-3 sm:pb-6\">\n          <div className=\"flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between\">\n            <CardTitle className=\"text-xl sm:text-2xl\">\n              {format(currentDate, 'MMMM yyyy')}\n            </CardTitle>\n            <div className=\"flex items-center gap-1 sm:gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={goToToday}\n                className=\"text-xs sm:text-sm\"\n              >\n                Today\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={previousMonth}\n                className=\"h-8 w-8 sm:h-9 sm:w-9\"\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={nextMonth}\n                className=\"h-8 w-8 sm:h-9 sm:w-9\"\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {/* Calendar Grid */}\n          <div className=\"bg-muted grid grid-cols-7 gap-px overflow-hidden rounded-lg\">\n            {/* Day Headers */}\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\n              <div\n                key={day}\n                className=\"bg-background text-muted-foreground p-1 text-center text-xs font-medium sm:p-2 sm:text-sm\"\n              >\n                <span className=\"sm:hidden\">{day.slice(0, 1)}</span>\n                <span className=\"hidden sm:inline\">{day}</span>\n              </div>\n            ))}\n\n            {/* Calendar Days */}\n            {calendarDays.map((day, index) => {\n              const dayEvents = getEventsForDay(day);\n              const isCurrentMonth = isSameMonth(day, currentDate);\n              const isSelectedDay = selectedDate && isSameDay(day, selectedDate);\n              const isTodayDate = isToday(day);\n\n              return (\n                <div\n                  key={index}\n                  onClick={() => setSelectedDate(day)}\n                  className={cn(\n                    'bg-background hover:bg-muted/50 min-h-[60px] cursor-pointer p-1 transition-colors sm:min-h-[100px] sm:p-2',\n                    !isCurrentMonth && 'text-muted-foreground bg-muted/30',\n                    isSelectedDay && 'ring-primary ring-2',\n                    isTodayDate && 'bg-primary/5'\n                  )}\n                >\n                  <div className=\"mb-1 flex items-start justify-between\">\n                    <span\n                      className={cn(\n                        'text-xs font-medium sm:text-sm',\n                        isTodayDate &&\n                          'bg-primary text-primary-foreground flex h-5 w-5 items-center justify-center rounded-full text-[10px] sm:h-7 sm:w-7 sm:text-xs'\n                      )}\n                    >\n                      {format(day, 'd')}\n                    </span>\n                  </div>\n\n                  {/* Event Dots - Mobile */}\n                  <div className=\"sm:hidden\">\n                    {dayEvents.length > 0 && (\n                      <div className=\"flex gap-0.5\">\n                        {dayEvents.slice(0, 3).map((event, idx) => {\n                          const config = eventTypeConfig[event.type];\n                          return (\n                            <div\n                              key={idx}\n                              className={cn('h-1.5 w-1.5 rounded-full', config.color)}\n                            />\n                          );\n                        })}\n                        {dayEvents.length > 3 && (\n                          <span className=\"text-muted-foreground ml-0.5 text-[8px]\">\n                            +{dayEvents.length - 3}\n                          </span>\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Event List - Desktop */}\n                  <div className=\"hidden space-y-1 sm:block\">\n                    {dayEvents.slice(0, 3).map((event, eventIndex) => {\n                      const config = eventTypeConfig[event.type];\n                      return (\n                        <div key={eventIndex} className=\"flex items-center gap-1\">\n                          <div className={cn('h-2 w-2 flex-shrink-0 rounded-full', config.color)} />\n                          <span className=\"truncate text-xs\">{event.title}</span>\n                        </div>\n                      );\n                    })}\n                    {dayEvents.length > 3 && (\n                      <span className=\"text-muted-foreground text-xs\">\n                        +{dayEvents.length - 3} more\n                      </span>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Selected Day Events */}\n      {selectedDate && (\n        <Card id=\"selected-date-events\">\n          <CardHeader>\n            <CardTitle>Events on {format(selectedDate, 'MMMM d, yyyy')}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {getEventsForDay(selectedDate).length === 0 ? (\n              <p className=\"text-muted-foreground py-8 text-center\">\n                No events scheduled for this day\n              </p>\n            ) : (\n              <div className=\"space-y-4\">\n                {getEventsForDay(selectedDate).map((event) => {\n                  const config = eventTypeConfig[event.type];\n                  const Icon = config.icon;\n\n                  return (\n                    <div key={event.id} className=\"flex items-start gap-4 rounded-lg border p-4\">\n                      <div className={cn('rounded-lg p-2', config.color, 'bg-opacity-20')}>\n                        <Icon className={cn('h-5 w-5', config.color.replace('bg-', 'text-'))} />\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h3 className=\"font-semibold\">{event.title}</h3>\n                            <div className=\"text-muted-foreground mt-1 flex items-center gap-4 text-sm\">\n                              {!event.allDay && (\n                                <span className=\"flex items-center gap-1\">\n                                  <Clock className=\"h-3 w-3\" />\n                                  {format(new Date(event.startDate), 'h:mm a')}\n                                  {event.endDate &&\n                                    ` - ${format(new Date(event.endDate), 'h:mm a')}`}\n                                </span>\n                              )}\n                              {event.location && (\n                                <span className=\"flex items-center gap-1\">\n                                  <MapPin className=\"h-3 w-3\" />\n                                  {event.location}\n                                </span>\n                              )}\n                            </div>\n                            {event.description && (\n                              <p className=\"text-muted-foreground mt-2 text-sm\">\n                                {event.description}\n                              </p>\n                            )}\n                          </div>\n                          {isAdmin && (\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\">\n                                  <MoreVertical className=\"h-4 w-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem onClick={() => handleEditEvent(event)}>\n                                  Edit\n                                </DropdownMenuItem>\n                                <DropdownMenuItem\n                                  className=\"text-destructive\"\n                                  onClick={() => handleDeleteEvent(event.id)}\n                                >\n                                  Delete\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Event Type Legend */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Event Types</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-4\">\n            {Object.entries(eventTypeConfig).map(([type, config]) => {\n              const Icon = config.icon;\n              return (\n                <div key={type} className=\"flex items-center gap-2\">\n                  <div className={cn('h-4 w-4 rounded-full', config.color)} />\n                  <span className=\"text-sm\">{config.label}</span>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Event Dialog - Only load when needed */}\n      {eventDialogOpen && (\n        <LazyEventDialog\n          open={eventDialogOpen}\n          onOpenChange={setEventDialogOpen}\n          event={selectedEvent}\n          initialDate={selectedDate || undefined}\n          onSuccess={loadEvents}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default function CalendarPage() {\n  return (\n    <AdminProvider>\n      <CalendarPageContent />\n    </AdminProvider>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useExhaustiveDependencies","severity":"warning","description":"loadEvents changes on every re-render and should not be used as a hook dependency.","message":[{"elements":["Emphasis"],"content":"loadEvents"},{"elements":[],"content":" changes on every re-render and should not be used as a hook dependency."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"To fix this, wrap the definition of "},{"elements":["Emphasis"],"content":"loadEvents"},{"elements":[],"content":" in its own "},{"elements":["Emphasis"],"content":"useCallback()"},{"elements":[],"content":" hook."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/calendar/page.tsx"},"span":[2706,2716],"sourceCode":"'use client';\n\nimport { addMonths } from 'date-fns/addMonths';\nimport { eachDayOfInterval } from 'date-fns/eachDayOfInterval';\nimport { endOfMonth } from 'date-fns/endOfMonth';\nimport { endOfWeek } from 'date-fns/endOfWeek';\n// Optimize date-fns imports by importing only what we need\nimport { format } from 'date-fns/format';\nimport { isSameDay } from 'date-fns/isSameDay';\nimport { isSameMonth } from 'date-fns/isSameMonth';\nimport { isToday } from 'date-fns/isToday';\nimport { startOfMonth } from 'date-fns/startOfMonth';\nimport { startOfWeek } from 'date-fns/startOfWeek';\nimport { subMonths } from 'date-fns/subMonths';\nimport {\n  ArrowLeft,\n  Calendar as CalendarIcon,\n  ChevronLeft,\n  ChevronRight,\n  Clock,\n  Coffee,\n  MapPin,\n  MoreVertical,\n  Palmtree,\n  Plus,\n  Trophy,\n  Users,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { useSearchParams } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { LazyEventDialog } from '@/components/lazy';\nimport { CalendarSkeleton } from '@/components/loading/calendar-skeleton';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { AdminProvider, useAdmin } from '@/hooks/use-admin';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { type CalendarEvent, calendarService } from '@/lib/firebase-admin';\nimport { cn } from '@/lib/utils';\n\nconst eventTypeConfig = {\n  class: { icon: Users, color: 'bg-blue-500', label: 'Class' },\n  competition: { icon: Trophy, color: 'bg-purple-500', label: 'Competition' },\n  meeting: { icon: Coffee, color: 'bg-green-500', label: 'Meeting' },\n  holiday: { icon: Palmtree, color: 'bg-orange-500', label: 'Holiday' },\n  other: { icon: CalendarIcon, color: 'bg-gray-500', label: 'Other' },\n};\n\nfunction CalendarPageContent() {\n  const searchParams = useSearchParams();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n  const [events, setEvents] = useState<CalendarEvent[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [view, setView] = useState<'month' | 'week' | 'day'>('month');\n  const [eventDialogOpen, setEventDialogOpen] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);\n  const { user } = useAuth();\n  const { isAdmin } = useAdmin();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadEvents();\n  }, [loadEvents]);\n\n  useEffect(() => {\n    // Handle navigation from upcoming events\n    const eventDate = searchParams.get('date');\n    const eventId = searchParams.get('eventId');\n\n    if (eventDate) {\n      const date = new Date(eventDate);\n      setCurrentDate(date);\n      setSelectedDate(date);\n\n      // Scroll to selected date section after render\n      setTimeout(() => {\n        const selectedDateElement = document.getElementById('selected-date-events');\n        if (selectedDateElement) {\n          selectedDateElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n      }, 500);\n    }\n  }, [searchParams]);\n\n  async function loadEvents() {\n    try {\n      const start = startOfMonth(currentDate);\n      const end = endOfMonth(currentDate);\n      const data = await calendarService.getEvents(start, end);\n      setEvents(data);\n    } catch (error) {\n      console.error('Error loading events:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n  const calendarStart = startOfWeek(monthStart);\n  const calendarEnd = endOfWeek(monthEnd);\n  const calendarDays = eachDayOfInterval({ start: calendarStart, end: calendarEnd });\n\n  const previousMonth = () => setCurrentDate(subMonths(currentDate, 1));\n  const nextMonth = () => setCurrentDate(addMonths(currentDate, 1));\n  const goToToday = () => setCurrentDate(new Date());\n\n  const getEventsForDay = (day: Date) => {\n    return events.filter((event) => {\n      const eventDate = new Date(event.startDate);\n      return isSameDay(eventDate, day);\n    });\n  };\n\n  const handleAddEvent = () => {\n    setSelectedEvent(null);\n    setEventDialogOpen(true);\n  };\n\n  const handleEditEvent = (event: CalendarEvent) => {\n    setSelectedEvent(event);\n    setEventDialogOpen(true);\n  };\n\n  const handleDeleteEvent = async (eventId: string) => {\n    if (!user || !window.confirm('Are you sure you want to delete this event?')) return;\n\n    try {\n      await calendarService.delete(eventId, user.uid, user.displayName || user.email || 'Unknown');\n      toast({\n        title: 'Event deleted',\n        description: 'The event has been removed from the calendar.',\n      });\n      loadEvents();\n    } catch (error) {\n      console.error('Error deleting event:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to delete event. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto max-w-7xl space-y-6 px-4 py-6\">\n        <Skeleton className=\"h-10 w-64\" />\n        <CalendarSkeleton />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-7xl space-y-4 p-4 sm:space-y-6 sm:p-6\">\n      <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <div className=\"mb-2 flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"sm\" asChild className=\"sm:hidden\">\n              <Link href=\"/dashboard\">\n                <ArrowLeft className=\"h-4 w-4\" />\n              </Link>\n            </Button>\n            <h1 className=\"text-2xl font-bold sm:text-3xl\">Calendar</h1>\n          </div>\n          <p className=\"text-muted-foreground text-sm sm:text-base\">\n            View upcoming classes, competitions, and events\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"ghost\" asChild className=\"hidden sm:inline-flex\">\n            <Link href=\"/dashboard\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back\n            </Link>\n          </Button>\n          {isAdmin && (\n            <Button onClick={handleAddEvent} size=\"sm\" className=\"sm:size-default\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Add Event</span>\n              <span className=\"sm:hidden\">Add</span>\n            </Button>\n          )}\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader className=\"pb-3 sm:pb-6\">\n          <div className=\"flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between\">\n            <CardTitle className=\"text-xl sm:text-2xl\">\n              {format(currentDate, 'MMMM yyyy')}\n            </CardTitle>\n            <div className=\"flex items-center gap-1 sm:gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={goToToday}\n                className=\"text-xs sm:text-sm\"\n              >\n                Today\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={previousMonth}\n                className=\"h-8 w-8 sm:h-9 sm:w-9\"\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={nextMonth}\n                className=\"h-8 w-8 sm:h-9 sm:w-9\"\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {/* Calendar Grid */}\n          <div className=\"bg-muted grid grid-cols-7 gap-px overflow-hidden rounded-lg\">\n            {/* Day Headers */}\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\n              <div\n                key={day}\n                className=\"bg-background text-muted-foreground p-1 text-center text-xs font-medium sm:p-2 sm:text-sm\"\n              >\n                <span className=\"sm:hidden\">{day.slice(0, 1)}</span>\n                <span className=\"hidden sm:inline\">{day}</span>\n              </div>\n            ))}\n\n            {/* Calendar Days */}\n            {calendarDays.map((day, index) => {\n              const dayEvents = getEventsForDay(day);\n              const isCurrentMonth = isSameMonth(day, currentDate);\n              const isSelectedDay = selectedDate && isSameDay(day, selectedDate);\n              const isTodayDate = isToday(day);\n\n              return (\n                <div\n                  key={index}\n                  onClick={() => setSelectedDate(day)}\n                  className={cn(\n                    'bg-background hover:bg-muted/50 min-h-[60px] cursor-pointer p-1 transition-colors sm:min-h-[100px] sm:p-2',\n                    !isCurrentMonth && 'text-muted-foreground bg-muted/30',\n                    isSelectedDay && 'ring-primary ring-2',\n                    isTodayDate && 'bg-primary/5'\n                  )}\n                >\n                  <div className=\"mb-1 flex items-start justify-between\">\n                    <span\n                      className={cn(\n                        'text-xs font-medium sm:text-sm',\n                        isTodayDate &&\n                          'bg-primary text-primary-foreground flex h-5 w-5 items-center justify-center rounded-full text-[10px] sm:h-7 sm:w-7 sm:text-xs'\n                      )}\n                    >\n                      {format(day, 'd')}\n                    </span>\n                  </div>\n\n                  {/* Event Dots - Mobile */}\n                  <div className=\"sm:hidden\">\n                    {dayEvents.length > 0 && (\n                      <div className=\"flex gap-0.5\">\n                        {dayEvents.slice(0, 3).map((event, idx) => {\n                          const config = eventTypeConfig[event.type];\n                          return (\n                            <div\n                              key={idx}\n                              className={cn('h-1.5 w-1.5 rounded-full', config.color)}\n                            />\n                          );\n                        })}\n                        {dayEvents.length > 3 && (\n                          <span className=\"text-muted-foreground ml-0.5 text-[8px]\">\n                            +{dayEvents.length - 3}\n                          </span>\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Event List - Desktop */}\n                  <div className=\"hidden space-y-1 sm:block\">\n                    {dayEvents.slice(0, 3).map((event, eventIndex) => {\n                      const config = eventTypeConfig[event.type];\n                      return (\n                        <div key={eventIndex} className=\"flex items-center gap-1\">\n                          <div className={cn('h-2 w-2 flex-shrink-0 rounded-full', config.color)} />\n                          <span className=\"truncate text-xs\">{event.title}</span>\n                        </div>\n                      );\n                    })}\n                    {dayEvents.length > 3 && (\n                      <span className=\"text-muted-foreground text-xs\">\n                        +{dayEvents.length - 3} more\n                      </span>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Selected Day Events */}\n      {selectedDate && (\n        <Card id=\"selected-date-events\">\n          <CardHeader>\n            <CardTitle>Events on {format(selectedDate, 'MMMM d, yyyy')}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {getEventsForDay(selectedDate).length === 0 ? (\n              <p className=\"text-muted-foreground py-8 text-center\">\n                No events scheduled for this day\n              </p>\n            ) : (\n              <div className=\"space-y-4\">\n                {getEventsForDay(selectedDate).map((event) => {\n                  const config = eventTypeConfig[event.type];\n                  const Icon = config.icon;\n\n                  return (\n                    <div key={event.id} className=\"flex items-start gap-4 rounded-lg border p-4\">\n                      <div className={cn('rounded-lg p-2', config.color, 'bg-opacity-20')}>\n                        <Icon className={cn('h-5 w-5', config.color.replace('bg-', 'text-'))} />\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h3 className=\"font-semibold\">{event.title}</h3>\n                            <div className=\"text-muted-foreground mt-1 flex items-center gap-4 text-sm\">\n                              {!event.allDay && (\n                                <span className=\"flex items-center gap-1\">\n                                  <Clock className=\"h-3 w-3\" />\n                                  {format(new Date(event.startDate), 'h:mm a')}\n                                  {event.endDate &&\n                                    ` - ${format(new Date(event.endDate), 'h:mm a')}`}\n                                </span>\n                              )}\n                              {event.location && (\n                                <span className=\"flex items-center gap-1\">\n                                  <MapPin className=\"h-3 w-3\" />\n                                  {event.location}\n                                </span>\n                              )}\n                            </div>\n                            {event.description && (\n                              <p className=\"text-muted-foreground mt-2 text-sm\">\n                                {event.description}\n                              </p>\n                            )}\n                          </div>\n                          {isAdmin && (\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\">\n                                  <MoreVertical className=\"h-4 w-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem onClick={() => handleEditEvent(event)}>\n                                  Edit\n                                </DropdownMenuItem>\n                                <DropdownMenuItem\n                                  className=\"text-destructive\"\n                                  onClick={() => handleDeleteEvent(event.id)}\n                                >\n                                  Delete\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Event Type Legend */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Event Types</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-4\">\n            {Object.entries(eventTypeConfig).map(([type, config]) => {\n              const Icon = config.icon;\n              return (\n                <div key={type} className=\"flex items-center gap-2\">\n                  <div className={cn('h-4 w-4 rounded-full', config.color)} />\n                  <span className=\"text-sm\">{config.label}</span>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Event Dialog - Only load when needed */}\n      {eventDialogOpen && (\n        <LazyEventDialog\n          open={eventDialogOpen}\n          onOpenChange={setEventDialogOpen}\n          event={selectedEvent}\n          initialDate={selectedDate || undefined}\n          onSuccess={loadEvents}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default function CalendarPage() {\n  return (\n    <AdminProvider>\n      <CalendarPageContent />\n    </AdminProvider>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"warning","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[8559,8564],"sourceCode":"'use client';\n\nimport { addMonths } from 'date-fns/addMonths';\nimport { eachDayOfInterval } from 'date-fns/eachDayOfInterval';\nimport { endOfMonth } from 'date-fns/endOfMonth';\nimport { endOfWeek } from 'date-fns/endOfWeek';\n// Optimize date-fns imports by importing only what we need\nimport { format } from 'date-fns/format';\nimport { isSameDay } from 'date-fns/isSameDay';\nimport { isSameMonth } from 'date-fns/isSameMonth';\nimport { isToday } from 'date-fns/isToday';\nimport { startOfMonth } from 'date-fns/startOfMonth';\nimport { startOfWeek } from 'date-fns/startOfWeek';\nimport { subMonths } from 'date-fns/subMonths';\nimport {\n  ArrowLeft,\n  Calendar as CalendarIcon,\n  ChevronLeft,\n  ChevronRight,\n  Clock,\n  Coffee,\n  MapPin,\n  MoreVertical,\n  Palmtree,\n  Plus,\n  Trophy,\n  Users,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { useSearchParams } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { LazyEventDialog } from '@/components/lazy';\nimport { CalendarSkeleton } from '@/components/loading/calendar-skeleton';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { AdminProvider, useAdmin } from '@/hooks/use-admin';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { type CalendarEvent, calendarService } from '@/lib/firebase-admin';\nimport { cn } from '@/lib/utils';\n\nconst eventTypeConfig = {\n  class: { icon: Users, color: 'bg-blue-500', label: 'Class' },\n  competition: { icon: Trophy, color: 'bg-purple-500', label: 'Competition' },\n  meeting: { icon: Coffee, color: 'bg-green-500', label: 'Meeting' },\n  holiday: { icon: Palmtree, color: 'bg-orange-500', label: 'Holiday' },\n  other: { icon: CalendarIcon, color: 'bg-gray-500', label: 'Other' },\n};\n\nfunction CalendarPageContent() {\n  const searchParams = useSearchParams();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n  const [events, setEvents] = useState<CalendarEvent[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [view, setView] = useState<'month' | 'week' | 'day'>('month');\n  const [eventDialogOpen, setEventDialogOpen] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);\n  const { user } = useAuth();\n  const { isAdmin } = useAdmin();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadEvents();\n  }, [loadEvents]);\n\n  useEffect(() => {\n    // Handle navigation from upcoming events\n    const eventDate = searchParams.get('date');\n    const eventId = searchParams.get('eventId');\n\n    if (eventDate) {\n      const date = new Date(eventDate);\n      setCurrentDate(date);\n      setSelectedDate(date);\n\n      // Scroll to selected date section after render\n      setTimeout(() => {\n        const selectedDateElement = document.getElementById('selected-date-events');\n        if (selectedDateElement) {\n          selectedDateElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n      }, 500);\n    }\n  }, [searchParams]);\n\n  async function loadEvents() {\n    try {\n      const start = startOfMonth(currentDate);\n      const end = endOfMonth(currentDate);\n      const data = await calendarService.getEvents(start, end);\n      setEvents(data);\n    } catch (error) {\n      console.error('Error loading events:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n  const calendarStart = startOfWeek(monthStart);\n  const calendarEnd = endOfWeek(monthEnd);\n  const calendarDays = eachDayOfInterval({ start: calendarStart, end: calendarEnd });\n\n  const previousMonth = () => setCurrentDate(subMonths(currentDate, 1));\n  const nextMonth = () => setCurrentDate(addMonths(currentDate, 1));\n  const goToToday = () => setCurrentDate(new Date());\n\n  const getEventsForDay = (day: Date) => {\n    return events.filter((event) => {\n      const eventDate = new Date(event.startDate);\n      return isSameDay(eventDate, day);\n    });\n  };\n\n  const handleAddEvent = () => {\n    setSelectedEvent(null);\n    setEventDialogOpen(true);\n  };\n\n  const handleEditEvent = (event: CalendarEvent) => {\n    setSelectedEvent(event);\n    setEventDialogOpen(true);\n  };\n\n  const handleDeleteEvent = async (eventId: string) => {\n    if (!user || !window.confirm('Are you sure you want to delete this event?')) return;\n\n    try {\n      await calendarService.delete(eventId, user.uid, user.displayName || user.email || 'Unknown');\n      toast({\n        title: 'Event deleted',\n        description: 'The event has been removed from the calendar.',\n      });\n      loadEvents();\n    } catch (error) {\n      console.error('Error deleting event:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to delete event. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto max-w-7xl space-y-6 px-4 py-6\">\n        <Skeleton className=\"h-10 w-64\" />\n        <CalendarSkeleton />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-7xl space-y-4 p-4 sm:space-y-6 sm:p-6\">\n      <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <div className=\"mb-2 flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"sm\" asChild className=\"sm:hidden\">\n              <Link href=\"/dashboard\">\n                <ArrowLeft className=\"h-4 w-4\" />\n              </Link>\n            </Button>\n            <h1 className=\"text-2xl font-bold sm:text-3xl\">Calendar</h1>\n          </div>\n          <p className=\"text-muted-foreground text-sm sm:text-base\">\n            View upcoming classes, competitions, and events\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"ghost\" asChild className=\"hidden sm:inline-flex\">\n            <Link href=\"/dashboard\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back\n            </Link>\n          </Button>\n          {isAdmin && (\n            <Button onClick={handleAddEvent} size=\"sm\" className=\"sm:size-default\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Add Event</span>\n              <span className=\"sm:hidden\">Add</span>\n            </Button>\n          )}\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader className=\"pb-3 sm:pb-6\">\n          <div className=\"flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between\">\n            <CardTitle className=\"text-xl sm:text-2xl\">\n              {format(currentDate, 'MMMM yyyy')}\n            </CardTitle>\n            <div className=\"flex items-center gap-1 sm:gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={goToToday}\n                className=\"text-xs sm:text-sm\"\n              >\n                Today\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={previousMonth}\n                className=\"h-8 w-8 sm:h-9 sm:w-9\"\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={nextMonth}\n                className=\"h-8 w-8 sm:h-9 sm:w-9\"\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {/* Calendar Grid */}\n          <div className=\"bg-muted grid grid-cols-7 gap-px overflow-hidden rounded-lg\">\n            {/* Day Headers */}\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\n              <div\n                key={day}\n                className=\"bg-background text-muted-foreground p-1 text-center text-xs font-medium sm:p-2 sm:text-sm\"\n              >\n                <span className=\"sm:hidden\">{day.slice(0, 1)}</span>\n                <span className=\"hidden sm:inline\">{day}</span>\n              </div>\n            ))}\n\n            {/* Calendar Days */}\n            {calendarDays.map((day, index) => {\n              const dayEvents = getEventsForDay(day);\n              const isCurrentMonth = isSameMonth(day, currentDate);\n              const isSelectedDay = selectedDate && isSameDay(day, selectedDate);\n              const isTodayDate = isToday(day);\n\n              return (\n                <div\n                  key={index}\n                  onClick={() => setSelectedDate(day)}\n                  className={cn(\n                    'bg-background hover:bg-muted/50 min-h-[60px] cursor-pointer p-1 transition-colors sm:min-h-[100px] sm:p-2',\n                    !isCurrentMonth && 'text-muted-foreground bg-muted/30',\n                    isSelectedDay && 'ring-primary ring-2',\n                    isTodayDate && 'bg-primary/5'\n                  )}\n                >\n                  <div className=\"mb-1 flex items-start justify-between\">\n                    <span\n                      className={cn(\n                        'text-xs font-medium sm:text-sm',\n                        isTodayDate &&\n                          'bg-primary text-primary-foreground flex h-5 w-5 items-center justify-center rounded-full text-[10px] sm:h-7 sm:w-7 sm:text-xs'\n                      )}\n                    >\n                      {format(day, 'd')}\n                    </span>\n                  </div>\n\n                  {/* Event Dots - Mobile */}\n                  <div className=\"sm:hidden\">\n                    {dayEvents.length > 0 && (\n                      <div className=\"flex gap-0.5\">\n                        {dayEvents.slice(0, 3).map((event, idx) => {\n                          const config = eventTypeConfig[event.type];\n                          return (\n                            <div\n                              key={idx}\n                              className={cn('h-1.5 w-1.5 rounded-full', config.color)}\n                            />\n                          );\n                        })}\n                        {dayEvents.length > 3 && (\n                          <span className=\"text-muted-foreground ml-0.5 text-[8px]\">\n                            +{dayEvents.length - 3}\n                          </span>\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Event List - Desktop */}\n                  <div className=\"hidden space-y-1 sm:block\">\n                    {dayEvents.slice(0, 3).map((event, eventIndex) => {\n                      const config = eventTypeConfig[event.type];\n                      return (\n                        <div key={eventIndex} className=\"flex items-center gap-1\">\n                          <div className={cn('h-2 w-2 flex-shrink-0 rounded-full', config.color)} />\n                          <span className=\"truncate text-xs\">{event.title}</span>\n                        </div>\n                      );\n                    })}\n                    {dayEvents.length > 3 && (\n                      <span className=\"text-muted-foreground text-xs\">\n                        +{dayEvents.length - 3} more\n                      </span>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Selected Day Events */}\n      {selectedDate && (\n        <Card id=\"selected-date-events\">\n          <CardHeader>\n            <CardTitle>Events on {format(selectedDate, 'MMMM d, yyyy')}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {getEventsForDay(selectedDate).length === 0 ? (\n              <p className=\"text-muted-foreground py-8 text-center\">\n                No events scheduled for this day\n              </p>\n            ) : (\n              <div className=\"space-y-4\">\n                {getEventsForDay(selectedDate).map((event) => {\n                  const config = eventTypeConfig[event.type];\n                  const Icon = config.icon;\n\n                  return (\n                    <div key={event.id} className=\"flex items-start gap-4 rounded-lg border p-4\">\n                      <div className={cn('rounded-lg p-2', config.color, 'bg-opacity-20')}>\n                        <Icon className={cn('h-5 w-5', config.color.replace('bg-', 'text-'))} />\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h3 className=\"font-semibold\">{event.title}</h3>\n                            <div className=\"text-muted-foreground mt-1 flex items-center gap-4 text-sm\">\n                              {!event.allDay && (\n                                <span className=\"flex items-center gap-1\">\n                                  <Clock className=\"h-3 w-3\" />\n                                  {format(new Date(event.startDate), 'h:mm a')}\n                                  {event.endDate &&\n                                    ` - ${format(new Date(event.endDate), 'h:mm a')}`}\n                                </span>\n                              )}\n                              {event.location && (\n                                <span className=\"flex items-center gap-1\">\n                                  <MapPin className=\"h-3 w-3\" />\n                                  {event.location}\n                                </span>\n                              )}\n                            </div>\n                            {event.description && (\n                              <p className=\"text-muted-foreground mt-2 text-sm\">\n                                {event.description}\n                              </p>\n                            )}\n                          </div>\n                          {isAdmin && (\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\">\n                                  <MoreVertical className=\"h-4 w-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem onClick={() => handleEditEvent(event)}>\n                                  Edit\n                                </DropdownMenuItem>\n                                <DropdownMenuItem\n                                  className=\"text-destructive\"\n                                  onClick={() => handleDeleteEvent(event.id)}\n                                >\n                                  Delete\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Event Type Legend */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Event Types</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-4\">\n            {Object.entries(eventTypeConfig).map(([type, config]) => {\n              const Icon = config.icon;\n              return (\n                <div key={type} className=\"flex items-center gap-2\">\n                  <div className={cn('h-4 w-4 rounded-full', config.color)} />\n                  <span className=\"text-sm\">{config.label}</span>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Event Dialog - Only load when needed */}\n      {eventDialogOpen && (\n        <LazyEventDialog\n          open={eventDialogOpen}\n          onOpenChange={setEventDialogOpen}\n          event={selectedEvent}\n          initialDate={selectedDate || undefined}\n          onSuccess={loadEvents}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default function CalendarPage() {\n  return (\n    <AdminProvider>\n      <CalendarPageContent />\n    </AdminProvider>\n  );\n}\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/calendar/page.tsx"},"span":[8891,8896],"sourceCode":"'use client';\n\nimport { addMonths } from 'date-fns/addMonths';\nimport { eachDayOfInterval } from 'date-fns/eachDayOfInterval';\nimport { endOfMonth } from 'date-fns/endOfMonth';\nimport { endOfWeek } from 'date-fns/endOfWeek';\n// Optimize date-fns imports by importing only what we need\nimport { format } from 'date-fns/format';\nimport { isSameDay } from 'date-fns/isSameDay';\nimport { isSameMonth } from 'date-fns/isSameMonth';\nimport { isToday } from 'date-fns/isToday';\nimport { startOfMonth } from 'date-fns/startOfMonth';\nimport { startOfWeek } from 'date-fns/startOfWeek';\nimport { subMonths } from 'date-fns/subMonths';\nimport {\n  ArrowLeft,\n  Calendar as CalendarIcon,\n  ChevronLeft,\n  ChevronRight,\n  Clock,\n  Coffee,\n  MapPin,\n  MoreVertical,\n  Palmtree,\n  Plus,\n  Trophy,\n  Users,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { useSearchParams } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { LazyEventDialog } from '@/components/lazy';\nimport { CalendarSkeleton } from '@/components/loading/calendar-skeleton';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { AdminProvider, useAdmin } from '@/hooks/use-admin';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { type CalendarEvent, calendarService } from '@/lib/firebase-admin';\nimport { cn } from '@/lib/utils';\n\nconst eventTypeConfig = {\n  class: { icon: Users, color: 'bg-blue-500', label: 'Class' },\n  competition: { icon: Trophy, color: 'bg-purple-500', label: 'Competition' },\n  meeting: { icon: Coffee, color: 'bg-green-500', label: 'Meeting' },\n  holiday: { icon: Palmtree, color: 'bg-orange-500', label: 'Holiday' },\n  other: { icon: CalendarIcon, color: 'bg-gray-500', label: 'Other' },\n};\n\nfunction CalendarPageContent() {\n  const searchParams = useSearchParams();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n  const [events, setEvents] = useState<CalendarEvent[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [view, setView] = useState<'month' | 'week' | 'day'>('month');\n  const [eventDialogOpen, setEventDialogOpen] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);\n  const { user } = useAuth();\n  const { isAdmin } = useAdmin();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadEvents();\n  }, [loadEvents]);\n\n  useEffect(() => {\n    // Handle navigation from upcoming events\n    const eventDate = searchParams.get('date');\n    const eventId = searchParams.get('eventId');\n\n    if (eventDate) {\n      const date = new Date(eventDate);\n      setCurrentDate(date);\n      setSelectedDate(date);\n\n      // Scroll to selected date section after render\n      setTimeout(() => {\n        const selectedDateElement = document.getElementById('selected-date-events');\n        if (selectedDateElement) {\n          selectedDateElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n      }, 500);\n    }\n  }, [searchParams]);\n\n  async function loadEvents() {\n    try {\n      const start = startOfMonth(currentDate);\n      const end = endOfMonth(currentDate);\n      const data = await calendarService.getEvents(start, end);\n      setEvents(data);\n    } catch (error) {\n      console.error('Error loading events:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n  const calendarStart = startOfWeek(monthStart);\n  const calendarEnd = endOfWeek(monthEnd);\n  const calendarDays = eachDayOfInterval({ start: calendarStart, end: calendarEnd });\n\n  const previousMonth = () => setCurrentDate(subMonths(currentDate, 1));\n  const nextMonth = () => setCurrentDate(addMonths(currentDate, 1));\n  const goToToday = () => setCurrentDate(new Date());\n\n  const getEventsForDay = (day: Date) => {\n    return events.filter((event) => {\n      const eventDate = new Date(event.startDate);\n      return isSameDay(eventDate, day);\n    });\n  };\n\n  const handleAddEvent = () => {\n    setSelectedEvent(null);\n    setEventDialogOpen(true);\n  };\n\n  const handleEditEvent = (event: CalendarEvent) => {\n    setSelectedEvent(event);\n    setEventDialogOpen(true);\n  };\n\n  const handleDeleteEvent = async (eventId: string) => {\n    if (!user || !window.confirm('Are you sure you want to delete this event?')) return;\n\n    try {\n      await calendarService.delete(eventId, user.uid, user.displayName || user.email || 'Unknown');\n      toast({\n        title: 'Event deleted',\n        description: 'The event has been removed from the calendar.',\n      });\n      loadEvents();\n    } catch (error) {\n      console.error('Error deleting event:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to delete event. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto max-w-7xl space-y-6 px-4 py-6\">\n        <Skeleton className=\"h-10 w-64\" />\n        <CalendarSkeleton />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-7xl space-y-4 p-4 sm:space-y-6 sm:p-6\">\n      <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <div className=\"mb-2 flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"sm\" asChild className=\"sm:hidden\">\n              <Link href=\"/dashboard\">\n                <ArrowLeft className=\"h-4 w-4\" />\n              </Link>\n            </Button>\n            <h1 className=\"text-2xl font-bold sm:text-3xl\">Calendar</h1>\n          </div>\n          <p className=\"text-muted-foreground text-sm sm:text-base\">\n            View upcoming classes, competitions, and events\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"ghost\" asChild className=\"hidden sm:inline-flex\">\n            <Link href=\"/dashboard\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back\n            </Link>\n          </Button>\n          {isAdmin && (\n            <Button onClick={handleAddEvent} size=\"sm\" className=\"sm:size-default\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Add Event</span>\n              <span className=\"sm:hidden\">Add</span>\n            </Button>\n          )}\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader className=\"pb-3 sm:pb-6\">\n          <div className=\"flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between\">\n            <CardTitle className=\"text-xl sm:text-2xl\">\n              {format(currentDate, 'MMMM yyyy')}\n            </CardTitle>\n            <div className=\"flex items-center gap-1 sm:gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={goToToday}\n                className=\"text-xs sm:text-sm\"\n              >\n                Today\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={previousMonth}\n                className=\"h-8 w-8 sm:h-9 sm:w-9\"\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={nextMonth}\n                className=\"h-8 w-8 sm:h-9 sm:w-9\"\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {/* Calendar Grid */}\n          <div className=\"bg-muted grid grid-cols-7 gap-px overflow-hidden rounded-lg\">\n            {/* Day Headers */}\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\n              <div\n                key={day}\n                className=\"bg-background text-muted-foreground p-1 text-center text-xs font-medium sm:p-2 sm:text-sm\"\n              >\n                <span className=\"sm:hidden\">{day.slice(0, 1)}</span>\n                <span className=\"hidden sm:inline\">{day}</span>\n              </div>\n            ))}\n\n            {/* Calendar Days */}\n            {calendarDays.map((day, index) => {\n              const dayEvents = getEventsForDay(day);\n              const isCurrentMonth = isSameMonth(day, currentDate);\n              const isSelectedDay = selectedDate && isSameDay(day, selectedDate);\n              const isTodayDate = isToday(day);\n\n              return (\n                <div\n                  key={index}\n                  onClick={() => setSelectedDate(day)}\n                  className={cn(\n                    'bg-background hover:bg-muted/50 min-h-[60px] cursor-pointer p-1 transition-colors sm:min-h-[100px] sm:p-2',\n                    !isCurrentMonth && 'text-muted-foreground bg-muted/30',\n                    isSelectedDay && 'ring-primary ring-2',\n                    isTodayDate && 'bg-primary/5'\n                  )}\n                >\n                  <div className=\"mb-1 flex items-start justify-between\">\n                    <span\n                      className={cn(\n                        'text-xs font-medium sm:text-sm',\n                        isTodayDate &&\n                          'bg-primary text-primary-foreground flex h-5 w-5 items-center justify-center rounded-full text-[10px] sm:h-7 sm:w-7 sm:text-xs'\n                      )}\n                    >\n                      {format(day, 'd')}\n                    </span>\n                  </div>\n\n                  {/* Event Dots - Mobile */}\n                  <div className=\"sm:hidden\">\n                    {dayEvents.length > 0 && (\n                      <div className=\"flex gap-0.5\">\n                        {dayEvents.slice(0, 3).map((event, idx) => {\n                          const config = eventTypeConfig[event.type];\n                          return (\n                            <div\n                              key={idx}\n                              className={cn('h-1.5 w-1.5 rounded-full', config.color)}\n                            />\n                          );\n                        })}\n                        {dayEvents.length > 3 && (\n                          <span className=\"text-muted-foreground ml-0.5 text-[8px]\">\n                            +{dayEvents.length - 3}\n                          </span>\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Event List - Desktop */}\n                  <div className=\"hidden space-y-1 sm:block\">\n                    {dayEvents.slice(0, 3).map((event, eventIndex) => {\n                      const config = eventTypeConfig[event.type];\n                      return (\n                        <div key={eventIndex} className=\"flex items-center gap-1\">\n                          <div className={cn('h-2 w-2 flex-shrink-0 rounded-full', config.color)} />\n                          <span className=\"truncate text-xs\">{event.title}</span>\n                        </div>\n                      );\n                    })}\n                    {dayEvents.length > 3 && (\n                      <span className=\"text-muted-foreground text-xs\">\n                        +{dayEvents.length - 3} more\n                      </span>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Selected Day Events */}\n      {selectedDate && (\n        <Card id=\"selected-date-events\">\n          <CardHeader>\n            <CardTitle>Events on {format(selectedDate, 'MMMM d, yyyy')}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {getEventsForDay(selectedDate).length === 0 ? (\n              <p className=\"text-muted-foreground py-8 text-center\">\n                No events scheduled for this day\n              </p>\n            ) : (\n              <div className=\"space-y-4\">\n                {getEventsForDay(selectedDate).map((event) => {\n                  const config = eventTypeConfig[event.type];\n                  const Icon = config.icon;\n\n                  return (\n                    <div key={event.id} className=\"flex items-start gap-4 rounded-lg border p-4\">\n                      <div className={cn('rounded-lg p-2', config.color, 'bg-opacity-20')}>\n                        <Icon className={cn('h-5 w-5', config.color.replace('bg-', 'text-'))} />\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h3 className=\"font-semibold\">{event.title}</h3>\n                            <div className=\"text-muted-foreground mt-1 flex items-center gap-4 text-sm\">\n                              {!event.allDay && (\n                                <span className=\"flex items-center gap-1\">\n                                  <Clock className=\"h-3 w-3\" />\n                                  {format(new Date(event.startDate), 'h:mm a')}\n                                  {event.endDate &&\n                                    ` - ${format(new Date(event.endDate), 'h:mm a')}`}\n                                </span>\n                              )}\n                              {event.location && (\n                                <span className=\"flex items-center gap-1\">\n                                  <MapPin className=\"h-3 w-3\" />\n                                  {event.location}\n                                </span>\n                              )}\n                            </div>\n                            {event.description && (\n                              <p className=\"text-muted-foreground mt-2 text-sm\">\n                                {event.description}\n                              </p>\n                            )}\n                          </div>\n                          {isAdmin && (\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\">\n                                  <MoreVertical className=\"h-4 w-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem onClick={() => handleEditEvent(event)}>\n                                  Edit\n                                </DropdownMenuItem>\n                                <DropdownMenuItem\n                                  className=\"text-destructive\"\n                                  onClick={() => handleDeleteEvent(event.id)}\n                                >\n                                  Delete\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Event Type Legend */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Event Types</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-4\">\n            {Object.entries(eventTypeConfig).map(([type, config]) => {\n              const Icon = config.icon;\n              return (\n                <div key={type} className=\"flex items-center gap-2\">\n                  <div className={cn('h-4 w-4 rounded-full', config.color)} />\n                  <span className=\"text-sm\">{config.label}</span>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Event Dialog - Only load when needed */}\n      {eventDialogOpen && (\n        <LazyEventDialog\n          open={eventDialogOpen}\n          onOpenChange={setEventDialogOpen}\n          event={selectedEvent}\n          initialDate={selectedDate || undefined}\n          onSuccess={loadEvents}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default function CalendarPage() {\n  return (\n    <AdminProvider>\n      <CalendarPageContent />\n    </AdminProvider>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"warning","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[10121,10124],"sourceCode":"'use client';\n\nimport { addMonths } from 'date-fns/addMonths';\nimport { eachDayOfInterval } from 'date-fns/eachDayOfInterval';\nimport { endOfMonth } from 'date-fns/endOfMonth';\nimport { endOfWeek } from 'date-fns/endOfWeek';\n// Optimize date-fns imports by importing only what we need\nimport { format } from 'date-fns/format';\nimport { isSameDay } from 'date-fns/isSameDay';\nimport { isSameMonth } from 'date-fns/isSameMonth';\nimport { isToday } from 'date-fns/isToday';\nimport { startOfMonth } from 'date-fns/startOfMonth';\nimport { startOfWeek } from 'date-fns/startOfWeek';\nimport { subMonths } from 'date-fns/subMonths';\nimport {\n  ArrowLeft,\n  Calendar as CalendarIcon,\n  ChevronLeft,\n  ChevronRight,\n  Clock,\n  Coffee,\n  MapPin,\n  MoreVertical,\n  Palmtree,\n  Plus,\n  Trophy,\n  Users,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { useSearchParams } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { LazyEventDialog } from '@/components/lazy';\nimport { CalendarSkeleton } from '@/components/loading/calendar-skeleton';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { AdminProvider, useAdmin } from '@/hooks/use-admin';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { type CalendarEvent, calendarService } from '@/lib/firebase-admin';\nimport { cn } from '@/lib/utils';\n\nconst eventTypeConfig = {\n  class: { icon: Users, color: 'bg-blue-500', label: 'Class' },\n  competition: { icon: Trophy, color: 'bg-purple-500', label: 'Competition' },\n  meeting: { icon: Coffee, color: 'bg-green-500', label: 'Meeting' },\n  holiday: { icon: Palmtree, color: 'bg-orange-500', label: 'Holiday' },\n  other: { icon: CalendarIcon, color: 'bg-gray-500', label: 'Other' },\n};\n\nfunction CalendarPageContent() {\n  const searchParams = useSearchParams();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n  const [events, setEvents] = useState<CalendarEvent[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [view, setView] = useState<'month' | 'week' | 'day'>('month');\n  const [eventDialogOpen, setEventDialogOpen] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);\n  const { user } = useAuth();\n  const { isAdmin } = useAdmin();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadEvents();\n  }, [loadEvents]);\n\n  useEffect(() => {\n    // Handle navigation from upcoming events\n    const eventDate = searchParams.get('date');\n    const eventId = searchParams.get('eventId');\n\n    if (eventDate) {\n      const date = new Date(eventDate);\n      setCurrentDate(date);\n      setSelectedDate(date);\n\n      // Scroll to selected date section after render\n      setTimeout(() => {\n        const selectedDateElement = document.getElementById('selected-date-events');\n        if (selectedDateElement) {\n          selectedDateElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n      }, 500);\n    }\n  }, [searchParams]);\n\n  async function loadEvents() {\n    try {\n      const start = startOfMonth(currentDate);\n      const end = endOfMonth(currentDate);\n      const data = await calendarService.getEvents(start, end);\n      setEvents(data);\n    } catch (error) {\n      console.error('Error loading events:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n  const calendarStart = startOfWeek(monthStart);\n  const calendarEnd = endOfWeek(monthEnd);\n  const calendarDays = eachDayOfInterval({ start: calendarStart, end: calendarEnd });\n\n  const previousMonth = () => setCurrentDate(subMonths(currentDate, 1));\n  const nextMonth = () => setCurrentDate(addMonths(currentDate, 1));\n  const goToToday = () => setCurrentDate(new Date());\n\n  const getEventsForDay = (day: Date) => {\n    return events.filter((event) => {\n      const eventDate = new Date(event.startDate);\n      return isSameDay(eventDate, day);\n    });\n  };\n\n  const handleAddEvent = () => {\n    setSelectedEvent(null);\n    setEventDialogOpen(true);\n  };\n\n  const handleEditEvent = (event: CalendarEvent) => {\n    setSelectedEvent(event);\n    setEventDialogOpen(true);\n  };\n\n  const handleDeleteEvent = async (eventId: string) => {\n    if (!user || !window.confirm('Are you sure you want to delete this event?')) return;\n\n    try {\n      await calendarService.delete(eventId, user.uid, user.displayName || user.email || 'Unknown');\n      toast({\n        title: 'Event deleted',\n        description: 'The event has been removed from the calendar.',\n      });\n      loadEvents();\n    } catch (error) {\n      console.error('Error deleting event:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to delete event. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto max-w-7xl space-y-6 px-4 py-6\">\n        <Skeleton className=\"h-10 w-64\" />\n        <CalendarSkeleton />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-7xl space-y-4 p-4 sm:space-y-6 sm:p-6\">\n      <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <div className=\"mb-2 flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"sm\" asChild className=\"sm:hidden\">\n              <Link href=\"/dashboard\">\n                <ArrowLeft className=\"h-4 w-4\" />\n              </Link>\n            </Button>\n            <h1 className=\"text-2xl font-bold sm:text-3xl\">Calendar</h1>\n          </div>\n          <p className=\"text-muted-foreground text-sm sm:text-base\">\n            View upcoming classes, competitions, and events\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"ghost\" asChild className=\"hidden sm:inline-flex\">\n            <Link href=\"/dashboard\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back\n            </Link>\n          </Button>\n          {isAdmin && (\n            <Button onClick={handleAddEvent} size=\"sm\" className=\"sm:size-default\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Add Event</span>\n              <span className=\"sm:hidden\">Add</span>\n            </Button>\n          )}\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader className=\"pb-3 sm:pb-6\">\n          <div className=\"flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between\">\n            <CardTitle className=\"text-xl sm:text-2xl\">\n              {format(currentDate, 'MMMM yyyy')}\n            </CardTitle>\n            <div className=\"flex items-center gap-1 sm:gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={goToToday}\n                className=\"text-xs sm:text-sm\"\n              >\n                Today\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={previousMonth}\n                className=\"h-8 w-8 sm:h-9 sm:w-9\"\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={nextMonth}\n                className=\"h-8 w-8 sm:h-9 sm:w-9\"\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {/* Calendar Grid */}\n          <div className=\"bg-muted grid grid-cols-7 gap-px overflow-hidden rounded-lg\">\n            {/* Day Headers */}\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\n              <div\n                key={day}\n                className=\"bg-background text-muted-foreground p-1 text-center text-xs font-medium sm:p-2 sm:text-sm\"\n              >\n                <span className=\"sm:hidden\">{day.slice(0, 1)}</span>\n                <span className=\"hidden sm:inline\">{day}</span>\n              </div>\n            ))}\n\n            {/* Calendar Days */}\n            {calendarDays.map((day, index) => {\n              const dayEvents = getEventsForDay(day);\n              const isCurrentMonth = isSameMonth(day, currentDate);\n              const isSelectedDay = selectedDate && isSameDay(day, selectedDate);\n              const isTodayDate = isToday(day);\n\n              return (\n                <div\n                  key={index}\n                  onClick={() => setSelectedDate(day)}\n                  className={cn(\n                    'bg-background hover:bg-muted/50 min-h-[60px] cursor-pointer p-1 transition-colors sm:min-h-[100px] sm:p-2',\n                    !isCurrentMonth && 'text-muted-foreground bg-muted/30',\n                    isSelectedDay && 'ring-primary ring-2',\n                    isTodayDate && 'bg-primary/5'\n                  )}\n                >\n                  <div className=\"mb-1 flex items-start justify-between\">\n                    <span\n                      className={cn(\n                        'text-xs font-medium sm:text-sm',\n                        isTodayDate &&\n                          'bg-primary text-primary-foreground flex h-5 w-5 items-center justify-center rounded-full text-[10px] sm:h-7 sm:w-7 sm:text-xs'\n                      )}\n                    >\n                      {format(day, 'd')}\n                    </span>\n                  </div>\n\n                  {/* Event Dots - Mobile */}\n                  <div className=\"sm:hidden\">\n                    {dayEvents.length > 0 && (\n                      <div className=\"flex gap-0.5\">\n                        {dayEvents.slice(0, 3).map((event, idx) => {\n                          const config = eventTypeConfig[event.type];\n                          return (\n                            <div\n                              key={idx}\n                              className={cn('h-1.5 w-1.5 rounded-full', config.color)}\n                            />\n                          );\n                        })}\n                        {dayEvents.length > 3 && (\n                          <span className=\"text-muted-foreground ml-0.5 text-[8px]\">\n                            +{dayEvents.length - 3}\n                          </span>\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Event List - Desktop */}\n                  <div className=\"hidden space-y-1 sm:block\">\n                    {dayEvents.slice(0, 3).map((event, eventIndex) => {\n                      const config = eventTypeConfig[event.type];\n                      return (\n                        <div key={eventIndex} className=\"flex items-center gap-1\">\n                          <div className={cn('h-2 w-2 flex-shrink-0 rounded-full', config.color)} />\n                          <span className=\"truncate text-xs\">{event.title}</span>\n                        </div>\n                      );\n                    })}\n                    {dayEvents.length > 3 && (\n                      <span className=\"text-muted-foreground text-xs\">\n                        +{dayEvents.length - 3} more\n                      </span>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Selected Day Events */}\n      {selectedDate && (\n        <Card id=\"selected-date-events\">\n          <CardHeader>\n            <CardTitle>Events on {format(selectedDate, 'MMMM d, yyyy')}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {getEventsForDay(selectedDate).length === 0 ? (\n              <p className=\"text-muted-foreground py-8 text-center\">\n                No events scheduled for this day\n              </p>\n            ) : (\n              <div className=\"space-y-4\">\n                {getEventsForDay(selectedDate).map((event) => {\n                  const config = eventTypeConfig[event.type];\n                  const Icon = config.icon;\n\n                  return (\n                    <div key={event.id} className=\"flex items-start gap-4 rounded-lg border p-4\">\n                      <div className={cn('rounded-lg p-2', config.color, 'bg-opacity-20')}>\n                        <Icon className={cn('h-5 w-5', config.color.replace('bg-', 'text-'))} />\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h3 className=\"font-semibold\">{event.title}</h3>\n                            <div className=\"text-muted-foreground mt-1 flex items-center gap-4 text-sm\">\n                              {!event.allDay && (\n                                <span className=\"flex items-center gap-1\">\n                                  <Clock className=\"h-3 w-3\" />\n                                  {format(new Date(event.startDate), 'h:mm a')}\n                                  {event.endDate &&\n                                    ` - ${format(new Date(event.endDate), 'h:mm a')}`}\n                                </span>\n                              )}\n                              {event.location && (\n                                <span className=\"flex items-center gap-1\">\n                                  <MapPin className=\"h-3 w-3\" />\n                                  {event.location}\n                                </span>\n                              )}\n                            </div>\n                            {event.description && (\n                              <p className=\"text-muted-foreground mt-2 text-sm\">\n                                {event.description}\n                              </p>\n                            )}\n                          </div>\n                          {isAdmin && (\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\">\n                                  <MoreVertical className=\"h-4 w-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem onClick={() => handleEditEvent(event)}>\n                                  Edit\n                                </DropdownMenuItem>\n                                <DropdownMenuItem\n                                  className=\"text-destructive\"\n                                  onClick={() => handleDeleteEvent(event.id)}\n                                >\n                                  Delete\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Event Type Legend */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Event Types</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-4\">\n            {Object.entries(eventTypeConfig).map(([type, config]) => {\n              const Icon = config.icon;\n              return (\n                <div key={type} className=\"flex items-center gap-2\">\n                  <div className={cn('h-4 w-4 rounded-full', config.color)} />\n                  <span className=\"text-sm\">{config.label}</span>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Event Dialog - Only load when needed */}\n      {eventDialogOpen && (\n        <LazyEventDialog\n          open={eventDialogOpen}\n          onOpenChange={setEventDialogOpen}\n          event={selectedEvent}\n          initialDate={selectedDate || undefined}\n          onSuccess={loadEvents}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default function CalendarPage() {\n  return (\n    <AdminProvider>\n      <CalendarPageContent />\n    </AdminProvider>\n  );\n}\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/calendar/page.tsx"},"span":[10304,10307],"sourceCode":"'use client';\n\nimport { addMonths } from 'date-fns/addMonths';\nimport { eachDayOfInterval } from 'date-fns/eachDayOfInterval';\nimport { endOfMonth } from 'date-fns/endOfMonth';\nimport { endOfWeek } from 'date-fns/endOfWeek';\n// Optimize date-fns imports by importing only what we need\nimport { format } from 'date-fns/format';\nimport { isSameDay } from 'date-fns/isSameDay';\nimport { isSameMonth } from 'date-fns/isSameMonth';\nimport { isToday } from 'date-fns/isToday';\nimport { startOfMonth } from 'date-fns/startOfMonth';\nimport { startOfWeek } from 'date-fns/startOfWeek';\nimport { subMonths } from 'date-fns/subMonths';\nimport {\n  ArrowLeft,\n  Calendar as CalendarIcon,\n  ChevronLeft,\n  ChevronRight,\n  Clock,\n  Coffee,\n  MapPin,\n  MoreVertical,\n  Palmtree,\n  Plus,\n  Trophy,\n  Users,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { useSearchParams } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { LazyEventDialog } from '@/components/lazy';\nimport { CalendarSkeleton } from '@/components/loading/calendar-skeleton';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { AdminProvider, useAdmin } from '@/hooks/use-admin';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { type CalendarEvent, calendarService } from '@/lib/firebase-admin';\nimport { cn } from '@/lib/utils';\n\nconst eventTypeConfig = {\n  class: { icon: Users, color: 'bg-blue-500', label: 'Class' },\n  competition: { icon: Trophy, color: 'bg-purple-500', label: 'Competition' },\n  meeting: { icon: Coffee, color: 'bg-green-500', label: 'Meeting' },\n  holiday: { icon: Palmtree, color: 'bg-orange-500', label: 'Holiday' },\n  other: { icon: CalendarIcon, color: 'bg-gray-500', label: 'Other' },\n};\n\nfunction CalendarPageContent() {\n  const searchParams = useSearchParams();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n  const [events, setEvents] = useState<CalendarEvent[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [view, setView] = useState<'month' | 'week' | 'day'>('month');\n  const [eventDialogOpen, setEventDialogOpen] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);\n  const { user } = useAuth();\n  const { isAdmin } = useAdmin();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadEvents();\n  }, [loadEvents]);\n\n  useEffect(() => {\n    // Handle navigation from upcoming events\n    const eventDate = searchParams.get('date');\n    const eventId = searchParams.get('eventId');\n\n    if (eventDate) {\n      const date = new Date(eventDate);\n      setCurrentDate(date);\n      setSelectedDate(date);\n\n      // Scroll to selected date section after render\n      setTimeout(() => {\n        const selectedDateElement = document.getElementById('selected-date-events');\n        if (selectedDateElement) {\n          selectedDateElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n      }, 500);\n    }\n  }, [searchParams]);\n\n  async function loadEvents() {\n    try {\n      const start = startOfMonth(currentDate);\n      const end = endOfMonth(currentDate);\n      const data = await calendarService.getEvents(start, end);\n      setEvents(data);\n    } catch (error) {\n      console.error('Error loading events:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n  const calendarStart = startOfWeek(monthStart);\n  const calendarEnd = endOfWeek(monthEnd);\n  const calendarDays = eachDayOfInterval({ start: calendarStart, end: calendarEnd });\n\n  const previousMonth = () => setCurrentDate(subMonths(currentDate, 1));\n  const nextMonth = () => setCurrentDate(addMonths(currentDate, 1));\n  const goToToday = () => setCurrentDate(new Date());\n\n  const getEventsForDay = (day: Date) => {\n    return events.filter((event) => {\n      const eventDate = new Date(event.startDate);\n      return isSameDay(eventDate, day);\n    });\n  };\n\n  const handleAddEvent = () => {\n    setSelectedEvent(null);\n    setEventDialogOpen(true);\n  };\n\n  const handleEditEvent = (event: CalendarEvent) => {\n    setSelectedEvent(event);\n    setEventDialogOpen(true);\n  };\n\n  const handleDeleteEvent = async (eventId: string) => {\n    if (!user || !window.confirm('Are you sure you want to delete this event?')) return;\n\n    try {\n      await calendarService.delete(eventId, user.uid, user.displayName || user.email || 'Unknown');\n      toast({\n        title: 'Event deleted',\n        description: 'The event has been removed from the calendar.',\n      });\n      loadEvents();\n    } catch (error) {\n      console.error('Error deleting event:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to delete event. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto max-w-7xl space-y-6 px-4 py-6\">\n        <Skeleton className=\"h-10 w-64\" />\n        <CalendarSkeleton />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-7xl space-y-4 p-4 sm:space-y-6 sm:p-6\">\n      <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <div className=\"mb-2 flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"sm\" asChild className=\"sm:hidden\">\n              <Link href=\"/dashboard\">\n                <ArrowLeft className=\"h-4 w-4\" />\n              </Link>\n            </Button>\n            <h1 className=\"text-2xl font-bold sm:text-3xl\">Calendar</h1>\n          </div>\n          <p className=\"text-muted-foreground text-sm sm:text-base\">\n            View upcoming classes, competitions, and events\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"ghost\" asChild className=\"hidden sm:inline-flex\">\n            <Link href=\"/dashboard\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back\n            </Link>\n          </Button>\n          {isAdmin && (\n            <Button onClick={handleAddEvent} size=\"sm\" className=\"sm:size-default\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Add Event</span>\n              <span className=\"sm:hidden\">Add</span>\n            </Button>\n          )}\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader className=\"pb-3 sm:pb-6\">\n          <div className=\"flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between\">\n            <CardTitle className=\"text-xl sm:text-2xl\">\n              {format(currentDate, 'MMMM yyyy')}\n            </CardTitle>\n            <div className=\"flex items-center gap-1 sm:gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={goToToday}\n                className=\"text-xs sm:text-sm\"\n              >\n                Today\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={previousMonth}\n                className=\"h-8 w-8 sm:h-9 sm:w-9\"\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={nextMonth}\n                className=\"h-8 w-8 sm:h-9 sm:w-9\"\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {/* Calendar Grid */}\n          <div className=\"bg-muted grid grid-cols-7 gap-px overflow-hidden rounded-lg\">\n            {/* Day Headers */}\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\n              <div\n                key={day}\n                className=\"bg-background text-muted-foreground p-1 text-center text-xs font-medium sm:p-2 sm:text-sm\"\n              >\n                <span className=\"sm:hidden\">{day.slice(0, 1)}</span>\n                <span className=\"hidden sm:inline\">{day}</span>\n              </div>\n            ))}\n\n            {/* Calendar Days */}\n            {calendarDays.map((day, index) => {\n              const dayEvents = getEventsForDay(day);\n              const isCurrentMonth = isSameMonth(day, currentDate);\n              const isSelectedDay = selectedDate && isSameDay(day, selectedDate);\n              const isTodayDate = isToday(day);\n\n              return (\n                <div\n                  key={index}\n                  onClick={() => setSelectedDate(day)}\n                  className={cn(\n                    'bg-background hover:bg-muted/50 min-h-[60px] cursor-pointer p-1 transition-colors sm:min-h-[100px] sm:p-2',\n                    !isCurrentMonth && 'text-muted-foreground bg-muted/30',\n                    isSelectedDay && 'ring-primary ring-2',\n                    isTodayDate && 'bg-primary/5'\n                  )}\n                >\n                  <div className=\"mb-1 flex items-start justify-between\">\n                    <span\n                      className={cn(\n                        'text-xs font-medium sm:text-sm',\n                        isTodayDate &&\n                          'bg-primary text-primary-foreground flex h-5 w-5 items-center justify-center rounded-full text-[10px] sm:h-7 sm:w-7 sm:text-xs'\n                      )}\n                    >\n                      {format(day, 'd')}\n                    </span>\n                  </div>\n\n                  {/* Event Dots - Mobile */}\n                  <div className=\"sm:hidden\">\n                    {dayEvents.length > 0 && (\n                      <div className=\"flex gap-0.5\">\n                        {dayEvents.slice(0, 3).map((event, idx) => {\n                          const config = eventTypeConfig[event.type];\n                          return (\n                            <div\n                              key={idx}\n                              className={cn('h-1.5 w-1.5 rounded-full', config.color)}\n                            />\n                          );\n                        })}\n                        {dayEvents.length > 3 && (\n                          <span className=\"text-muted-foreground ml-0.5 text-[8px]\">\n                            +{dayEvents.length - 3}\n                          </span>\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Event List - Desktop */}\n                  <div className=\"hidden space-y-1 sm:block\">\n                    {dayEvents.slice(0, 3).map((event, eventIndex) => {\n                      const config = eventTypeConfig[event.type];\n                      return (\n                        <div key={eventIndex} className=\"flex items-center gap-1\">\n                          <div className={cn('h-2 w-2 flex-shrink-0 rounded-full', config.color)} />\n                          <span className=\"truncate text-xs\">{event.title}</span>\n                        </div>\n                      );\n                    })}\n                    {dayEvents.length > 3 && (\n                      <span className=\"text-muted-foreground text-xs\">\n                        +{dayEvents.length - 3} more\n                      </span>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Selected Day Events */}\n      {selectedDate && (\n        <Card id=\"selected-date-events\">\n          <CardHeader>\n            <CardTitle>Events on {format(selectedDate, 'MMMM d, yyyy')}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {getEventsForDay(selectedDate).length === 0 ? (\n              <p className=\"text-muted-foreground py-8 text-center\">\n                No events scheduled for this day\n              </p>\n            ) : (\n              <div className=\"space-y-4\">\n                {getEventsForDay(selectedDate).map((event) => {\n                  const config = eventTypeConfig[event.type];\n                  const Icon = config.icon;\n\n                  return (\n                    <div key={event.id} className=\"flex items-start gap-4 rounded-lg border p-4\">\n                      <div className={cn('rounded-lg p-2', config.color, 'bg-opacity-20')}>\n                        <Icon className={cn('h-5 w-5', config.color.replace('bg-', 'text-'))} />\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h3 className=\"font-semibold\">{event.title}</h3>\n                            <div className=\"text-muted-foreground mt-1 flex items-center gap-4 text-sm\">\n                              {!event.allDay && (\n                                <span className=\"flex items-center gap-1\">\n                                  <Clock className=\"h-3 w-3\" />\n                                  {format(new Date(event.startDate), 'h:mm a')}\n                                  {event.endDate &&\n                                    ` - ${format(new Date(event.endDate), 'h:mm a')}`}\n                                </span>\n                              )}\n                              {event.location && (\n                                <span className=\"flex items-center gap-1\">\n                                  <MapPin className=\"h-3 w-3\" />\n                                  {event.location}\n                                </span>\n                              )}\n                            </div>\n                            {event.description && (\n                              <p className=\"text-muted-foreground mt-2 text-sm\">\n                                {event.description}\n                              </p>\n                            )}\n                          </div>\n                          {isAdmin && (\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\">\n                                  <MoreVertical className=\"h-4 w-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem onClick={() => handleEditEvent(event)}>\n                                  Edit\n                                </DropdownMenuItem>\n                                <DropdownMenuItem\n                                  className=\"text-destructive\"\n                                  onClick={() => handleDeleteEvent(event.id)}\n                                >\n                                  Delete\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Event Type Legend */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Event Types</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-4\">\n            {Object.entries(eventTypeConfig).map(([type, config]) => {\n              const Icon = config.icon;\n              return (\n                <div key={type} className=\"flex items-center gap-2\">\n                  <div className={cn('h-4 w-4 rounded-full', config.color)} />\n                  <span className=\"text-sm\">{config.label}</span>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Event Dialog - Only load when needed */}\n      {eventDialogOpen && (\n        <LazyEventDialog\n          open={eventDialogOpen}\n          onOpenChange={setEventDialogOpen}\n          event={selectedEvent}\n          initialDate={selectedDate || undefined}\n          onSuccess={loadEvents}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default function CalendarPage() {\n  return (\n    <AdminProvider>\n      <CalendarPageContent />\n    </AdminProvider>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"warning","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[10975,10985],"sourceCode":"'use client';\n\nimport { addMonths } from 'date-fns/addMonths';\nimport { eachDayOfInterval } from 'date-fns/eachDayOfInterval';\nimport { endOfMonth } from 'date-fns/endOfMonth';\nimport { endOfWeek } from 'date-fns/endOfWeek';\n// Optimize date-fns imports by importing only what we need\nimport { format } from 'date-fns/format';\nimport { isSameDay } from 'date-fns/isSameDay';\nimport { isSameMonth } from 'date-fns/isSameMonth';\nimport { isToday } from 'date-fns/isToday';\nimport { startOfMonth } from 'date-fns/startOfMonth';\nimport { startOfWeek } from 'date-fns/startOfWeek';\nimport { subMonths } from 'date-fns/subMonths';\nimport {\n  ArrowLeft,\n  Calendar as CalendarIcon,\n  ChevronLeft,\n  ChevronRight,\n  Clock,\n  Coffee,\n  MapPin,\n  MoreVertical,\n  Palmtree,\n  Plus,\n  Trophy,\n  Users,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { useSearchParams } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { LazyEventDialog } from '@/components/lazy';\nimport { CalendarSkeleton } from '@/components/loading/calendar-skeleton';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { AdminProvider, useAdmin } from '@/hooks/use-admin';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { type CalendarEvent, calendarService } from '@/lib/firebase-admin';\nimport { cn } from '@/lib/utils';\n\nconst eventTypeConfig = {\n  class: { icon: Users, color: 'bg-blue-500', label: 'Class' },\n  competition: { icon: Trophy, color: 'bg-purple-500', label: 'Competition' },\n  meeting: { icon: Coffee, color: 'bg-green-500', label: 'Meeting' },\n  holiday: { icon: Palmtree, color: 'bg-orange-500', label: 'Holiday' },\n  other: { icon: CalendarIcon, color: 'bg-gray-500', label: 'Other' },\n};\n\nfunction CalendarPageContent() {\n  const searchParams = useSearchParams();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n  const [events, setEvents] = useState<CalendarEvent[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [view, setView] = useState<'month' | 'week' | 'day'>('month');\n  const [eventDialogOpen, setEventDialogOpen] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);\n  const { user } = useAuth();\n  const { isAdmin } = useAdmin();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadEvents();\n  }, [loadEvents]);\n\n  useEffect(() => {\n    // Handle navigation from upcoming events\n    const eventDate = searchParams.get('date');\n    const eventId = searchParams.get('eventId');\n\n    if (eventDate) {\n      const date = new Date(eventDate);\n      setCurrentDate(date);\n      setSelectedDate(date);\n\n      // Scroll to selected date section after render\n      setTimeout(() => {\n        const selectedDateElement = document.getElementById('selected-date-events');\n        if (selectedDateElement) {\n          selectedDateElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n      }, 500);\n    }\n  }, [searchParams]);\n\n  async function loadEvents() {\n    try {\n      const start = startOfMonth(currentDate);\n      const end = endOfMonth(currentDate);\n      const data = await calendarService.getEvents(start, end);\n      setEvents(data);\n    } catch (error) {\n      console.error('Error loading events:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n  const calendarStart = startOfWeek(monthStart);\n  const calendarEnd = endOfWeek(monthEnd);\n  const calendarDays = eachDayOfInterval({ start: calendarStart, end: calendarEnd });\n\n  const previousMonth = () => setCurrentDate(subMonths(currentDate, 1));\n  const nextMonth = () => setCurrentDate(addMonths(currentDate, 1));\n  const goToToday = () => setCurrentDate(new Date());\n\n  const getEventsForDay = (day: Date) => {\n    return events.filter((event) => {\n      const eventDate = new Date(event.startDate);\n      return isSameDay(eventDate, day);\n    });\n  };\n\n  const handleAddEvent = () => {\n    setSelectedEvent(null);\n    setEventDialogOpen(true);\n  };\n\n  const handleEditEvent = (event: CalendarEvent) => {\n    setSelectedEvent(event);\n    setEventDialogOpen(true);\n  };\n\n  const handleDeleteEvent = async (eventId: string) => {\n    if (!user || !window.confirm('Are you sure you want to delete this event?')) return;\n\n    try {\n      await calendarService.delete(eventId, user.uid, user.displayName || user.email || 'Unknown');\n      toast({\n        title: 'Event deleted',\n        description: 'The event has been removed from the calendar.',\n      });\n      loadEvents();\n    } catch (error) {\n      console.error('Error deleting event:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to delete event. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto max-w-7xl space-y-6 px-4 py-6\">\n        <Skeleton className=\"h-10 w-64\" />\n        <CalendarSkeleton />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-7xl space-y-4 p-4 sm:space-y-6 sm:p-6\">\n      <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <div className=\"mb-2 flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"sm\" asChild className=\"sm:hidden\">\n              <Link href=\"/dashboard\">\n                <ArrowLeft className=\"h-4 w-4\" />\n              </Link>\n            </Button>\n            <h1 className=\"text-2xl font-bold sm:text-3xl\">Calendar</h1>\n          </div>\n          <p className=\"text-muted-foreground text-sm sm:text-base\">\n            View upcoming classes, competitions, and events\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"ghost\" asChild className=\"hidden sm:inline-flex\">\n            <Link href=\"/dashboard\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back\n            </Link>\n          </Button>\n          {isAdmin && (\n            <Button onClick={handleAddEvent} size=\"sm\" className=\"sm:size-default\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Add Event</span>\n              <span className=\"sm:hidden\">Add</span>\n            </Button>\n          )}\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader className=\"pb-3 sm:pb-6\">\n          <div className=\"flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between\">\n            <CardTitle className=\"text-xl sm:text-2xl\">\n              {format(currentDate, 'MMMM yyyy')}\n            </CardTitle>\n            <div className=\"flex items-center gap-1 sm:gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={goToToday}\n                className=\"text-xs sm:text-sm\"\n              >\n                Today\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={previousMonth}\n                className=\"h-8 w-8 sm:h-9 sm:w-9\"\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={nextMonth}\n                className=\"h-8 w-8 sm:h-9 sm:w-9\"\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {/* Calendar Grid */}\n          <div className=\"bg-muted grid grid-cols-7 gap-px overflow-hidden rounded-lg\">\n            {/* Day Headers */}\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\n              <div\n                key={day}\n                className=\"bg-background text-muted-foreground p-1 text-center text-xs font-medium sm:p-2 sm:text-sm\"\n              >\n                <span className=\"sm:hidden\">{day.slice(0, 1)}</span>\n                <span className=\"hidden sm:inline\">{day}</span>\n              </div>\n            ))}\n\n            {/* Calendar Days */}\n            {calendarDays.map((day, index) => {\n              const dayEvents = getEventsForDay(day);\n              const isCurrentMonth = isSameMonth(day, currentDate);\n              const isSelectedDay = selectedDate && isSameDay(day, selectedDate);\n              const isTodayDate = isToday(day);\n\n              return (\n                <div\n                  key={index}\n                  onClick={() => setSelectedDate(day)}\n                  className={cn(\n                    'bg-background hover:bg-muted/50 min-h-[60px] cursor-pointer p-1 transition-colors sm:min-h-[100px] sm:p-2',\n                    !isCurrentMonth && 'text-muted-foreground bg-muted/30',\n                    isSelectedDay && 'ring-primary ring-2',\n                    isTodayDate && 'bg-primary/5'\n                  )}\n                >\n                  <div className=\"mb-1 flex items-start justify-between\">\n                    <span\n                      className={cn(\n                        'text-xs font-medium sm:text-sm',\n                        isTodayDate &&\n                          'bg-primary text-primary-foreground flex h-5 w-5 items-center justify-center rounded-full text-[10px] sm:h-7 sm:w-7 sm:text-xs'\n                      )}\n                    >\n                      {format(day, 'd')}\n                    </span>\n                  </div>\n\n                  {/* Event Dots - Mobile */}\n                  <div className=\"sm:hidden\">\n                    {dayEvents.length > 0 && (\n                      <div className=\"flex gap-0.5\">\n                        {dayEvents.slice(0, 3).map((event, idx) => {\n                          const config = eventTypeConfig[event.type];\n                          return (\n                            <div\n                              key={idx}\n                              className={cn('h-1.5 w-1.5 rounded-full', config.color)}\n                            />\n                          );\n                        })}\n                        {dayEvents.length > 3 && (\n                          <span className=\"text-muted-foreground ml-0.5 text-[8px]\">\n                            +{dayEvents.length - 3}\n                          </span>\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Event List - Desktop */}\n                  <div className=\"hidden space-y-1 sm:block\">\n                    {dayEvents.slice(0, 3).map((event, eventIndex) => {\n                      const config = eventTypeConfig[event.type];\n                      return (\n                        <div key={eventIndex} className=\"flex items-center gap-1\">\n                          <div className={cn('h-2 w-2 flex-shrink-0 rounded-full', config.color)} />\n                          <span className=\"truncate text-xs\">{event.title}</span>\n                        </div>\n                      );\n                    })}\n                    {dayEvents.length > 3 && (\n                      <span className=\"text-muted-foreground text-xs\">\n                        +{dayEvents.length - 3} more\n                      </span>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Selected Day Events */}\n      {selectedDate && (\n        <Card id=\"selected-date-events\">\n          <CardHeader>\n            <CardTitle>Events on {format(selectedDate, 'MMMM d, yyyy')}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {getEventsForDay(selectedDate).length === 0 ? (\n              <p className=\"text-muted-foreground py-8 text-center\">\n                No events scheduled for this day\n              </p>\n            ) : (\n              <div className=\"space-y-4\">\n                {getEventsForDay(selectedDate).map((event) => {\n                  const config = eventTypeConfig[event.type];\n                  const Icon = config.icon;\n\n                  return (\n                    <div key={event.id} className=\"flex items-start gap-4 rounded-lg border p-4\">\n                      <div className={cn('rounded-lg p-2', config.color, 'bg-opacity-20')}>\n                        <Icon className={cn('h-5 w-5', config.color.replace('bg-', 'text-'))} />\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h3 className=\"font-semibold\">{event.title}</h3>\n                            <div className=\"text-muted-foreground mt-1 flex items-center gap-4 text-sm\">\n                              {!event.allDay && (\n                                <span className=\"flex items-center gap-1\">\n                                  <Clock className=\"h-3 w-3\" />\n                                  {format(new Date(event.startDate), 'h:mm a')}\n                                  {event.endDate &&\n                                    ` - ${format(new Date(event.endDate), 'h:mm a')}`}\n                                </span>\n                              )}\n                              {event.location && (\n                                <span className=\"flex items-center gap-1\">\n                                  <MapPin className=\"h-3 w-3\" />\n                                  {event.location}\n                                </span>\n                              )}\n                            </div>\n                            {event.description && (\n                              <p className=\"text-muted-foreground mt-2 text-sm\">\n                                {event.description}\n                              </p>\n                            )}\n                          </div>\n                          {isAdmin && (\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\">\n                                  <MoreVertical className=\"h-4 w-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem onClick={() => handleEditEvent(event)}>\n                                  Edit\n                                </DropdownMenuItem>\n                                <DropdownMenuItem\n                                  className=\"text-destructive\"\n                                  onClick={() => handleDeleteEvent(event.id)}\n                                >\n                                  Delete\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Event Type Legend */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Event Types</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-4\">\n            {Object.entries(eventTypeConfig).map(([type, config]) => {\n              const Icon = config.icon;\n              return (\n                <div key={type} className=\"flex items-center gap-2\">\n                  <div className={cn('h-4 w-4 rounded-full', config.color)} />\n                  <span className=\"text-sm\">{config.label}</span>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Event Dialog - Only load when needed */}\n      {eventDialogOpen && (\n        <LazyEventDialog\n          open={eventDialogOpen}\n          onOpenChange={setEventDialogOpen}\n          event={selectedEvent}\n          initialDate={selectedDate || undefined}\n          onSuccess={loadEvents}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default function CalendarPage() {\n  return (\n    <AdminProvider>\n      <CalendarPageContent />\n    </AdminProvider>\n  );\n}\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/calendar/page.tsx"},"span":[11123,11133],"sourceCode":"'use client';\n\nimport { addMonths } from 'date-fns/addMonths';\nimport { eachDayOfInterval } from 'date-fns/eachDayOfInterval';\nimport { endOfMonth } from 'date-fns/endOfMonth';\nimport { endOfWeek } from 'date-fns/endOfWeek';\n// Optimize date-fns imports by importing only what we need\nimport { format } from 'date-fns/format';\nimport { isSameDay } from 'date-fns/isSameDay';\nimport { isSameMonth } from 'date-fns/isSameMonth';\nimport { isToday } from 'date-fns/isToday';\nimport { startOfMonth } from 'date-fns/startOfMonth';\nimport { startOfWeek } from 'date-fns/startOfWeek';\nimport { subMonths } from 'date-fns/subMonths';\nimport {\n  ArrowLeft,\n  Calendar as CalendarIcon,\n  ChevronLeft,\n  ChevronRight,\n  Clock,\n  Coffee,\n  MapPin,\n  MoreVertical,\n  Palmtree,\n  Plus,\n  Trophy,\n  Users,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { useSearchParams } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { LazyEventDialog } from '@/components/lazy';\nimport { CalendarSkeleton } from '@/components/loading/calendar-skeleton';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { AdminProvider, useAdmin } from '@/hooks/use-admin';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { type CalendarEvent, calendarService } from '@/lib/firebase-admin';\nimport { cn } from '@/lib/utils';\n\nconst eventTypeConfig = {\n  class: { icon: Users, color: 'bg-blue-500', label: 'Class' },\n  competition: { icon: Trophy, color: 'bg-purple-500', label: 'Competition' },\n  meeting: { icon: Coffee, color: 'bg-green-500', label: 'Meeting' },\n  holiday: { icon: Palmtree, color: 'bg-orange-500', label: 'Holiday' },\n  other: { icon: CalendarIcon, color: 'bg-gray-500', label: 'Other' },\n};\n\nfunction CalendarPageContent() {\n  const searchParams = useSearchParams();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n  const [events, setEvents] = useState<CalendarEvent[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [view, setView] = useState<'month' | 'week' | 'day'>('month');\n  const [eventDialogOpen, setEventDialogOpen] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);\n  const { user } = useAuth();\n  const { isAdmin } = useAdmin();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadEvents();\n  }, [loadEvents]);\n\n  useEffect(() => {\n    // Handle navigation from upcoming events\n    const eventDate = searchParams.get('date');\n    const eventId = searchParams.get('eventId');\n\n    if (eventDate) {\n      const date = new Date(eventDate);\n      setCurrentDate(date);\n      setSelectedDate(date);\n\n      // Scroll to selected date section after render\n      setTimeout(() => {\n        const selectedDateElement = document.getElementById('selected-date-events');\n        if (selectedDateElement) {\n          selectedDateElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n      }, 500);\n    }\n  }, [searchParams]);\n\n  async function loadEvents() {\n    try {\n      const start = startOfMonth(currentDate);\n      const end = endOfMonth(currentDate);\n      const data = await calendarService.getEvents(start, end);\n      setEvents(data);\n    } catch (error) {\n      console.error('Error loading events:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n  const calendarStart = startOfWeek(monthStart);\n  const calendarEnd = endOfWeek(monthEnd);\n  const calendarDays = eachDayOfInterval({ start: calendarStart, end: calendarEnd });\n\n  const previousMonth = () => setCurrentDate(subMonths(currentDate, 1));\n  const nextMonth = () => setCurrentDate(addMonths(currentDate, 1));\n  const goToToday = () => setCurrentDate(new Date());\n\n  const getEventsForDay = (day: Date) => {\n    return events.filter((event) => {\n      const eventDate = new Date(event.startDate);\n      return isSameDay(eventDate, day);\n    });\n  };\n\n  const handleAddEvent = () => {\n    setSelectedEvent(null);\n    setEventDialogOpen(true);\n  };\n\n  const handleEditEvent = (event: CalendarEvent) => {\n    setSelectedEvent(event);\n    setEventDialogOpen(true);\n  };\n\n  const handleDeleteEvent = async (eventId: string) => {\n    if (!user || !window.confirm('Are you sure you want to delete this event?')) return;\n\n    try {\n      await calendarService.delete(eventId, user.uid, user.displayName || user.email || 'Unknown');\n      toast({\n        title: 'Event deleted',\n        description: 'The event has been removed from the calendar.',\n      });\n      loadEvents();\n    } catch (error) {\n      console.error('Error deleting event:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to delete event. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto max-w-7xl space-y-6 px-4 py-6\">\n        <Skeleton className=\"h-10 w-64\" />\n        <CalendarSkeleton />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-7xl space-y-4 p-4 sm:space-y-6 sm:p-6\">\n      <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <div className=\"mb-2 flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"sm\" asChild className=\"sm:hidden\">\n              <Link href=\"/dashboard\">\n                <ArrowLeft className=\"h-4 w-4\" />\n              </Link>\n            </Button>\n            <h1 className=\"text-2xl font-bold sm:text-3xl\">Calendar</h1>\n          </div>\n          <p className=\"text-muted-foreground text-sm sm:text-base\">\n            View upcoming classes, competitions, and events\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"ghost\" asChild className=\"hidden sm:inline-flex\">\n            <Link href=\"/dashboard\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back\n            </Link>\n          </Button>\n          {isAdmin && (\n            <Button onClick={handleAddEvent} size=\"sm\" className=\"sm:size-default\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Add Event</span>\n              <span className=\"sm:hidden\">Add</span>\n            </Button>\n          )}\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader className=\"pb-3 sm:pb-6\">\n          <div className=\"flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between\">\n            <CardTitle className=\"text-xl sm:text-2xl\">\n              {format(currentDate, 'MMMM yyyy')}\n            </CardTitle>\n            <div className=\"flex items-center gap-1 sm:gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={goToToday}\n                className=\"text-xs sm:text-sm\"\n              >\n                Today\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={previousMonth}\n                className=\"h-8 w-8 sm:h-9 sm:w-9\"\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={nextMonth}\n                className=\"h-8 w-8 sm:h-9 sm:w-9\"\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {/* Calendar Grid */}\n          <div className=\"bg-muted grid grid-cols-7 gap-px overflow-hidden rounded-lg\">\n            {/* Day Headers */}\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\n              <div\n                key={day}\n                className=\"bg-background text-muted-foreground p-1 text-center text-xs font-medium sm:p-2 sm:text-sm\"\n              >\n                <span className=\"sm:hidden\">{day.slice(0, 1)}</span>\n                <span className=\"hidden sm:inline\">{day}</span>\n              </div>\n            ))}\n\n            {/* Calendar Days */}\n            {calendarDays.map((day, index) => {\n              const dayEvents = getEventsForDay(day);\n              const isCurrentMonth = isSameMonth(day, currentDate);\n              const isSelectedDay = selectedDate && isSameDay(day, selectedDate);\n              const isTodayDate = isToday(day);\n\n              return (\n                <div\n                  key={index}\n                  onClick={() => setSelectedDate(day)}\n                  className={cn(\n                    'bg-background hover:bg-muted/50 min-h-[60px] cursor-pointer p-1 transition-colors sm:min-h-[100px] sm:p-2',\n                    !isCurrentMonth && 'text-muted-foreground bg-muted/30',\n                    isSelectedDay && 'ring-primary ring-2',\n                    isTodayDate && 'bg-primary/5'\n                  )}\n                >\n                  <div className=\"mb-1 flex items-start justify-between\">\n                    <span\n                      className={cn(\n                        'text-xs font-medium sm:text-sm',\n                        isTodayDate &&\n                          'bg-primary text-primary-foreground flex h-5 w-5 items-center justify-center rounded-full text-[10px] sm:h-7 sm:w-7 sm:text-xs'\n                      )}\n                    >\n                      {format(day, 'd')}\n                    </span>\n                  </div>\n\n                  {/* Event Dots - Mobile */}\n                  <div className=\"sm:hidden\">\n                    {dayEvents.length > 0 && (\n                      <div className=\"flex gap-0.5\">\n                        {dayEvents.slice(0, 3).map((event, idx) => {\n                          const config = eventTypeConfig[event.type];\n                          return (\n                            <div\n                              key={idx}\n                              className={cn('h-1.5 w-1.5 rounded-full', config.color)}\n                            />\n                          );\n                        })}\n                        {dayEvents.length > 3 && (\n                          <span className=\"text-muted-foreground ml-0.5 text-[8px]\">\n                            +{dayEvents.length - 3}\n                          </span>\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Event List - Desktop */}\n                  <div className=\"hidden space-y-1 sm:block\">\n                    {dayEvents.slice(0, 3).map((event, eventIndex) => {\n                      const config = eventTypeConfig[event.type];\n                      return (\n                        <div key={eventIndex} className=\"flex items-center gap-1\">\n                          <div className={cn('h-2 w-2 flex-shrink-0 rounded-full', config.color)} />\n                          <span className=\"truncate text-xs\">{event.title}</span>\n                        </div>\n                      );\n                    })}\n                    {dayEvents.length > 3 && (\n                      <span className=\"text-muted-foreground text-xs\">\n                        +{dayEvents.length - 3} more\n                      </span>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Selected Day Events */}\n      {selectedDate && (\n        <Card id=\"selected-date-events\">\n          <CardHeader>\n            <CardTitle>Events on {format(selectedDate, 'MMMM d, yyyy')}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {getEventsForDay(selectedDate).length === 0 ? (\n              <p className=\"text-muted-foreground py-8 text-center\">\n                No events scheduled for this day\n              </p>\n            ) : (\n              <div className=\"space-y-4\">\n                {getEventsForDay(selectedDate).map((event) => {\n                  const config = eventTypeConfig[event.type];\n                  const Icon = config.icon;\n\n                  return (\n                    <div key={event.id} className=\"flex items-start gap-4 rounded-lg border p-4\">\n                      <div className={cn('rounded-lg p-2', config.color, 'bg-opacity-20')}>\n                        <Icon className={cn('h-5 w-5', config.color.replace('bg-', 'text-'))} />\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h3 className=\"font-semibold\">{event.title}</h3>\n                            <div className=\"text-muted-foreground mt-1 flex items-center gap-4 text-sm\">\n                              {!event.allDay && (\n                                <span className=\"flex items-center gap-1\">\n                                  <Clock className=\"h-3 w-3\" />\n                                  {format(new Date(event.startDate), 'h:mm a')}\n                                  {event.endDate &&\n                                    ` - ${format(new Date(event.endDate), 'h:mm a')}`}\n                                </span>\n                              )}\n                              {event.location && (\n                                <span className=\"flex items-center gap-1\">\n                                  <MapPin className=\"h-3 w-3\" />\n                                  {event.location}\n                                </span>\n                              )}\n                            </div>\n                            {event.description && (\n                              <p className=\"text-muted-foreground mt-2 text-sm\">\n                                {event.description}\n                              </p>\n                            )}\n                          </div>\n                          {isAdmin && (\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\">\n                                  <MoreVertical className=\"h-4 w-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem onClick={() => handleEditEvent(event)}>\n                                  Edit\n                                </DropdownMenuItem>\n                                <DropdownMenuItem\n                                  className=\"text-destructive\"\n                                  onClick={() => handleDeleteEvent(event.id)}\n                                >\n                                  Delete\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Event Type Legend */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Event Types</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-4\">\n            {Object.entries(eventTypeConfig).map(([type, config]) => {\n              const Icon = config.icon;\n              return (\n                <div key={type} className=\"flex items-center gap-2\">\n                  <div className={cn('h-4 w-4 rounded-full', config.color)} />\n                  <span className=\"text-sm\">{config.label}</span>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Event Dialog - Only load when needed */}\n      {eventDialogOpen && (\n        <LazyEventDialog\n          open={eventDialogOpen}\n          onOpenChange={setEventDialogOpen}\n          event={selectedEvent}\n          initialDate={selectedDate || undefined}\n          onSuccess={loadEvents}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default function CalendarPage() {\n  return (\n    <AdminProvider>\n      <CalendarPageContent />\n    </AdminProvider>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/a11y/noSvgWithoutTitle","severity":"warning","description":"Alternative text title element cannot be empty","message":[{"elements":[],"content":"Alternative text "},{"elements":["Emphasis"],"content":"title"},{"elements":[],"content":" element cannot be empty"}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"For accessibility purposes, "},{"elements":["Emphasis"],"content":"SVGs"},{"elements":[],"content":" should have an alternative text, provided via "},{"elements":["Emphasis"],"content":"title"},{"elements":[],"content":" element. If the svg element has role=\"img\", you should add the "},{"elements":["Emphasis"],"content":"aria-label"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"aria-labelledby"},{"elements":[],"content":" attribute."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/dashboard/layout.tsx"},"span":[953,1229],"sourceCode":"'use client';\n\nimport { doc, getDoc } from 'firebase/firestore';\nimport { Bell, Calendar, Home, Settings, Shield } from 'lucide-react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { DashboardHeader } from '@/components/dashboard-header';\nimport { ProfileCompletionCheck } from '@/components/profile-completion-check';\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarHeader,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarProvider,\n  SidebarRail,\n  useSidebar,\n} from '@/components/ui/sidebar';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useIsMobile } from '@/hooks/use-mobile';\nimport { db } from '@/lib/firebase';\n\nfunction HehLogo() {\n  const { state } = useSidebar();\n  return (\n    <Link href=\"/dashboard\" className=\"flex items-center gap-2 px-2\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        className=\"text-sidebar-primary h-8 w-8 shrink-0\"\n      >\n        <path d=\"M12 2L2 7l10 5 10-5-10-5z\" />\n        <path d=\"M2 17l10 5 10-5\" />\n        <path d=\"M2 12l10 5 10-5\" />\n      </svg>\n      <h1 className=\"text-sidebar-foreground text-lg font-bold transition-opacity duration-200 group-data-[collapsible=icon]:w-0 group-data-[collapsible=icon]:opacity-0\">\n        Guardian Portal\n      </h1>\n    </Link>\n  );\n}\n\nfunction MobileAwareSidebarMenuButton({\n  href,\n  children,\n  ...props\n}: {\n  href: string;\n  children: React.ReactNode;\n  isActive?: boolean;\n  tooltip?: string;\n}) {\n  const { setOpenMobile } = useSidebar();\n  const isMobile = useIsMobile();\n\n  const handleClick = () => {\n    if (isMobile) {\n      setOpenMobile(false);\n    }\n  };\n\n  return (\n    <SidebarMenuButton asChild {...props}>\n      <Link href={href} onClick={handleClick}>\n        {children}\n      </Link>\n    </SidebarMenuButton>\n  );\n}\n\nexport default function DashboardLayout({ children }: { children: React.ReactNode }) {\n  const { user, loading } = useAuth();\n  const router = useRouter();\n  const [isAdmin, setIsAdmin] = useState(false);\n  const isMobile = useIsMobile();\n\n  useEffect(() => {\n    if (!user && !loading) {\n      router.push('/');\n    }\n  }, [user, loading, router]);\n\n  useEffect(() => {\n    async function checkAdmin() {\n      if (user) {\n        try {\n          const adminDoc = await getDoc(doc(db, 'admins', user.uid));\n          setIsAdmin(adminDoc.exists());\n        } catch (error) {\n          console.error('Error checking admin status:', error);\n          setIsAdmin(false);\n        }\n      }\n    }\n    checkAdmin();\n  }, [user]);\n\n  if (loading) {\n    return (\n      <div className=\"flex h-screen\">\n        <div className=\"w-64\">\n          <Skeleton className=\"h-full w-full\" />\n        </div>\n        <div className=\"flex-1\">\n          <Skeleton className=\"h-16 w-full\" />\n          <Skeleton className=\"h-full w-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    router.push('/');\n    return null;\n  }\n\n  return (\n    <SidebarProvider defaultOpen={!isMobile}>\n      <Sidebar collapsible=\"icon\">\n        <SidebarHeader>\n          <HehLogo />\n        </SidebarHeader>\n        <SidebarContent>\n          <SidebarMenu>\n            <SidebarMenuItem>\n              <MobileAwareSidebarMenuButton href=\"/dashboard\" isActive tooltip=\"Dashboard\">\n                <Home />\n                <span>Home</span>\n              </MobileAwareSidebarMenuButton>\n            </SidebarMenuItem>\n            <SidebarMenuItem>\n              <MobileAwareSidebarMenuButton href=\"/calendar\" tooltip=\"Calendar\">\n                <Calendar />\n                <span>Calendar</span>\n              </MobileAwareSidebarMenuButton>\n            </SidebarMenuItem>\n            <SidebarMenuItem>\n              <MobileAwareSidebarMenuButton href=\"/announcements\" tooltip=\"Announcements\">\n                <Bell />\n                <span>Announcements</span>\n              </MobileAwareSidebarMenuButton>\n            </SidebarMenuItem>\n            {isAdmin && (\n              <SidebarMenuItem>\n                <MobileAwareSidebarMenuButton href=\"/admin/dashboard\" tooltip=\"Admin\">\n                  <Shield />\n                  <span>Admin</span>\n                </MobileAwareSidebarMenuButton>\n              </SidebarMenuItem>\n            )}\n          </SidebarMenu>\n        </SidebarContent>\n        <SidebarFooter>\n          <SidebarMenu>\n            <SidebarMenuItem>\n              <MobileAwareSidebarMenuButton href=\"/settings\" tooltip=\"Settings\">\n                <Settings />\n                <span>Settings</span>\n              </MobileAwareSidebarMenuButton>\n            </SidebarMenuItem>\n          </SidebarMenu>\n        </SidebarFooter>\n        <SidebarRail />\n      </Sidebar>\n      <SidebarInset>\n        <DashboardHeader />\n        <div className=\"flex-1 overflow-y-auto p-4 sm:p-6 lg:p-8\">\n          <ProfileCompletionCheck>{children}</ProfileCompletionCheck>\n        </div>\n      </SidebarInset>\n    </SidebarProvider>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useExhaustiveDependencies","severity":"warning","description":"loadAllAnnouncements changes on every re-render and should not be used as a hook dependency.","message":[{"elements":["Emphasis"],"content":"loadAllAnnouncements"},{"elements":[],"content":" changes on every re-render and should not be used as a hook dependency."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"To fix this, wrap the definition of "},{"elements":["Emphasis"],"content":"loadAllAnnouncements"},{"elements":[],"content":" in its own "},{"elements":["Emphasis"],"content":"useCallback()"},{"elements":[],"content":" hook."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/debug-announcements/page.tsx"},"span":[456,476],"sourceCode":"'use client';\n\nimport { collection, getDocs } from 'firebase/firestore';\nimport { useEffect, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { db } from '@/lib/firebase';\n\nexport default function DebugAnnouncementsPage() {\n  const [announcements, setAnnouncements] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadAllAnnouncements();\n  }, [loadAllAnnouncements]);\n\n  async function loadAllAnnouncements() {\n    try {\n      // Get ALL announcements without any filters\n      const snapshot = await getDocs(collection(db, 'announcements'));\n      const data = snapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n        _raw: JSON.stringify(doc.data(), null, 2),\n      }));\n      setAnnouncements(data);\n      console.log('All announcements:', data);\n    } catch (error) {\n      console.error('Error loading announcements:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  if (loading) return <div>Loading...</div>;\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <h1 className=\"mb-4 text-2xl font-bold\">Debug: All Announcements ({announcements.length})</h1>\n\n      <div className=\"space-y-4\">\n        {announcements.map((announcement) => (\n          <Card key={announcement.id}>\n            <CardHeader>\n              <CardTitle>ID: {announcement.id}</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <pre className=\"overflow-auto rounded bg-gray-100 p-4 text-xs\">\n                {announcement._raw}\n              </pre>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noDocumentCookie","severity":"warning","description":"Direct assigning to document.cookie is not recommended.","message":[{"elements":[],"content":"Direct assigning to "},{"elements":["Emphasis"],"content":"document.cookie"},{"elements":[],"content":" is not recommended."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Consider using the "},{"elements":[{"Hyperlink":{"href":"https://developer.mozilla.org/en-US/docs/Web/API/CookieStore"}}],"content":"Cookie Store API"},{"elements":[],"content":"."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/debug-auth-clear/page.tsx"},"span":[900,1023],"sourceCode":"'use client';\n\nimport { signOut } from 'firebase/auth';\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { auth } from '@/lib/firebase';\n\nexport default function DebugAuthClearPage() {\n  const [status, setStatus] = useState<string[]>([]);\n\n  const clearAuthState = async () => {\n    const newStatus = [...status];\n\n    try {\n      // Sign out from Firebase\n      await signOut(auth);\n      newStatus.push('✓ Signed out from Firebase Auth');\n\n      // Clear local storage\n      localStorage.clear();\n      newStatus.push('✓ Cleared localStorage');\n\n      // Clear session storage\n      sessionStorage.clear();\n      newStatus.push('✓ Cleared sessionStorage');\n\n      // Clear cookies (what we can)\n      document.cookie.split(';').forEach((c) => {\n        document.cookie = c\n          .replace(/^ +/, '')\n          .replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n      });\n      newStatus.push('✓ Cleared accessible cookies');\n\n      // Clear IndexedDB (Firebase uses this)\n      if ('indexedDB' in window) {\n        const databases = await indexedDB.databases();\n        databases.forEach((db) => {\n          if (db.name?.includes('firebase')) {\n            indexedDB.deleteDatabase(db.name);\n            newStatus.push(`✓ Cleared IndexedDB: ${db.name}`);\n          }\n        });\n      }\n\n      newStatus.push('✅ All auth state cleared! You can now try logging in again.');\n    } catch (error) {\n      newStatus.push(`❌ Error: ${error}`);\n    }\n\n    setStatus(newStatus);\n  };\n\n  return (\n    <div className=\"container mx-auto max-w-2xl p-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Clear Authentication State</CardTitle>\n          <CardDescription>\n            Use this tool to completely clear your authentication state when debugging login issues.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Button onClick={clearAuthState} size=\"lg\">\n            Clear All Auth State\n          </Button>\n\n          {status.length > 0 && (\n            <div className=\"mt-4 space-y-2\">\n              <h3 className=\"font-semibold\">Status:</h3>\n              {status.map((s, i) => (\n                <div key={i} className=\"font-mono text-sm\">\n                  {s}\n                </div>\n              ))}\n            </div>\n          )}\n\n          <div className=\"bg-muted mt-6 rounded-lg p-4\">\n            <h4 className=\"mb-2 font-semibold\">After clearing:</h4>\n            <ol className=\"list-inside list-decimal space-y-1 text-sm\">\n              <li>Close this tab</li>\n              <li>Open a new incognito/private window</li>\n              <li>Navigate to https://homerenrichment.com</li>\n              <li>Try logging in again</li>\n            </ol>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"warning","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[2306,2307],"sourceCode":"'use client';\n\nimport { signOut } from 'firebase/auth';\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { auth } from '@/lib/firebase';\n\nexport default function DebugAuthClearPage() {\n  const [status, setStatus] = useState<string[]>([]);\n\n  const clearAuthState = async () => {\n    const newStatus = [...status];\n\n    try {\n      // Sign out from Firebase\n      await signOut(auth);\n      newStatus.push('✓ Signed out from Firebase Auth');\n\n      // Clear local storage\n      localStorage.clear();\n      newStatus.push('✓ Cleared localStorage');\n\n      // Clear session storage\n      sessionStorage.clear();\n      newStatus.push('✓ Cleared sessionStorage');\n\n      // Clear cookies (what we can)\n      document.cookie.split(';').forEach((c) => {\n        document.cookie = c\n          .replace(/^ +/, '')\n          .replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n      });\n      newStatus.push('✓ Cleared accessible cookies');\n\n      // Clear IndexedDB (Firebase uses this)\n      if ('indexedDB' in window) {\n        const databases = await indexedDB.databases();\n        databases.forEach((db) => {\n          if (db.name?.includes('firebase')) {\n            indexedDB.deleteDatabase(db.name);\n            newStatus.push(`✓ Cleared IndexedDB: ${db.name}`);\n          }\n        });\n      }\n\n      newStatus.push('✅ All auth state cleared! You can now try logging in again.');\n    } catch (error) {\n      newStatus.push(`❌ Error: ${error}`);\n    }\n\n    setStatus(newStatus);\n  };\n\n  return (\n    <div className=\"container mx-auto max-w-2xl p-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Clear Authentication State</CardTitle>\n          <CardDescription>\n            Use this tool to completely clear your authentication state when debugging login issues.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Button onClick={clearAuthState} size=\"lg\">\n            Clear All Auth State\n          </Button>\n\n          {status.length > 0 && (\n            <div className=\"mt-4 space-y-2\">\n              <h3 className=\"font-semibold\">Status:</h3>\n              {status.map((s, i) => (\n                <div key={i} className=\"font-mono text-sm\">\n                  {s}\n                </div>\n              ))}\n            </div>\n          )}\n\n          <div className=\"bg-muted mt-6 rounded-lg p-4\">\n            <h4 className=\"mb-2 font-semibold\">After clearing:</h4>\n            <ol className=\"list-inside list-decimal space-y-1 text-sm\">\n              <li>Close this tab</li>\n              <li>Open a new incognito/private window</li>\n              <li>Navigate to https://homerenrichment.com</li>\n              <li>Try logging in again</li>\n            </ol>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/debug-auth-clear/page.tsx"},"span":[2340,2341],"sourceCode":"'use client';\n\nimport { signOut } from 'firebase/auth';\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { auth } from '@/lib/firebase';\n\nexport default function DebugAuthClearPage() {\n  const [status, setStatus] = useState<string[]>([]);\n\n  const clearAuthState = async () => {\n    const newStatus = [...status];\n\n    try {\n      // Sign out from Firebase\n      await signOut(auth);\n      newStatus.push('✓ Signed out from Firebase Auth');\n\n      // Clear local storage\n      localStorage.clear();\n      newStatus.push('✓ Cleared localStorage');\n\n      // Clear session storage\n      sessionStorage.clear();\n      newStatus.push('✓ Cleared sessionStorage');\n\n      // Clear cookies (what we can)\n      document.cookie.split(';').forEach((c) => {\n        document.cookie = c\n          .replace(/^ +/, '')\n          .replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n      });\n      newStatus.push('✓ Cleared accessible cookies');\n\n      // Clear IndexedDB (Firebase uses this)\n      if ('indexedDB' in window) {\n        const databases = await indexedDB.databases();\n        databases.forEach((db) => {\n          if (db.name?.includes('firebase')) {\n            indexedDB.deleteDatabase(db.name);\n            newStatus.push(`✓ Cleared IndexedDB: ${db.name}`);\n          }\n        });\n      }\n\n      newStatus.push('✅ All auth state cleared! You can now try logging in again.');\n    } catch (error) {\n      newStatus.push(`❌ Error: ${error}`);\n    }\n\n    setStatus(newStatus);\n  };\n\n  return (\n    <div className=\"container mx-auto max-w-2xl p-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Clear Authentication State</CardTitle>\n          <CardDescription>\n            Use this tool to completely clear your authentication state when debugging login issues.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Button onClick={clearAuthState} size=\"lg\">\n            Clear All Auth State\n          </Button>\n\n          {status.length > 0 && (\n            <div className=\"mt-4 space-y-2\">\n              <h3 className=\"font-semibold\">Status:</h3>\n              {status.map((s, i) => (\n                <div key={i} className=\"font-mono text-sm\">\n                  {s}\n                </div>\n              ))}\n            </div>\n          )}\n\n          <div className=\"bg-muted mt-6 rounded-lg p-4\">\n            <h4 className=\"mb-2 font-semibold\">After clearing:</h4>\n            <ol className=\"list-inside list-decimal space-y-1 text-sm\">\n              <li>Close this tab</li>\n              <li>Open a new incognito/private window</li>\n              <li>Navigate to https://homerenrichment.com</li>\n              <li>Try logging in again</li>\n            </ol>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useExhaustiveDependencies","severity":"warning","description":"checkIndexedDB changes on every re-render and should not be used as a hook dependency.","message":[{"elements":["Emphasis"],"content":"checkIndexedDB"},{"elements":[],"content":" changes on every re-render and should not be used as a hook dependency."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"To fix this, wrap the definition of "},{"elements":["Emphasis"],"content":"checkIndexedDB"},{"elements":[],"content":" in its own "},{"elements":["Emphasis"],"content":"useCallback()"},{"elements":[],"content":" hook."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/debug-auth/page.tsx"},"span":[1432,1446],"sourceCode":"'use client';\n\nimport { signOut } from 'firebase/auth';\nimport { useEffect, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { auth } from '@/lib/firebase';\n\nexport default function DebugAuthPage() {\n  const [authState, setAuthState] = useState<any>(null);\n  const [indexedDBData, setIndexedDBData] = useState<string>('');\n\n  const checkIndexedDB = async () => {\n    try {\n      const databases = await indexedDB.databases();\n      const firebaseDbs = databases.filter((db) => db.name?.includes('firebase'));\n      setIndexedDBData(JSON.stringify(firebaseDbs, null, 2));\n    } catch (error) {\n      setIndexedDBData(`Error checking IndexedDB: ${error}`);\n    }\n  };\n\n  useEffect(() => {\n    // Check current auth state\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      setAuthState({\n        user: user\n          ? {\n              uid: user.uid,\n              email: user.email,\n              displayName: user.displayName,\n              metadata: user.metadata,\n            }\n          : null,\n        currentUser: auth.currentUser\n          ? {\n              uid: auth.currentUser.uid,\n              email: auth.currentUser.email,\n            }\n          : null,\n      });\n    });\n\n    // Check IndexedDB for Firebase data\n    checkIndexedDB();\n\n    return () => unsubscribe();\n  }, [checkIndexedDB]);\n\n  const clearAllAuth = async () => {\n    try {\n      // Sign out from Firebase\n      await signOut(auth);\n\n      // Clear all localStorage\n      localStorage.clear();\n\n      // Clear all sessionStorage\n      sessionStorage.clear();\n\n      // Clear IndexedDB Firebase databases\n      const databases = await indexedDB.databases();\n      for (const db of databases) {\n        if (db.name?.includes('firebase')) {\n          await indexedDB.deleteDatabase(db.name);\n        }\n      }\n\n      // Reload the page\n      window.location.href = '/';\n    } catch (error) {\n      console.error('Error clearing auth:', error);\n      alert(`Error clearing auth: ${error}`);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto max-w-4xl p-4\">\n      <h1 className=\"mb-4 text-2xl font-bold\">Auth Debug Page</h1>\n\n      <Card className=\"mb-4\">\n        <CardHeader>\n          <CardTitle>Current Auth State</CardTitle>\n          <CardDescription>Firebase Auth current state</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <pre className=\"overflow-auto rounded bg-gray-100 p-4\">\n            {JSON.stringify(authState, null, 2)}\n          </pre>\n        </CardContent>\n      </Card>\n\n      <Card className=\"mb-4\">\n        <CardHeader>\n          <CardTitle>IndexedDB Firebase Databases</CardTitle>\n          <CardDescription>Persistent storage used by Firebase</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <pre className=\"overflow-auto rounded bg-gray-100 p-4\">{indexedDBData}</pre>\n        </CardContent>\n      </Card>\n\n      <Card className=\"mb-4\">\n        <CardHeader>\n          <CardTitle>LocalStorage Keys</CardTitle>\n          <CardDescription>Keys stored in localStorage</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <pre className=\"overflow-auto rounded bg-gray-100 p-4\">\n            {JSON.stringify(Object.keys(localStorage), null, 2)}\n          </pre>\n        </CardContent>\n      </Card>\n\n      <div className=\"flex gap-4\">\n        <Button onClick={clearAllAuth} variant=\"destructive\">\n          Clear All Auth Data & Sign Out\n        </Button>\n        <Button onClick={() => (window.location.href = '/')} variant=\"outline\">\n          Go to Login Page\n        </Button>\n        <Button onClick={() => (window.location.href = '/admin')} variant=\"outline\">\n          Try Admin Route\n        </Button>\n      </div>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useExhaustiveDependencies","severity":"warning","description":"loadProfile changes on every re-render and should not be used as a hook dependency.","message":[{"elements":["Emphasis"],"content":"loadProfile"},{"elements":[],"content":" changes on every re-render and should not be used as a hook dependency."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"To fix this, wrap the definition of "},{"elements":["Emphasis"],"content":"loadProfile"},{"elements":[],"content":" in its own "},{"elements":["Emphasis"],"content":"useCallback()"},{"elements":[],"content":" hook."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/profile/page.tsx"},"span":[3264,3275],"sourceCode":"'use client';\n\nimport { ArrowLeft, Camera, Mail, Phone, Save, User, Users } from 'lucide-react';\nimport Link from 'next/link';\nimport { useEffect, useState, useId } from 'react';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { profileService, type UserProfile } from '@/lib/firebase-admin';\n\n// Format phone number as user types\nfunction formatPhoneNumber(value: string): string {\n  // Remove all non-digit characters\n  const phoneNumber = value.replace(/\\D/g, '');\n\n  // Format based on length\n  if (phoneNumber.length <= 3) {\n    return phoneNumber;\n  } else if (phoneNumber.length <= 6) {\n    return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;\n  } else if (phoneNumber.length <= 10) {\n    return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6)}`;\n  } else {\n    // Handle numbers with country code\n    return `+${phoneNumber.slice(0, 1)} (${phoneNumber.slice(1, 4)}) ${phoneNumber.slice(4, 7)}-${phoneNumber.slice(7, 11)}`;\n  }\n}\n\nconst mathPersonalities = [\n  {\n    type: 'Visual Learner',\n    description:\n      'Learns best through diagrams, charts, and visual representations of mathematical concepts.',\n    icon: '👁',\n  },\n  {\n    type: 'Problem Solver',\n    description: 'Enjoys tackling challenging problems and finding creative solutions.',\n    icon: '🧩',\n  },\n  {\n    type: 'Pattern Seeker',\n    description: 'Excels at recognizing patterns and relationships in numbers and sequences.',\n    icon: '🔍',\n  },\n  {\n    type: 'Creative Thinker',\n    description: 'Approaches math with imagination and finds unique ways to solve problems.',\n    icon: '🎨',\n  },\n  {\n    type: 'Logical Analyst',\n    description: 'Thrives on step-by-step reasoning and systematic problem-solving approaches.',\n    icon: '🔬',\n  },\n];\n\nexport default function ProfilePage() {\n  const avatarUploadId = useId();\n  const guardianNameId = useId();\n  const displayNameId = useId();\n  const phoneId = useId();\n  const emailId = useId();\n  const bioId = useId();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [activeTab, setActiveTab] = useState('basic');\n\n  // Form state\n  const [formData, setFormData] = useState({\n    guardianName: '',\n    displayName: '',\n    email: '',\n    phone: '',\n    bio: '',\n    children: [] as { name: string; preferredName?: string; grade: string }[],\n  });\n\n  useEffect(() => {\n    if (user) {\n      loadProfile();\n    }\n  }, [user, loadProfile]);\n\n  async function loadProfile() {\n    if (!user) return;\n\n    try {\n      const data = await profileService.get(user.uid);\n      if (data) {\n        setProfile(data);\n        setFormData({\n          guardianName: data.guardianName || '',\n          displayName: data.displayName || data.guardianName || '',\n          email: data.email || user.email || '',\n          phone: data.phone || '',\n          bio: data.bio || '',\n          children: data.children || [],\n        });\n      } else {\n        // Initialize with user's email\n        setFormData((prev) => ({\n          ...prev,\n          email: user.email || '',\n        }));\n      }\n    } catch (error) {\n      console.error('Error loading profile:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load profile',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function handleSave() {\n    if (!user) return;\n\n    // Validate required fields\n    if (!formData.guardianName || !formData.email || !formData.phone) {\n      toast({\n        title: 'Missing Information',\n        description: 'Please fill in all required fields',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    // Validate children have names and grades if any children are added\n    for (const child of formData.children) {\n      if (!child.name || !child.grade) {\n        toast({\n          title: 'Missing Child Information',\n          description: 'Please provide name and grade for all children',\n          variant: 'destructive',\n        });\n        return;\n      }\n    }\n\n    setSaving(true);\n\n    try {\n      const profileData: any = {\n        guardianName: formData.guardianName,\n        displayName: formData.displayName || formData.guardianName,\n        email: formData.email,\n        phone: formData.phone,\n        bio: formData.bio || '',\n        children: formData.children,\n      };\n\n      if (profile) {\n        await profileService.update(user.uid, profileData);\n      } else {\n        await profileService.create(user.uid, profileData);\n      }\n\n      toast({\n        title: 'Success',\n        description: 'Profile saved successfully',\n      });\n\n      loadProfile();\n    } catch (error) {\n      console.error('Error saving profile:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to save profile',\n        variant: 'destructive',\n      });\n    } finally {\n      setSaving(false);\n    }\n  }\n\n  async function handleAvatarUpload(event: React.ChangeEvent<HTMLInputElement>) {\n    const file = event.target.files?.[0];\n    if (!file || !user) return;\n\n    try {\n      const avatarUrl = await profileService.uploadAvatar(user.uid, file);\n      await profileService.update(user.uid, { avatarUrl });\n      toast({\n        title: 'Success',\n        description: 'Avatar uploaded successfully',\n      });\n      loadProfile();\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to upload avatar',\n        variant: 'destructive',\n      });\n    }\n  }\n\n  function addChild() {\n    setFormData((prev) => ({\n      ...prev,\n      children: [...prev.children, { name: '', preferredName: '', grade: '' }],\n    }));\n  }\n\n  function removeChild(index: number) {\n    setFormData((prev) => ({\n      ...prev,\n      children: prev.children.filter((_, i) => i !== index),\n    }));\n  }\n\n  function updateChild(index: number, field: 'name' | 'preferredName' | 'grade', value: string) {\n    setFormData((prev) => ({\n      ...prev,\n      children: prev.children.map((child, i) =>\n        i === index ? { ...child, [field]: value } : child\n      ),\n    }));\n  }\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto max-w-4xl space-y-6 p-6\">\n        <Skeleton className=\"h-10 w-48\" />\n        <Skeleton className=\"h-96\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-4xl space-y-6 p-6\">\n      <div className=\"mb-6 flex items-center justify-between\">\n        <Button variant=\"ghost\" asChild>\n          <Link href=\"/dashboard\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Dashboard\n          </Link>\n        </Button>\n        <Button onClick={handleSave} disabled={saving}>\n          <Save className=\"mr-2 h-4 w-4\" />\n          {saving ? 'Saving...' : 'Save Changes'}\n        </Button>\n      </div>\n\n      <div>\n        <h1 className=\"text-3xl font-bold\">My Profile</h1>\n        <p className=\"text-muted-foreground\">Manage your account information and preferences</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-6\">\n            <div className=\"relative\">\n              <Avatar className=\"h-24 w-24\">\n                <AvatarImage\n                  src={\n                    profile?.avatarUrl ||\n                    `https://api.dicebear.com/7.x/initials/svg?seed=${user?.uid}`\n                  }\n                  alt={formData.guardianName}\n                />\n                <AvatarFallback>\n                  {formData.guardianName?.charAt(0) || user?.email?.charAt(0) || 'U'}\n                </AvatarFallback>\n              </Avatar>\n              <label htmlFor={avatarUploadId} className=\"absolute right-0 bottom-0 cursor-pointer\">\n                <div className=\"bg-primary text-primary-foreground rounded-full p-2\">\n                  <Camera className=\"h-4 w-4\" />\n                </div>\n                <input\n                  id={avatarUploadId}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  className=\"hidden\"\n                  onChange={handleAvatarUpload}\n                />\n              </label>\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold\">\n                {formData.displayName || formData.guardianName || 'Your Name'}\n              </h2>\n              <p className=\"text-muted-foreground\">{formData.email}</p>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"basic\">Basic Info</TabsTrigger>\n          <TabsTrigger value=\"children\">Children</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"basic\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Contact Information</CardTitle>\n              <CardDescription>Required information for program communications</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor={guardianNameId}>\n                    Guardian Name <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <div className=\"relative\">\n                    <User className=\"text-muted-foreground absolute top-2.5 left-3 h-4 w-4\" />\n                    <Input\n                      id={guardianNameId}\n                      placeholder=\"Your full name\"\n                      value={formData.guardianName}\n                      onChange={(e) =>\n                        setFormData((prev) => ({ ...prev, guardianName: e.target.value }))\n                      }\n                      className=\"pl-10\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor={displayNameId}>Display Name (Optional)</Label>\n                  <Input\n                    id={displayNameId}\n                    placeholder=\"How you'd like to be called\"\n                    value={formData.displayName}\n                    onChange={(e) =>\n                      setFormData((prev) => ({ ...prev, displayName: e.target.value }))\n                    }\n                  />\n                  <p className=\"text-muted-foreground text-xs\">Leave blank to use your full name</p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor={phoneId}>\n                    <Phone className=\"mr-1 inline h-4 w-4\" />\n                    Phone Number <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <Input\n                    id={phoneId}\n                    type=\"tel\"\n                    placeholder=\"(555) 123-4567\"\n                    value={formData.phone}\n                    onChange={(e) => {\n                      const formatted = formatPhoneNumber(e.target.value);\n                      setFormData((prev) => ({ ...prev, phone: formatted }));\n                    }}\n                    maxLength={14} // For format: (123) 456-7890\n                  />\n                  <p className=\"text-muted-foreground text-xs\">US phone number format</p>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor={emailId}>\n                  Email Address <span className=\"text-destructive\">*</span>\n                </Label>\n                <div className=\"relative\">\n                  <Mail className=\"text-muted-foreground absolute top-2.5 left-3 h-4 w-4\" />\n                  <Input\n                    id={emailId}\n                    type=\"email\"\n                    placeholder=\"your@email.com\"\n                    value={formData.email}\n                    onChange={(e) => setFormData((prev) => ({ ...prev, email: e.target.value }))}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor={bioId}>About You (Optional)</Label>\n                <Textarea\n                  id={bioId}\n                  placeholder=\"Tell other families a bit about yourself...\"\n                  value={formData.bio}\n                  onChange={(e) => setFormData((prev) => ({ ...prev, bio: e.target.value }))}\n                  rows={4}\n                />\n                <p className=\"text-muted-foreground text-sm\">\n                  This will be visible to other program participants\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"children\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Registered Children</CardTitle>\n              <CardDescription>\n                Add your children's names and what they prefer to be called\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {formData.children.map((child, index) => (\n                <div key={index} className=\"space-y-4 rounded-lg border p-4\">\n                  <div className=\"grid gap-4 md:grid-cols-3\">\n                    <div className=\"space-y-2\">\n                      <Label>\n                        Full Name <span className=\"text-destructive\">*</span>\n                      </Label>\n                      <Input\n                        placeholder=\"Child's full name\"\n                        value={child.name}\n                        onChange={(e) => updateChild(index, 'name', e.target.value)}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>Preferred Name</Label>\n                      <Input\n                        placeholder=\"What they like to be called\"\n                        value={child.preferredName || ''}\n                        onChange={(e) => updateChild(index, 'preferredName', e.target.value)}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>\n                        Grade <span className=\"text-destructive\">*</span>\n                      </Label>\n                      <Select\n                        value={child.grade || ''}\n                        onValueChange={(value) => updateChild(index, 'grade', value)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select grade\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"K\">Kindergarten</SelectItem>\n                          <SelectItem value=\"1\">1st Grade</SelectItem>\n                          <SelectItem value=\"2\">2nd Grade</SelectItem>\n                          <SelectItem value=\"3\">3rd Grade</SelectItem>\n                          <SelectItem value=\"4\">4th Grade</SelectItem>\n                          <SelectItem value=\"5\">5th Grade</SelectItem>\n                          <SelectItem value=\"6\">6th Grade</SelectItem>\n                          <SelectItem value=\"7\">7th Grade</SelectItem>\n                          <SelectItem value=\"8\">8th Grade</SelectItem>\n                          <SelectItem value=\"9\">9th Grade</SelectItem>\n                          <SelectItem value=\"10\">10th Grade</SelectItem>\n                          <SelectItem value=\"11\">11th Grade</SelectItem>\n                          <SelectItem value=\"12\">12th Grade</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-end\">\n                    <Button variant=\"outline\" size=\"sm\" onClick={() => removeChild(index)}>\n                      Remove Child\n                    </Button>\n                  </div>\n                </div>\n              ))}\n\n              <Button variant=\"outline\" onClick={addChild} className=\"w-full\">\n                <Users className=\"mr-2 h-4 w-4\" />\n                Add Child\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Math Personality tab removed - will be added to individual student profiles */}\n      </Tabs>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"warning","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[13942,13947],"sourceCode":"'use client';\n\nimport { ArrowLeft, Camera, Mail, Phone, Save, User, Users } from 'lucide-react';\nimport Link from 'next/link';\nimport { useEffect, useState, useId } from 'react';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { profileService, type UserProfile } from '@/lib/firebase-admin';\n\n// Format phone number as user types\nfunction formatPhoneNumber(value: string): string {\n  // Remove all non-digit characters\n  const phoneNumber = value.replace(/\\D/g, '');\n\n  // Format based on length\n  if (phoneNumber.length <= 3) {\n    return phoneNumber;\n  } else if (phoneNumber.length <= 6) {\n    return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;\n  } else if (phoneNumber.length <= 10) {\n    return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6)}`;\n  } else {\n    // Handle numbers with country code\n    return `+${phoneNumber.slice(0, 1)} (${phoneNumber.slice(1, 4)}) ${phoneNumber.slice(4, 7)}-${phoneNumber.slice(7, 11)}`;\n  }\n}\n\nconst mathPersonalities = [\n  {\n    type: 'Visual Learner',\n    description:\n      'Learns best through diagrams, charts, and visual representations of mathematical concepts.',\n    icon: '👁',\n  },\n  {\n    type: 'Problem Solver',\n    description: 'Enjoys tackling challenging problems and finding creative solutions.',\n    icon: '🧩',\n  },\n  {\n    type: 'Pattern Seeker',\n    description: 'Excels at recognizing patterns and relationships in numbers and sequences.',\n    icon: '🔍',\n  },\n  {\n    type: 'Creative Thinker',\n    description: 'Approaches math with imagination and finds unique ways to solve problems.',\n    icon: '🎨',\n  },\n  {\n    type: 'Logical Analyst',\n    description: 'Thrives on step-by-step reasoning and systematic problem-solving approaches.',\n    icon: '🔬',\n  },\n];\n\nexport default function ProfilePage() {\n  const avatarUploadId = useId();\n  const guardianNameId = useId();\n  const displayNameId = useId();\n  const phoneId = useId();\n  const emailId = useId();\n  const bioId = useId();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [activeTab, setActiveTab] = useState('basic');\n\n  // Form state\n  const [formData, setFormData] = useState({\n    guardianName: '',\n    displayName: '',\n    email: '',\n    phone: '',\n    bio: '',\n    children: [] as { name: string; preferredName?: string; grade: string }[],\n  });\n\n  useEffect(() => {\n    if (user) {\n      loadProfile();\n    }\n  }, [user, loadProfile]);\n\n  async function loadProfile() {\n    if (!user) return;\n\n    try {\n      const data = await profileService.get(user.uid);\n      if (data) {\n        setProfile(data);\n        setFormData({\n          guardianName: data.guardianName || '',\n          displayName: data.displayName || data.guardianName || '',\n          email: data.email || user.email || '',\n          phone: data.phone || '',\n          bio: data.bio || '',\n          children: data.children || [],\n        });\n      } else {\n        // Initialize with user's email\n        setFormData((prev) => ({\n          ...prev,\n          email: user.email || '',\n        }));\n      }\n    } catch (error) {\n      console.error('Error loading profile:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load profile',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function handleSave() {\n    if (!user) return;\n\n    // Validate required fields\n    if (!formData.guardianName || !formData.email || !formData.phone) {\n      toast({\n        title: 'Missing Information',\n        description: 'Please fill in all required fields',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    // Validate children have names and grades if any children are added\n    for (const child of formData.children) {\n      if (!child.name || !child.grade) {\n        toast({\n          title: 'Missing Child Information',\n          description: 'Please provide name and grade for all children',\n          variant: 'destructive',\n        });\n        return;\n      }\n    }\n\n    setSaving(true);\n\n    try {\n      const profileData: any = {\n        guardianName: formData.guardianName,\n        displayName: formData.displayName || formData.guardianName,\n        email: formData.email,\n        phone: formData.phone,\n        bio: formData.bio || '',\n        children: formData.children,\n      };\n\n      if (profile) {\n        await profileService.update(user.uid, profileData);\n      } else {\n        await profileService.create(user.uid, profileData);\n      }\n\n      toast({\n        title: 'Success',\n        description: 'Profile saved successfully',\n      });\n\n      loadProfile();\n    } catch (error) {\n      console.error('Error saving profile:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to save profile',\n        variant: 'destructive',\n      });\n    } finally {\n      setSaving(false);\n    }\n  }\n\n  async function handleAvatarUpload(event: React.ChangeEvent<HTMLInputElement>) {\n    const file = event.target.files?.[0];\n    if (!file || !user) return;\n\n    try {\n      const avatarUrl = await profileService.uploadAvatar(user.uid, file);\n      await profileService.update(user.uid, { avatarUrl });\n      toast({\n        title: 'Success',\n        description: 'Avatar uploaded successfully',\n      });\n      loadProfile();\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to upload avatar',\n        variant: 'destructive',\n      });\n    }\n  }\n\n  function addChild() {\n    setFormData((prev) => ({\n      ...prev,\n      children: [...prev.children, { name: '', preferredName: '', grade: '' }],\n    }));\n  }\n\n  function removeChild(index: number) {\n    setFormData((prev) => ({\n      ...prev,\n      children: prev.children.filter((_, i) => i !== index),\n    }));\n  }\n\n  function updateChild(index: number, field: 'name' | 'preferredName' | 'grade', value: string) {\n    setFormData((prev) => ({\n      ...prev,\n      children: prev.children.map((child, i) =>\n        i === index ? { ...child, [field]: value } : child\n      ),\n    }));\n  }\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto max-w-4xl space-y-6 p-6\">\n        <Skeleton className=\"h-10 w-48\" />\n        <Skeleton className=\"h-96\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-4xl space-y-6 p-6\">\n      <div className=\"mb-6 flex items-center justify-between\">\n        <Button variant=\"ghost\" asChild>\n          <Link href=\"/dashboard\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Dashboard\n          </Link>\n        </Button>\n        <Button onClick={handleSave} disabled={saving}>\n          <Save className=\"mr-2 h-4 w-4\" />\n          {saving ? 'Saving...' : 'Save Changes'}\n        </Button>\n      </div>\n\n      <div>\n        <h1 className=\"text-3xl font-bold\">My Profile</h1>\n        <p className=\"text-muted-foreground\">Manage your account information and preferences</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-6\">\n            <div className=\"relative\">\n              <Avatar className=\"h-24 w-24\">\n                <AvatarImage\n                  src={\n                    profile?.avatarUrl ||\n                    `https://api.dicebear.com/7.x/initials/svg?seed=${user?.uid}`\n                  }\n                  alt={formData.guardianName}\n                />\n                <AvatarFallback>\n                  {formData.guardianName?.charAt(0) || user?.email?.charAt(0) || 'U'}\n                </AvatarFallback>\n              </Avatar>\n              <label htmlFor={avatarUploadId} className=\"absolute right-0 bottom-0 cursor-pointer\">\n                <div className=\"bg-primary text-primary-foreground rounded-full p-2\">\n                  <Camera className=\"h-4 w-4\" />\n                </div>\n                <input\n                  id={avatarUploadId}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  className=\"hidden\"\n                  onChange={handleAvatarUpload}\n                />\n              </label>\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold\">\n                {formData.displayName || formData.guardianName || 'Your Name'}\n              </h2>\n              <p className=\"text-muted-foreground\">{formData.email}</p>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"basic\">Basic Info</TabsTrigger>\n          <TabsTrigger value=\"children\">Children</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"basic\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Contact Information</CardTitle>\n              <CardDescription>Required information for program communications</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor={guardianNameId}>\n                    Guardian Name <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <div className=\"relative\">\n                    <User className=\"text-muted-foreground absolute top-2.5 left-3 h-4 w-4\" />\n                    <Input\n                      id={guardianNameId}\n                      placeholder=\"Your full name\"\n                      value={formData.guardianName}\n                      onChange={(e) =>\n                        setFormData((prev) => ({ ...prev, guardianName: e.target.value }))\n                      }\n                      className=\"pl-10\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor={displayNameId}>Display Name (Optional)</Label>\n                  <Input\n                    id={displayNameId}\n                    placeholder=\"How you'd like to be called\"\n                    value={formData.displayName}\n                    onChange={(e) =>\n                      setFormData((prev) => ({ ...prev, displayName: e.target.value }))\n                    }\n                  />\n                  <p className=\"text-muted-foreground text-xs\">Leave blank to use your full name</p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor={phoneId}>\n                    <Phone className=\"mr-1 inline h-4 w-4\" />\n                    Phone Number <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <Input\n                    id={phoneId}\n                    type=\"tel\"\n                    placeholder=\"(555) 123-4567\"\n                    value={formData.phone}\n                    onChange={(e) => {\n                      const formatted = formatPhoneNumber(e.target.value);\n                      setFormData((prev) => ({ ...prev, phone: formatted }));\n                    }}\n                    maxLength={14} // For format: (123) 456-7890\n                  />\n                  <p className=\"text-muted-foreground text-xs\">US phone number format</p>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor={emailId}>\n                  Email Address <span className=\"text-destructive\">*</span>\n                </Label>\n                <div className=\"relative\">\n                  <Mail className=\"text-muted-foreground absolute top-2.5 left-3 h-4 w-4\" />\n                  <Input\n                    id={emailId}\n                    type=\"email\"\n                    placeholder=\"your@email.com\"\n                    value={formData.email}\n                    onChange={(e) => setFormData((prev) => ({ ...prev, email: e.target.value }))}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor={bioId}>About You (Optional)</Label>\n                <Textarea\n                  id={bioId}\n                  placeholder=\"Tell other families a bit about yourself...\"\n                  value={formData.bio}\n                  onChange={(e) => setFormData((prev) => ({ ...prev, bio: e.target.value }))}\n                  rows={4}\n                />\n                <p className=\"text-muted-foreground text-sm\">\n                  This will be visible to other program participants\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"children\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Registered Children</CardTitle>\n              <CardDescription>\n                Add your children's names and what they prefer to be called\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {formData.children.map((child, index) => (\n                <div key={index} className=\"space-y-4 rounded-lg border p-4\">\n                  <div className=\"grid gap-4 md:grid-cols-3\">\n                    <div className=\"space-y-2\">\n                      <Label>\n                        Full Name <span className=\"text-destructive\">*</span>\n                      </Label>\n                      <Input\n                        placeholder=\"Child's full name\"\n                        value={child.name}\n                        onChange={(e) => updateChild(index, 'name', e.target.value)}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>Preferred Name</Label>\n                      <Input\n                        placeholder=\"What they like to be called\"\n                        value={child.preferredName || ''}\n                        onChange={(e) => updateChild(index, 'preferredName', e.target.value)}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>\n                        Grade <span className=\"text-destructive\">*</span>\n                      </Label>\n                      <Select\n                        value={child.grade || ''}\n                        onValueChange={(value) => updateChild(index, 'grade', value)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select grade\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"K\">Kindergarten</SelectItem>\n                          <SelectItem value=\"1\">1st Grade</SelectItem>\n                          <SelectItem value=\"2\">2nd Grade</SelectItem>\n                          <SelectItem value=\"3\">3rd Grade</SelectItem>\n                          <SelectItem value=\"4\">4th Grade</SelectItem>\n                          <SelectItem value=\"5\">5th Grade</SelectItem>\n                          <SelectItem value=\"6\">6th Grade</SelectItem>\n                          <SelectItem value=\"7\">7th Grade</SelectItem>\n                          <SelectItem value=\"8\">8th Grade</SelectItem>\n                          <SelectItem value=\"9\">9th Grade</SelectItem>\n                          <SelectItem value=\"10\">10th Grade</SelectItem>\n                          <SelectItem value=\"11\">11th Grade</SelectItem>\n                          <SelectItem value=\"12\">12th Grade</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-end\">\n                    <Button variant=\"outline\" size=\"sm\" onClick={() => removeChild(index)}>\n                      Remove Child\n                    </Button>\n                  </div>\n                </div>\n              ))}\n\n              <Button variant=\"outline\" onClick={addChild} className=\"w-full\">\n                <Users className=\"mr-2 h-4 w-4\" />\n                Add Child\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Math Personality tab removed - will be added to individual student profiles */}\n      </Tabs>\n    </div>\n  );\n}\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/profile/page.tsx"},"span":[13980,13985],"sourceCode":"'use client';\n\nimport { ArrowLeft, Camera, Mail, Phone, Save, User, Users } from 'lucide-react';\nimport Link from 'next/link';\nimport { useEffect, useState, useId } from 'react';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { profileService, type UserProfile } from '@/lib/firebase-admin';\n\n// Format phone number as user types\nfunction formatPhoneNumber(value: string): string {\n  // Remove all non-digit characters\n  const phoneNumber = value.replace(/\\D/g, '');\n\n  // Format based on length\n  if (phoneNumber.length <= 3) {\n    return phoneNumber;\n  } else if (phoneNumber.length <= 6) {\n    return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;\n  } else if (phoneNumber.length <= 10) {\n    return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6)}`;\n  } else {\n    // Handle numbers with country code\n    return `+${phoneNumber.slice(0, 1)} (${phoneNumber.slice(1, 4)}) ${phoneNumber.slice(4, 7)}-${phoneNumber.slice(7, 11)}`;\n  }\n}\n\nconst mathPersonalities = [\n  {\n    type: 'Visual Learner',\n    description:\n      'Learns best through diagrams, charts, and visual representations of mathematical concepts.',\n    icon: '👁',\n  },\n  {\n    type: 'Problem Solver',\n    description: 'Enjoys tackling challenging problems and finding creative solutions.',\n    icon: '🧩',\n  },\n  {\n    type: 'Pattern Seeker',\n    description: 'Excels at recognizing patterns and relationships in numbers and sequences.',\n    icon: '🔍',\n  },\n  {\n    type: 'Creative Thinker',\n    description: 'Approaches math with imagination and finds unique ways to solve problems.',\n    icon: '🎨',\n  },\n  {\n    type: 'Logical Analyst',\n    description: 'Thrives on step-by-step reasoning and systematic problem-solving approaches.',\n    icon: '🔬',\n  },\n];\n\nexport default function ProfilePage() {\n  const avatarUploadId = useId();\n  const guardianNameId = useId();\n  const displayNameId = useId();\n  const phoneId = useId();\n  const emailId = useId();\n  const bioId = useId();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [activeTab, setActiveTab] = useState('basic');\n\n  // Form state\n  const [formData, setFormData] = useState({\n    guardianName: '',\n    displayName: '',\n    email: '',\n    phone: '',\n    bio: '',\n    children: [] as { name: string; preferredName?: string; grade: string }[],\n  });\n\n  useEffect(() => {\n    if (user) {\n      loadProfile();\n    }\n  }, [user, loadProfile]);\n\n  async function loadProfile() {\n    if (!user) return;\n\n    try {\n      const data = await profileService.get(user.uid);\n      if (data) {\n        setProfile(data);\n        setFormData({\n          guardianName: data.guardianName || '',\n          displayName: data.displayName || data.guardianName || '',\n          email: data.email || user.email || '',\n          phone: data.phone || '',\n          bio: data.bio || '',\n          children: data.children || [],\n        });\n      } else {\n        // Initialize with user's email\n        setFormData((prev) => ({\n          ...prev,\n          email: user.email || '',\n        }));\n      }\n    } catch (error) {\n      console.error('Error loading profile:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load profile',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function handleSave() {\n    if (!user) return;\n\n    // Validate required fields\n    if (!formData.guardianName || !formData.email || !formData.phone) {\n      toast({\n        title: 'Missing Information',\n        description: 'Please fill in all required fields',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    // Validate children have names and grades if any children are added\n    for (const child of formData.children) {\n      if (!child.name || !child.grade) {\n        toast({\n          title: 'Missing Child Information',\n          description: 'Please provide name and grade for all children',\n          variant: 'destructive',\n        });\n        return;\n      }\n    }\n\n    setSaving(true);\n\n    try {\n      const profileData: any = {\n        guardianName: formData.guardianName,\n        displayName: formData.displayName || formData.guardianName,\n        email: formData.email,\n        phone: formData.phone,\n        bio: formData.bio || '',\n        children: formData.children,\n      };\n\n      if (profile) {\n        await profileService.update(user.uid, profileData);\n      } else {\n        await profileService.create(user.uid, profileData);\n      }\n\n      toast({\n        title: 'Success',\n        description: 'Profile saved successfully',\n      });\n\n      loadProfile();\n    } catch (error) {\n      console.error('Error saving profile:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to save profile',\n        variant: 'destructive',\n      });\n    } finally {\n      setSaving(false);\n    }\n  }\n\n  async function handleAvatarUpload(event: React.ChangeEvent<HTMLInputElement>) {\n    const file = event.target.files?.[0];\n    if (!file || !user) return;\n\n    try {\n      const avatarUrl = await profileService.uploadAvatar(user.uid, file);\n      await profileService.update(user.uid, { avatarUrl });\n      toast({\n        title: 'Success',\n        description: 'Avatar uploaded successfully',\n      });\n      loadProfile();\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to upload avatar',\n        variant: 'destructive',\n      });\n    }\n  }\n\n  function addChild() {\n    setFormData((prev) => ({\n      ...prev,\n      children: [...prev.children, { name: '', preferredName: '', grade: '' }],\n    }));\n  }\n\n  function removeChild(index: number) {\n    setFormData((prev) => ({\n      ...prev,\n      children: prev.children.filter((_, i) => i !== index),\n    }));\n  }\n\n  function updateChild(index: number, field: 'name' | 'preferredName' | 'grade', value: string) {\n    setFormData((prev) => ({\n      ...prev,\n      children: prev.children.map((child, i) =>\n        i === index ? { ...child, [field]: value } : child\n      ),\n    }));\n  }\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto max-w-4xl space-y-6 p-6\">\n        <Skeleton className=\"h-10 w-48\" />\n        <Skeleton className=\"h-96\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-4xl space-y-6 p-6\">\n      <div className=\"mb-6 flex items-center justify-between\">\n        <Button variant=\"ghost\" asChild>\n          <Link href=\"/dashboard\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Dashboard\n          </Link>\n        </Button>\n        <Button onClick={handleSave} disabled={saving}>\n          <Save className=\"mr-2 h-4 w-4\" />\n          {saving ? 'Saving...' : 'Save Changes'}\n        </Button>\n      </div>\n\n      <div>\n        <h1 className=\"text-3xl font-bold\">My Profile</h1>\n        <p className=\"text-muted-foreground\">Manage your account information and preferences</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-6\">\n            <div className=\"relative\">\n              <Avatar className=\"h-24 w-24\">\n                <AvatarImage\n                  src={\n                    profile?.avatarUrl ||\n                    `https://api.dicebear.com/7.x/initials/svg?seed=${user?.uid}`\n                  }\n                  alt={formData.guardianName}\n                />\n                <AvatarFallback>\n                  {formData.guardianName?.charAt(0) || user?.email?.charAt(0) || 'U'}\n                </AvatarFallback>\n              </Avatar>\n              <label htmlFor={avatarUploadId} className=\"absolute right-0 bottom-0 cursor-pointer\">\n                <div className=\"bg-primary text-primary-foreground rounded-full p-2\">\n                  <Camera className=\"h-4 w-4\" />\n                </div>\n                <input\n                  id={avatarUploadId}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  className=\"hidden\"\n                  onChange={handleAvatarUpload}\n                />\n              </label>\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold\">\n                {formData.displayName || formData.guardianName || 'Your Name'}\n              </h2>\n              <p className=\"text-muted-foreground\">{formData.email}</p>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"basic\">Basic Info</TabsTrigger>\n          <TabsTrigger value=\"children\">Children</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"basic\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Contact Information</CardTitle>\n              <CardDescription>Required information for program communications</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor={guardianNameId}>\n                    Guardian Name <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <div className=\"relative\">\n                    <User className=\"text-muted-foreground absolute top-2.5 left-3 h-4 w-4\" />\n                    <Input\n                      id={guardianNameId}\n                      placeholder=\"Your full name\"\n                      value={formData.guardianName}\n                      onChange={(e) =>\n                        setFormData((prev) => ({ ...prev, guardianName: e.target.value }))\n                      }\n                      className=\"pl-10\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor={displayNameId}>Display Name (Optional)</Label>\n                  <Input\n                    id={displayNameId}\n                    placeholder=\"How you'd like to be called\"\n                    value={formData.displayName}\n                    onChange={(e) =>\n                      setFormData((prev) => ({ ...prev, displayName: e.target.value }))\n                    }\n                  />\n                  <p className=\"text-muted-foreground text-xs\">Leave blank to use your full name</p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor={phoneId}>\n                    <Phone className=\"mr-1 inline h-4 w-4\" />\n                    Phone Number <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <Input\n                    id={phoneId}\n                    type=\"tel\"\n                    placeholder=\"(555) 123-4567\"\n                    value={formData.phone}\n                    onChange={(e) => {\n                      const formatted = formatPhoneNumber(e.target.value);\n                      setFormData((prev) => ({ ...prev, phone: formatted }));\n                    }}\n                    maxLength={14} // For format: (123) 456-7890\n                  />\n                  <p className=\"text-muted-foreground text-xs\">US phone number format</p>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor={emailId}>\n                  Email Address <span className=\"text-destructive\">*</span>\n                </Label>\n                <div className=\"relative\">\n                  <Mail className=\"text-muted-foreground absolute top-2.5 left-3 h-4 w-4\" />\n                  <Input\n                    id={emailId}\n                    type=\"email\"\n                    placeholder=\"your@email.com\"\n                    value={formData.email}\n                    onChange={(e) => setFormData((prev) => ({ ...prev, email: e.target.value }))}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor={bioId}>About You (Optional)</Label>\n                <Textarea\n                  id={bioId}\n                  placeholder=\"Tell other families a bit about yourself...\"\n                  value={formData.bio}\n                  onChange={(e) => setFormData((prev) => ({ ...prev, bio: e.target.value }))}\n                  rows={4}\n                />\n                <p className=\"text-muted-foreground text-sm\">\n                  This will be visible to other program participants\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"children\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Registered Children</CardTitle>\n              <CardDescription>\n                Add your children's names and what they prefer to be called\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {formData.children.map((child, index) => (\n                <div key={index} className=\"space-y-4 rounded-lg border p-4\">\n                  <div className=\"grid gap-4 md:grid-cols-3\">\n                    <div className=\"space-y-2\">\n                      <Label>\n                        Full Name <span className=\"text-destructive\">*</span>\n                      </Label>\n                      <Input\n                        placeholder=\"Child's full name\"\n                        value={child.name}\n                        onChange={(e) => updateChild(index, 'name', e.target.value)}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>Preferred Name</Label>\n                      <Input\n                        placeholder=\"What they like to be called\"\n                        value={child.preferredName || ''}\n                        onChange={(e) => updateChild(index, 'preferredName', e.target.value)}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>\n                        Grade <span className=\"text-destructive\">*</span>\n                      </Label>\n                      <Select\n                        value={child.grade || ''}\n                        onValueChange={(value) => updateChild(index, 'grade', value)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select grade\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"K\">Kindergarten</SelectItem>\n                          <SelectItem value=\"1\">1st Grade</SelectItem>\n                          <SelectItem value=\"2\">2nd Grade</SelectItem>\n                          <SelectItem value=\"3\">3rd Grade</SelectItem>\n                          <SelectItem value=\"4\">4th Grade</SelectItem>\n                          <SelectItem value=\"5\">5th Grade</SelectItem>\n                          <SelectItem value=\"6\">6th Grade</SelectItem>\n                          <SelectItem value=\"7\">7th Grade</SelectItem>\n                          <SelectItem value=\"8\">8th Grade</SelectItem>\n                          <SelectItem value=\"9\">9th Grade</SelectItem>\n                          <SelectItem value=\"10\">10th Grade</SelectItem>\n                          <SelectItem value=\"11\">11th Grade</SelectItem>\n                          <SelectItem value=\"12\">12th Grade</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-end\">\n                    <Button variant=\"outline\" size=\"sm\" onClick={() => removeChild(index)}>\n                      Remove Child\n                    </Button>\n                  </div>\n                </div>\n              ))}\n\n              <Button variant=\"outline\" onClick={addChild} className=\"w-full\">\n                <Users className=\"mr-2 h-4 w-4\" />\n                Add Child\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Math Personality tab removed - will be added to individual student profiles */}\n      </Tabs>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"warning","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[4349,4354],"sourceCode":"import { Calendar, Clock, Download } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n\nconst schedule = {\n  regular: {\n    title: 'Weekly MathCounts Meetings',\n    day: 'Tuesday',\n    time: '4:00-5:30 PM',\n    location: 'Homer Middle School, Room 203',\n    startDate: 'September 9, 2025',\n    endDate: 'March 4, 2025',\n  },\n  specialEvents: [\n    {\n      date: 'September 9, 2025',\n      title: 'First Meeting & Orientation',\n      time: '4:00-5:30 PM',\n      type: 'meeting' as const,\n    },\n    {\n      date: 'October 31, 2025',\n      title: 'No Meeting - Halloween',\n      type: 'holiday',\n    },\n    {\n      date: 'November 25-29, 2025',\n      title: 'No Meeting - Thanksgiving Break',\n      type: 'holiday',\n    },\n    {\n      date: 'December 10, 2025',\n      title: 'Practice Competition',\n      time: '4:00-6:00 PM',\n      type: 'special',\n    },\n    {\n      date: 'December 23-27, 2025',\n      title: 'No Meeting - Winter Break',\n      type: 'holiday',\n    },\n    {\n      date: 'January 18, 2025',\n      title: 'Chapter Competition',\n      time: '9:00 AM - 1:00 PM',\n      location: 'Homer High School',\n      type: 'competition',\n    },\n    {\n      date: 'March 8, 2025',\n      title: 'State Competition',\n      time: 'All Day',\n      location: 'Anchorage',\n      type: 'competition',\n    },\n    {\n      date: 'March 11, 2025',\n      title: 'End of Season Celebration',\n      time: '4:00-5:30 PM',\n      type: 'special',\n    },\n  ],\n};\n\nconst typeColors: Record<string, string> = {\n  meeting: 'bg-blue-100 text-blue-800',\n  holiday: 'bg-gray-100 text-gray-800',\n  special: 'bg-purple-100 text-purple-800',\n  competition: 'bg-green-100 text-green-800',\n};\n\nimport { PublicHeader } from '@/components/public-header';\n\nexport default function SchedulePage() {\n  return (\n    <>\n      <PublicHeader />\n      <main className=\"bg-background min-h-screen\">\n        <div className=\"container py-8\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl font-bold tracking-tight\">Schedule</h1>\n            <p className=\"text-muted-foreground mt-2 text-lg\">\n              MathCounts meeting times and important dates for 2025\n            </p>\n          </div>\n\n          <div className=\"grid gap-6 lg:grid-cols-3\">\n            <div className=\"space-y-6 lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Regular Meeting Schedule</CardTitle>\n                  <CardDescription>\n                    Weekly practice sessions run from September through March\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"bg-primary/5 border-primary/20 rounded-lg border p-6\">\n                    <div className=\"grid gap-4 sm:grid-cols-2\">\n                      <div>\n                        <p className=\"text-muted-foreground text-sm font-medium\">Day & Time</p>\n                        <p className=\"text-lg font-semibold\">{schedule.regular.day}s</p>\n                        <p className=\"text-muted-foreground\">{schedule.regular.time}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground text-sm font-medium\">Location</p>\n                        <p className=\"text-lg font-semibold\">{schedule.regular.location}</p>\n                      </div>\n                    </div>\n                    <div className=\"mt-4 border-t pt-4\">\n                      <p className=\"text-muted-foreground text-sm\">\n                        <strong>Season:</strong> {schedule.regular.startDate} -{' '}\n                        {schedule.regular.endDate}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Special Events & Holidays</CardTitle>\n                  <CardDescription>\n                    Important dates, competitions, and schedule changes\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {schedule.specialEvents.map((event, index) => (\n                      <div key={index} className=\"flex items-start gap-3 rounded-lg border p-3\">\n                        <div className=\"flex-1\">\n                          <div className=\"mb-1 flex items-center gap-2\">\n                            <p className=\"font-medium\">{event.title}</p>\n                            <Badge className={typeColors[event.type]} variant=\"secondary\">\n                              {event.type}\n                            </Badge>\n                          </div>\n                          <p className=\"text-muted-foreground text-sm\">{event.date}</p>\n                          {event.time && (\n                            <p className=\"text-muted-foreground mt-1 flex items-center gap-1 text-sm\">\n                              <Clock className=\"h-3 w-3\" />\n                              {event.time}\n                            </p>\n                          )}\n                          {event.location && (\n                            <p className=\"text-muted-foreground text-sm\">📍 {event.location}</p>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Add to Your Calendar</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <Button className=\"w-full\" variant=\"outline\">\n                    <Calendar className=\"mr-2 h-4 w-4\" />\n                    Subscribe to Calendar\n                  </Button>\n                  <Button className=\"w-full\" variant=\"outline\">\n                    <Download className=\"mr-2 h-4 w-4\" />\n                    Download Schedule (PDF)\n                  </Button>\n                  <p className=\"text-muted-foreground text-center text-xs\">\n                    Get automatic updates when the schedule changes\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Schedule Notes</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3 text-sm\">\n                  <div>\n                    <p className=\"mb-1 font-medium\">Weather Cancellations</p>\n                    <p className=\"text-muted-foreground\">\n                      If Homer schools are closed due to weather, MathCounts is also cancelled.\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"mb-1 font-medium\">Make-up Sessions</p>\n                    <p className=\"text-muted-foreground\">\n                      Cancelled meetings may be rescheduled. Check your email for updates.\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"mb-1 font-medium\">Competition Attendance</p>\n                    <p className=\"text-muted-foreground\">\n                      Chapter competition attendance is required for all team members.\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-primary text-primary-foreground\">\n                <CardHeader>\n                  <CardTitle className=\"text-primary-foreground\">Questions?</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-primary-foreground/90 mb-3 text-sm\">\n                    Contact us about schedule changes or conflicts\n                  </p>\n                  <Button variant=\"secondary\" className=\"w-full\" asChild>\n                    <a href=\"mailto:schedule@homerenrichmenthub.org\">Email Coordinator</a>\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n    </>\n  );\n}\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/schedule/page.tsx"},"span":[4393,4398],"sourceCode":"import { Calendar, Clock, Download } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n\nconst schedule = {\n  regular: {\n    title: 'Weekly MathCounts Meetings',\n    day: 'Tuesday',\n    time: '4:00-5:30 PM',\n    location: 'Homer Middle School, Room 203',\n    startDate: 'September 9, 2025',\n    endDate: 'March 4, 2025',\n  },\n  specialEvents: [\n    {\n      date: 'September 9, 2025',\n      title: 'First Meeting & Orientation',\n      time: '4:00-5:30 PM',\n      type: 'meeting' as const,\n    },\n    {\n      date: 'October 31, 2025',\n      title: 'No Meeting - Halloween',\n      type: 'holiday',\n    },\n    {\n      date: 'November 25-29, 2025',\n      title: 'No Meeting - Thanksgiving Break',\n      type: 'holiday',\n    },\n    {\n      date: 'December 10, 2025',\n      title: 'Practice Competition',\n      time: '4:00-6:00 PM',\n      type: 'special',\n    },\n    {\n      date: 'December 23-27, 2025',\n      title: 'No Meeting - Winter Break',\n      type: 'holiday',\n    },\n    {\n      date: 'January 18, 2025',\n      title: 'Chapter Competition',\n      time: '9:00 AM - 1:00 PM',\n      location: 'Homer High School',\n      type: 'competition',\n    },\n    {\n      date: 'March 8, 2025',\n      title: 'State Competition',\n      time: 'All Day',\n      location: 'Anchorage',\n      type: 'competition',\n    },\n    {\n      date: 'March 11, 2025',\n      title: 'End of Season Celebration',\n      time: '4:00-5:30 PM',\n      type: 'special',\n    },\n  ],\n};\n\nconst typeColors: Record<string, string> = {\n  meeting: 'bg-blue-100 text-blue-800',\n  holiday: 'bg-gray-100 text-gray-800',\n  special: 'bg-purple-100 text-purple-800',\n  competition: 'bg-green-100 text-green-800',\n};\n\nimport { PublicHeader } from '@/components/public-header';\n\nexport default function SchedulePage() {\n  return (\n    <>\n      <PublicHeader />\n      <main className=\"bg-background min-h-screen\">\n        <div className=\"container py-8\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl font-bold tracking-tight\">Schedule</h1>\n            <p className=\"text-muted-foreground mt-2 text-lg\">\n              MathCounts meeting times and important dates for 2025\n            </p>\n          </div>\n\n          <div className=\"grid gap-6 lg:grid-cols-3\">\n            <div className=\"space-y-6 lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Regular Meeting Schedule</CardTitle>\n                  <CardDescription>\n                    Weekly practice sessions run from September through March\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"bg-primary/5 border-primary/20 rounded-lg border p-6\">\n                    <div className=\"grid gap-4 sm:grid-cols-2\">\n                      <div>\n                        <p className=\"text-muted-foreground text-sm font-medium\">Day & Time</p>\n                        <p className=\"text-lg font-semibold\">{schedule.regular.day}s</p>\n                        <p className=\"text-muted-foreground\">{schedule.regular.time}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground text-sm font-medium\">Location</p>\n                        <p className=\"text-lg font-semibold\">{schedule.regular.location}</p>\n                      </div>\n                    </div>\n                    <div className=\"mt-4 border-t pt-4\">\n                      <p className=\"text-muted-foreground text-sm\">\n                        <strong>Season:</strong> {schedule.regular.startDate} -{' '}\n                        {schedule.regular.endDate}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Special Events & Holidays</CardTitle>\n                  <CardDescription>\n                    Important dates, competitions, and schedule changes\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {schedule.specialEvents.map((event, index) => (\n                      <div key={index} className=\"flex items-start gap-3 rounded-lg border p-3\">\n                        <div className=\"flex-1\">\n                          <div className=\"mb-1 flex items-center gap-2\">\n                            <p className=\"font-medium\">{event.title}</p>\n                            <Badge className={typeColors[event.type]} variant=\"secondary\">\n                              {event.type}\n                            </Badge>\n                          </div>\n                          <p className=\"text-muted-foreground text-sm\">{event.date}</p>\n                          {event.time && (\n                            <p className=\"text-muted-foreground mt-1 flex items-center gap-1 text-sm\">\n                              <Clock className=\"h-3 w-3\" />\n                              {event.time}\n                            </p>\n                          )}\n                          {event.location && (\n                            <p className=\"text-muted-foreground text-sm\">📍 {event.location}</p>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Add to Your Calendar</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <Button className=\"w-full\" variant=\"outline\">\n                    <Calendar className=\"mr-2 h-4 w-4\" />\n                    Subscribe to Calendar\n                  </Button>\n                  <Button className=\"w-full\" variant=\"outline\">\n                    <Download className=\"mr-2 h-4 w-4\" />\n                    Download Schedule (PDF)\n                  </Button>\n                  <p className=\"text-muted-foreground text-center text-xs\">\n                    Get automatic updates when the schedule changes\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Schedule Notes</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3 text-sm\">\n                  <div>\n                    <p className=\"mb-1 font-medium\">Weather Cancellations</p>\n                    <p className=\"text-muted-foreground\">\n                      If Homer schools are closed due to weather, MathCounts is also cancelled.\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"mb-1 font-medium\">Make-up Sessions</p>\n                    <p className=\"text-muted-foreground\">\n                      Cancelled meetings may be rescheduled. Check your email for updates.\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"mb-1 font-medium\">Competition Attendance</p>\n                    <p className=\"text-muted-foreground\">\n                      Chapter competition attendance is required for all team members.\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-primary text-primary-foreground\">\n                <CardHeader>\n                  <CardTitle className=\"text-primary-foreground\">Questions?</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-primary-foreground/90 mb-3 text-sm\">\n                    Contact us about schedule changes or conflicts\n                  </p>\n                  <Button variant=\"secondary\" className=\"w-full\" asChild>\n                    <a href=\"mailto:schedule@homerenrichmenthub.org\">Email Coordinator</a>\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n    </>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useExhaustiveDependencies","severity":"warning","description":"runSystemChecks changes on every re-render and should not be used as a hook dependency.","message":[{"elements":["Emphasis"],"content":"runSystemChecks"},{"elements":[],"content":" changes on every re-render and should not be used as a hook dependency."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"To fix this, wrap the definition of "},{"elements":["Emphasis"],"content":"runSystemChecks"},{"elements":[],"content":" in its own "},{"elements":["Emphasis"],"content":"useCallback()"},{"elements":[],"content":" hook."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/system-status/page.tsx"},"span":[820,835],"sourceCode":"'use client';\n\nimport { collection, getDocs } from 'firebase/firestore';\nimport {\n  AlertCircle,\n  CheckCircle,\n  Database,\n  FileText,\n  Mail,\n  Shield,\n  Users,\n  XCircle,\n} from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useAuth } from '@/hooks/use-auth';\nimport { auth, db } from '@/lib/firebase';\n\ninterface SystemCheck {\n  name: string;\n  status: 'ok' | 'error' | 'warning';\n  message: string;\n  icon: any;\n}\n\nexport default function SystemStatusPage() {\n  const [checks, setChecks] = useState<SystemCheck[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { user } = useAuth();\n\n  useEffect(() => {\n    runSystemChecks();\n  }, [runSystemChecks]);\n\n  async function runSystemChecks() {\n    const systemChecks: SystemCheck[] = [];\n\n    // 1. Check Authentication\n    try {\n      const currentUser = auth.currentUser;\n      systemChecks.push({\n        name: 'Authentication',\n        status: currentUser ? 'ok' : 'warning',\n        message: currentUser ? `Logged in as ${currentUser.email}` : 'Not logged in',\n        icon: Shield,\n      });\n    } catch (error) {\n      systemChecks.push({\n        name: 'Authentication',\n        status: 'error',\n        message: `Error: ${error}`,\n        icon: Shield,\n      });\n    }\n\n    // 2. Check Firestore Connection\n    try {\n      const testCollection = collection(db, 'test-connection');\n      systemChecks.push({\n        name: 'Firestore Connection',\n        status: 'ok',\n        message: 'Connected to Firestore',\n        icon: Database,\n      });\n    } catch (error) {\n      systemChecks.push({\n        name: 'Firestore Connection',\n        status: 'error',\n        message: `Error: ${error}`,\n        icon: Database,\n      });\n    }\n\n    // 3. Check Announcements Collection\n    try {\n      const announcementsSnapshot = await getDocs(collection(db, 'announcements'));\n      const count = announcementsSnapshot.size;\n      const publishedCount = announcementsSnapshot.docs.filter(\n        (doc) => doc.data().status === 'published'\n      ).length;\n\n      systemChecks.push({\n        name: 'Announcements',\n        status: count > 0 ? 'ok' : 'warning',\n        message: `${count} total announcements (${publishedCount} published)`,\n        icon: Mail,\n      });\n\n      // Show first announcement structure\n      if (announcementsSnapshot.docs.length > 0) {\n        const firstDoc = announcementsSnapshot.docs[0];\n        console.log('First announcement structure:', {\n          id: firstDoc.id,\n          data: firstDoc.data(),\n        });\n      }\n    } catch (error) {\n      systemChecks.push({\n        name: 'Announcements',\n        status: 'error',\n        message: `Error: ${error}`,\n        icon: Mail,\n      });\n    }\n\n    // 4. Check Programs Collection\n    try {\n      const programsSnapshot = await getDocs(collection(db, 'programs'));\n      const count = programsSnapshot.size;\n      systemChecks.push({\n        name: 'Programs',\n        status: count > 0 ? 'ok' : 'warning',\n        message: `${count} programs configured`,\n        icon: FileText,\n      });\n    } catch (error) {\n      systemChecks.push({\n        name: 'Programs',\n        status: 'error',\n        message: `Error: ${error}`,\n        icon: FileText,\n      });\n    }\n\n    // 5. Check Registrations Collection\n    try {\n      const registrationsSnapshot = await getDocs(collection(db, 'registrations'));\n      const count = registrationsSnapshot.size;\n      systemChecks.push({\n        name: 'Registrations',\n        status: 'ok',\n        message: `${count} registrations in system`,\n        icon: Users,\n      });\n    } catch (error) {\n      systemChecks.push({\n        name: 'Registrations',\n        status: 'error',\n        message: `Error: ${error}`,\n        icon: Users,\n      });\n    }\n\n    // 6. Check Admin Access\n    try {\n      if (user?.email) {\n        const adminEmails = ['jeffreyverlynjohnson@gmail.com', 'admin@example.com'];\n        const isAdmin = adminEmails.includes(user.email);\n\n        systemChecks.push({\n          name: 'Admin Access',\n          status: isAdmin ? 'ok' : 'warning',\n          message: isAdmin ? 'Admin access enabled' : 'No admin access',\n          icon: Shield,\n        });\n      }\n    } catch (error) {\n      systemChecks.push({\n        name: 'Admin Access',\n        status: 'error',\n        message: `Error: ${error}`,\n        icon: Shield,\n      });\n    }\n\n    setChecks(systemChecks);\n    setLoading(false);\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'ok':\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'warning':\n        return <AlertCircle className=\"h-5 w-5 text-yellow-500\" />;\n      case 'error':\n        return <XCircle className=\"h-5 w-5 text-red-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'ok':\n        return <Badge className=\"bg-green-500\">OK</Badge>;\n      case 'warning':\n        return <Badge className=\"bg-yellow-500\">Warning</Badge>;\n      case 'error':\n        return <Badge variant=\"destructive\">Error</Badge>;\n      default:\n        return null;\n    }\n  };\n\n  if (loading) {\n    return <div className=\"container mx-auto p-6\">Loading system status...</div>;\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-4xl p-6\">\n      <h1 className=\"mb-6 text-3xl font-bold\">System Status Check</h1>\n\n      <div className=\"space-y-4\">\n        {checks.map((check, index) => (\n          <Card key={index}>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <check.icon className=\"text-muted-foreground h-5 w-5\" />\n                  <CardTitle className=\"text-lg\">{check.name}</CardTitle>\n                </div>\n                {getStatusBadge(check.status)}\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-2\">\n                {getStatusIcon(check.status)}\n                <p className=\"text-sm\">{check.message}</p>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <Card className=\"mt-6\">\n        <CardHeader>\n          <CardTitle>Quick Links</CardTitle>\n          <CardDescription>Debug and test pages</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2\">\n            <a href=\"/debug-announcements\" className=\"block text-blue-600 hover:underline\">\n              → Debug Announcements\n            </a>\n            <a href=\"/debug-auth\" className=\"block text-blue-600 hover:underline\">\n              → Debug Authentication\n            </a>\n            <a href=\"/test-admin\" className=\"block text-blue-600 hover:underline\">\n              → Test Admin Route\n            </a>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"mt-6\">\n        <CardHeader>\n          <CardTitle>Console Output</CardTitle>\n          <CardDescription>Check browser console for detailed logs</CardDescription>\n        </CardHeader>\n      </Card>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"warning","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[5606,5611],"sourceCode":"'use client';\n\nimport { collection, getDocs } from 'firebase/firestore';\nimport {\n  AlertCircle,\n  CheckCircle,\n  Database,\n  FileText,\n  Mail,\n  Shield,\n  Users,\n  XCircle,\n} from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useAuth } from '@/hooks/use-auth';\nimport { auth, db } from '@/lib/firebase';\n\ninterface SystemCheck {\n  name: string;\n  status: 'ok' | 'error' | 'warning';\n  message: string;\n  icon: any;\n}\n\nexport default function SystemStatusPage() {\n  const [checks, setChecks] = useState<SystemCheck[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { user } = useAuth();\n\n  useEffect(() => {\n    runSystemChecks();\n  }, [runSystemChecks]);\n\n  async function runSystemChecks() {\n    const systemChecks: SystemCheck[] = [];\n\n    // 1. Check Authentication\n    try {\n      const currentUser = auth.currentUser;\n      systemChecks.push({\n        name: 'Authentication',\n        status: currentUser ? 'ok' : 'warning',\n        message: currentUser ? `Logged in as ${currentUser.email}` : 'Not logged in',\n        icon: Shield,\n      });\n    } catch (error) {\n      systemChecks.push({\n        name: 'Authentication',\n        status: 'error',\n        message: `Error: ${error}`,\n        icon: Shield,\n      });\n    }\n\n    // 2. Check Firestore Connection\n    try {\n      const testCollection = collection(db, 'test-connection');\n      systemChecks.push({\n        name: 'Firestore Connection',\n        status: 'ok',\n        message: 'Connected to Firestore',\n        icon: Database,\n      });\n    } catch (error) {\n      systemChecks.push({\n        name: 'Firestore Connection',\n        status: 'error',\n        message: `Error: ${error}`,\n        icon: Database,\n      });\n    }\n\n    // 3. Check Announcements Collection\n    try {\n      const announcementsSnapshot = await getDocs(collection(db, 'announcements'));\n      const count = announcementsSnapshot.size;\n      const publishedCount = announcementsSnapshot.docs.filter(\n        (doc) => doc.data().status === 'published'\n      ).length;\n\n      systemChecks.push({\n        name: 'Announcements',\n        status: count > 0 ? 'ok' : 'warning',\n        message: `${count} total announcements (${publishedCount} published)`,\n        icon: Mail,\n      });\n\n      // Show first announcement structure\n      if (announcementsSnapshot.docs.length > 0) {\n        const firstDoc = announcementsSnapshot.docs[0];\n        console.log('First announcement structure:', {\n          id: firstDoc.id,\n          data: firstDoc.data(),\n        });\n      }\n    } catch (error) {\n      systemChecks.push({\n        name: 'Announcements',\n        status: 'error',\n        message: `Error: ${error}`,\n        icon: Mail,\n      });\n    }\n\n    // 4. Check Programs Collection\n    try {\n      const programsSnapshot = await getDocs(collection(db, 'programs'));\n      const count = programsSnapshot.size;\n      systemChecks.push({\n        name: 'Programs',\n        status: count > 0 ? 'ok' : 'warning',\n        message: `${count} programs configured`,\n        icon: FileText,\n      });\n    } catch (error) {\n      systemChecks.push({\n        name: 'Programs',\n        status: 'error',\n        message: `Error: ${error}`,\n        icon: FileText,\n      });\n    }\n\n    // 5. Check Registrations Collection\n    try {\n      const registrationsSnapshot = await getDocs(collection(db, 'registrations'));\n      const count = registrationsSnapshot.size;\n      systemChecks.push({\n        name: 'Registrations',\n        status: 'ok',\n        message: `${count} registrations in system`,\n        icon: Users,\n      });\n    } catch (error) {\n      systemChecks.push({\n        name: 'Registrations',\n        status: 'error',\n        message: `Error: ${error}`,\n        icon: Users,\n      });\n    }\n\n    // 6. Check Admin Access\n    try {\n      if (user?.email) {\n        const adminEmails = ['jeffreyverlynjohnson@gmail.com', 'admin@example.com'];\n        const isAdmin = adminEmails.includes(user.email);\n\n        systemChecks.push({\n          name: 'Admin Access',\n          status: isAdmin ? 'ok' : 'warning',\n          message: isAdmin ? 'Admin access enabled' : 'No admin access',\n          icon: Shield,\n        });\n      }\n    } catch (error) {\n      systemChecks.push({\n        name: 'Admin Access',\n        status: 'error',\n        message: `Error: ${error}`,\n        icon: Shield,\n      });\n    }\n\n    setChecks(systemChecks);\n    setLoading(false);\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'ok':\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'warning':\n        return <AlertCircle className=\"h-5 w-5 text-yellow-500\" />;\n      case 'error':\n        return <XCircle className=\"h-5 w-5 text-red-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'ok':\n        return <Badge className=\"bg-green-500\">OK</Badge>;\n      case 'warning':\n        return <Badge className=\"bg-yellow-500\">Warning</Badge>;\n      case 'error':\n        return <Badge variant=\"destructive\">Error</Badge>;\n      default:\n        return null;\n    }\n  };\n\n  if (loading) {\n    return <div className=\"container mx-auto p-6\">Loading system status...</div>;\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-4xl p-6\">\n      <h1 className=\"mb-6 text-3xl font-bold\">System Status Check</h1>\n\n      <div className=\"space-y-4\">\n        {checks.map((check, index) => (\n          <Card key={index}>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <check.icon className=\"text-muted-foreground h-5 w-5\" />\n                  <CardTitle className=\"text-lg\">{check.name}</CardTitle>\n                </div>\n                {getStatusBadge(check.status)}\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-2\">\n                {getStatusIcon(check.status)}\n                <p className=\"text-sm\">{check.message}</p>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <Card className=\"mt-6\">\n        <CardHeader>\n          <CardTitle>Quick Links</CardTitle>\n          <CardDescription>Debug and test pages</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2\">\n            <a href=\"/debug-announcements\" className=\"block text-blue-600 hover:underline\">\n              → Debug Announcements\n            </a>\n            <a href=\"/debug-auth\" className=\"block text-blue-600 hover:underline\">\n              → Debug Authentication\n            </a>\n            <a href=\"/test-admin\" className=\"block text-blue-600 hover:underline\">\n              → Test Admin Route\n            </a>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"mt-6\">\n        <CardHeader>\n          <CardTitle>Console Output</CardTitle>\n          <CardDescription>Check browser console for detailed logs</CardDescription>\n        </CardHeader>\n      </Card>\n    </div>\n  );\n}\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/system-status/page.tsx"},"span":[5639,5644],"sourceCode":"'use client';\n\nimport { collection, getDocs } from 'firebase/firestore';\nimport {\n  AlertCircle,\n  CheckCircle,\n  Database,\n  FileText,\n  Mail,\n  Shield,\n  Users,\n  XCircle,\n} from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useAuth } from '@/hooks/use-auth';\nimport { auth, db } from '@/lib/firebase';\n\ninterface SystemCheck {\n  name: string;\n  status: 'ok' | 'error' | 'warning';\n  message: string;\n  icon: any;\n}\n\nexport default function SystemStatusPage() {\n  const [checks, setChecks] = useState<SystemCheck[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { user } = useAuth();\n\n  useEffect(() => {\n    runSystemChecks();\n  }, [runSystemChecks]);\n\n  async function runSystemChecks() {\n    const systemChecks: SystemCheck[] = [];\n\n    // 1. Check Authentication\n    try {\n      const currentUser = auth.currentUser;\n      systemChecks.push({\n        name: 'Authentication',\n        status: currentUser ? 'ok' : 'warning',\n        message: currentUser ? `Logged in as ${currentUser.email}` : 'Not logged in',\n        icon: Shield,\n      });\n    } catch (error) {\n      systemChecks.push({\n        name: 'Authentication',\n        status: 'error',\n        message: `Error: ${error}`,\n        icon: Shield,\n      });\n    }\n\n    // 2. Check Firestore Connection\n    try {\n      const testCollection = collection(db, 'test-connection');\n      systemChecks.push({\n        name: 'Firestore Connection',\n        status: 'ok',\n        message: 'Connected to Firestore',\n        icon: Database,\n      });\n    } catch (error) {\n      systemChecks.push({\n        name: 'Firestore Connection',\n        status: 'error',\n        message: `Error: ${error}`,\n        icon: Database,\n      });\n    }\n\n    // 3. Check Announcements Collection\n    try {\n      const announcementsSnapshot = await getDocs(collection(db, 'announcements'));\n      const count = announcementsSnapshot.size;\n      const publishedCount = announcementsSnapshot.docs.filter(\n        (doc) => doc.data().status === 'published'\n      ).length;\n\n      systemChecks.push({\n        name: 'Announcements',\n        status: count > 0 ? 'ok' : 'warning',\n        message: `${count} total announcements (${publishedCount} published)`,\n        icon: Mail,\n      });\n\n      // Show first announcement structure\n      if (announcementsSnapshot.docs.length > 0) {\n        const firstDoc = announcementsSnapshot.docs[0];\n        console.log('First announcement structure:', {\n          id: firstDoc.id,\n          data: firstDoc.data(),\n        });\n      }\n    } catch (error) {\n      systemChecks.push({\n        name: 'Announcements',\n        status: 'error',\n        message: `Error: ${error}`,\n        icon: Mail,\n      });\n    }\n\n    // 4. Check Programs Collection\n    try {\n      const programsSnapshot = await getDocs(collection(db, 'programs'));\n      const count = programsSnapshot.size;\n      systemChecks.push({\n        name: 'Programs',\n        status: count > 0 ? 'ok' : 'warning',\n        message: `${count} programs configured`,\n        icon: FileText,\n      });\n    } catch (error) {\n      systemChecks.push({\n        name: 'Programs',\n        status: 'error',\n        message: `Error: ${error}`,\n        icon: FileText,\n      });\n    }\n\n    // 5. Check Registrations Collection\n    try {\n      const registrationsSnapshot = await getDocs(collection(db, 'registrations'));\n      const count = registrationsSnapshot.size;\n      systemChecks.push({\n        name: 'Registrations',\n        status: 'ok',\n        message: `${count} registrations in system`,\n        icon: Users,\n      });\n    } catch (error) {\n      systemChecks.push({\n        name: 'Registrations',\n        status: 'error',\n        message: `Error: ${error}`,\n        icon: Users,\n      });\n    }\n\n    // 6. Check Admin Access\n    try {\n      if (user?.email) {\n        const adminEmails = ['jeffreyverlynjohnson@gmail.com', 'admin@example.com'];\n        const isAdmin = adminEmails.includes(user.email);\n\n        systemChecks.push({\n          name: 'Admin Access',\n          status: isAdmin ? 'ok' : 'warning',\n          message: isAdmin ? 'Admin access enabled' : 'No admin access',\n          icon: Shield,\n        });\n      }\n    } catch (error) {\n      systemChecks.push({\n        name: 'Admin Access',\n        status: 'error',\n        message: `Error: ${error}`,\n        icon: Shield,\n      });\n    }\n\n    setChecks(systemChecks);\n    setLoading(false);\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'ok':\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'warning':\n        return <AlertCircle className=\"h-5 w-5 text-yellow-500\" />;\n      case 'error':\n        return <XCircle className=\"h-5 w-5 text-red-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'ok':\n        return <Badge className=\"bg-green-500\">OK</Badge>;\n      case 'warning':\n        return <Badge className=\"bg-yellow-500\">Warning</Badge>;\n      case 'error':\n        return <Badge variant=\"destructive\">Error</Badge>;\n      default:\n        return null;\n    }\n  };\n\n  if (loading) {\n    return <div className=\"container mx-auto p-6\">Loading system status...</div>;\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-4xl p-6\">\n      <h1 className=\"mb-6 text-3xl font-bold\">System Status Check</h1>\n\n      <div className=\"space-y-4\">\n        {checks.map((check, index) => (\n          <Card key={index}>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <check.icon className=\"text-muted-foreground h-5 w-5\" />\n                  <CardTitle className=\"text-lg\">{check.name}</CardTitle>\n                </div>\n                {getStatusBadge(check.status)}\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-2\">\n                {getStatusIcon(check.status)}\n                <p className=\"text-sm\">{check.message}</p>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <Card className=\"mt-6\">\n        <CardHeader>\n          <CardTitle>Quick Links</CardTitle>\n          <CardDescription>Debug and test pages</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2\">\n            <a href=\"/debug-announcements\" className=\"block text-blue-600 hover:underline\">\n              → Debug Announcements\n            </a>\n            <a href=\"/debug-auth\" className=\"block text-blue-600 hover:underline\">\n              → Debug Authentication\n            </a>\n            <a href=\"/test-admin\" className=\"block text-blue-600 hover:underline\">\n              → Test Admin Route\n            </a>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"mt-6\">\n        <CardHeader>\n          <CardTitle>Console Output</CardTitle>\n          <CardDescription>Check browser console for detailed logs</CardDescription>\n        </CardHeader>\n      </Card>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useExhaustiveDependencies","severity":"warning","description":"runTests changes on every re-render and should not be used as a hook dependency.","message":[{"elements":["Emphasis"],"content":"runTests"},{"elements":[],"content":" changes on every re-render and should not be used as a hook dependency."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"To fix this, wrap the definition of "},{"elements":["Emphasis"],"content":"runTests"},{"elements":[],"content":" in its own "},{"elements":["Emphasis"],"content":"useCallback()"},{"elements":[],"content":" hook."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/test-announcements/page.tsx"},"span":[383,391],"sourceCode":"'use client';\n\nimport { collection, getDocs, orderBy, query, where } from 'firebase/firestore';\nimport { useEffect, useState } from 'react';\nimport { db } from '@/lib/firebase';\nimport { announcementService } from '@/lib/firebase-admin';\n\nexport default function TestAnnouncementsPage() {\n  const [results, setResults] = useState<any>({});\n\n  useEffect(() => {\n    runTests();\n  }, [runTests]);\n\n  async function runTests() {\n    const testResults: any = {};\n\n    // Test 1: Get all documents (no filters)\n    try {\n      const snapshot = await getDocs(collection(db, 'announcements'));\n      testResults.allDocs = {\n        success: true,\n        count: snapshot.size,\n        docs: snapshot.docs.map((d) => ({ id: d.id, ...d.data() })),\n      };\n    } catch (error: any) {\n      testResults.allDocs = { success: false, error: error.message };\n    }\n\n    // Test 2: Simple status filter\n    try {\n      const q = query(collection(db, 'announcements'), where('status', '==', 'published'));\n      const snapshot = await getDocs(q);\n      testResults.statusFilter = {\n        success: true,\n        count: snapshot.size,\n        docs: snapshot.docs.map((d) => ({ id: d.id, ...d.data() })),\n      };\n    } catch (error: any) {\n      testResults.statusFilter = { success: false, error: error.message };\n    }\n\n    // Test 3: Status filter with orderBy createdAt\n    try {\n      const q = query(\n        collection(db, 'announcements'),\n        where('status', '==', 'published'),\n        orderBy('createdAt', 'desc')\n      );\n      const snapshot = await getDocs(q);\n      testResults.statusWithCreatedAt = {\n        success: true,\n        count: snapshot.size,\n      };\n    } catch (error: any) {\n      testResults.statusWithCreatedAt = { success: false, error: error.message };\n    }\n\n    // Test 4: Status filter with orderBy publishedAt\n    try {\n      const q = query(\n        collection(db, 'announcements'),\n        where('status', '==', 'published'),\n        orderBy('publishedAt', 'desc')\n      );\n      const snapshot = await getDocs(q);\n      testResults.statusWithPublishedAt = {\n        success: true,\n        count: snapshot.size,\n      };\n    } catch (error: any) {\n      testResults.statusWithPublishedAt = { success: false, error: error.message };\n    }\n\n    // Test 5: Using announcementService\n    try {\n      const announcements = await announcementService.getAll({\n        status: 'published',\n      });\n      testResults.viaService = {\n        success: true,\n        count: announcements.length,\n        data: announcements,\n      };\n    } catch (error: any) {\n      testResults.viaService = { success: false, error: error.message };\n    }\n\n    // Test 6: Using announcementService without filters\n    try {\n      const announcements = await announcementService.getAll();\n      testResults.viaServiceNoFilter = {\n        success: true,\n        count: announcements.length,\n      };\n    } catch (error: any) {\n      testResults.viaServiceNoFilter = { success: false, error: error.message };\n    }\n\n    setResults(testResults);\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <h1 className=\"mb-4 text-2xl font-bold\">Announcement Query Tests</h1>\n      <pre className=\"overflow-auto rounded bg-gray-100 p-4 text-xs\">\n        {JSON.stringify(results, null, 2)}\n      </pre>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/a11y/noStaticElementInteractions","severity":"warning","description":"Static Elements should not be interactive.","message":[{"elements":[],"content":"Static Elements should not be interactive."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"To add interactivity such as a mouse or key event listener to a static element, give the element an appropriate role value."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/announcements.tsx"},"span":[3008,3238],"sourceCode":"'use client';\n\nimport { formatDistanceToNow } from 'date-fns';\nimport { AlertCircle, ArrowRight, Info, Pin } from 'lucide-react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useAuth } from '@/hooks/use-auth';\nimport { type Announcement, announcementService } from '@/lib/firebase-admin';\nimport { Button } from './ui/button';\n\nexport function Announcements() {\n  const [announcements, setAnnouncements] = useState<Announcement[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { user } = useAuth();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (user) {\n      loadAnnouncements();\n    }\n  }, [user, loadAnnouncements]);\n\n  async function loadAnnouncements() {\n    try {\n      const data = await announcementService.getAll({\n        status: 'published',\n        limitCount: 5,\n        userId: user?.uid,\n        showHidden: false,\n      });\n      setAnnouncements(data);\n    } catch (error) {\n      console.error('Error loading announcements:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\n      case 'normal':\n        return <Info className=\"h-4 w-4 text-blue-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-500';\n      case 'normal':\n        return 'bg-blue-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  if (loading) {\n    return (\n      <Card className=\"flex h-full flex-col shadow-lg\">\n        <CardHeader>\n          <CardTitle>Announcements</CardTitle>\n          <CardDescription>Latest news and updates</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <Skeleton key={i} className=\"h-20 w-full\" />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"flex h-full flex-col shadow-lg\">\n      <CardHeader>\n        <CardTitle>Announcements</CardTitle>\n        <CardDescription>Latest news and updates for families</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex-grow\">\n        <ScrollArea className=\"h-[300px] pr-4\">\n          <div className=\"space-y-6\">\n            {announcements.length === 0 ? (\n              <p className=\"text-muted-foreground py-8 text-center\">\n                No announcements at this time\n              </p>\n            ) : (\n              announcements.map((item) => (\n                <div\n                  key={item.id}\n                  className=\"hover:bg-muted/50 -m-2 flex cursor-pointer gap-4 rounded-lg p-2 transition-colors\"\n                  onClick={() => router.push('/announcements')}\n                >\n                  <div className={`w-1.5 rounded-full ${getPriorityColor(item.priority)}`}></div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-start justify-between gap-2\">\n                      <div className=\"flex items-center gap-2\">\n                        {item.pinned && <Pin className=\"text-muted-foreground h-3 w-3\" />}\n                        <h3 className=\"font-semibold\">{item.title}</h3>\n                      </div>\n                      <p className=\"text-muted-foreground text-xs whitespace-nowrap\">\n                        {item.publishedAt &&\n                          formatDistanceToNow(new Date(item.publishedAt), { addSuffix: true })}\n                      </p>\n                    </div>\n                    <div className=\"mt-1 flex items-center gap-2\">\n                      {getPriorityIcon(item.priority)}\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {item.recipients === 'all' ? 'All Families' : item.recipients}\n                      </Badge>\n                    </div>\n                    <p className=\"text-muted-foreground mt-2 line-clamp-2 text-sm\">\n                      {item.content}\n                    </p>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </ScrollArea>\n      </CardContent>\n      <CardFooter>\n        <Button variant=\"ghost\" className=\"w-full\" asChild>\n          <Link href=\"/announcements\">\n            View All Announcements <ArrowRight className=\"ml-2 h-4 w-4\" />\n          </Link>\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/a11y/useKeyWithClickEvents","severity":"warning","description":"Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.","message":[{"elements":[],"content":"Enforce to have the "},{"elements":["Emphasis"],"content":"onClick"},{"elements":[],"content":" mouse event with the "},{"elements":["Emphasis"],"content":"onKeyUp"},{"elements":[],"content":", the "},{"elements":["Emphasis"],"content":"onKeyDown"},{"elements":[],"content":", or the "},{"elements":["Emphasis"],"content":"onKeyPress"},{"elements":[],"content":" keyboard event."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/announcements.tsx"},"span":[3008,3238],"sourceCode":"'use client';\n\nimport { formatDistanceToNow } from 'date-fns';\nimport { AlertCircle, ArrowRight, Info, Pin } from 'lucide-react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useAuth } from '@/hooks/use-auth';\nimport { type Announcement, announcementService } from '@/lib/firebase-admin';\nimport { Button } from './ui/button';\n\nexport function Announcements() {\n  const [announcements, setAnnouncements] = useState<Announcement[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { user } = useAuth();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (user) {\n      loadAnnouncements();\n    }\n  }, [user, loadAnnouncements]);\n\n  async function loadAnnouncements() {\n    try {\n      const data = await announcementService.getAll({\n        status: 'published',\n        limitCount: 5,\n        userId: user?.uid,\n        showHidden: false,\n      });\n      setAnnouncements(data);\n    } catch (error) {\n      console.error('Error loading announcements:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\n      case 'normal':\n        return <Info className=\"h-4 w-4 text-blue-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-500';\n      case 'normal':\n        return 'bg-blue-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  if (loading) {\n    return (\n      <Card className=\"flex h-full flex-col shadow-lg\">\n        <CardHeader>\n          <CardTitle>Announcements</CardTitle>\n          <CardDescription>Latest news and updates</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <Skeleton key={i} className=\"h-20 w-full\" />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"flex h-full flex-col shadow-lg\">\n      <CardHeader>\n        <CardTitle>Announcements</CardTitle>\n        <CardDescription>Latest news and updates for families</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex-grow\">\n        <ScrollArea className=\"h-[300px] pr-4\">\n          <div className=\"space-y-6\">\n            {announcements.length === 0 ? (\n              <p className=\"text-muted-foreground py-8 text-center\">\n                No announcements at this time\n              </p>\n            ) : (\n              announcements.map((item) => (\n                <div\n                  key={item.id}\n                  className=\"hover:bg-muted/50 -m-2 flex cursor-pointer gap-4 rounded-lg p-2 transition-colors\"\n                  onClick={() => router.push('/announcements')}\n                >\n                  <div className={`w-1.5 rounded-full ${getPriorityColor(item.priority)}`}></div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-start justify-between gap-2\">\n                      <div className=\"flex items-center gap-2\">\n                        {item.pinned && <Pin className=\"text-muted-foreground h-3 w-3\" />}\n                        <h3 className=\"font-semibold\">{item.title}</h3>\n                      </div>\n                      <p className=\"text-muted-foreground text-xs whitespace-nowrap\">\n                        {item.publishedAt &&\n                          formatDistanceToNow(new Date(item.publishedAt), { addSuffix: true })}\n                      </p>\n                    </div>\n                    <div className=\"mt-1 flex items-center gap-2\">\n                      {getPriorityIcon(item.priority)}\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {item.recipients === 'all' ? 'All Families' : item.recipients}\n                      </Badge>\n                    </div>\n                    <p className=\"text-muted-foreground mt-2 line-clamp-2 text-sm\">\n                      {item.content}\n                    </p>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </ScrollArea>\n      </CardContent>\n      <CardFooter>\n        <Button variant=\"ghost\" className=\"w-full\" asChild>\n          <Link href=\"/announcements\">\n            View All Announcements <ArrowRight className=\"ml-2 h-4 w-4\" />\n          </Link>\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useExhaustiveDependencies","severity":"warning","description":"loadAnnouncements changes on every re-render and should not be used as a hook dependency.","message":[{"elements":["Emphasis"],"content":"loadAnnouncements"},{"elements":[],"content":" changes on every re-render and should not be used as a hook dependency."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"To fix this, wrap the definition of "},{"elements":["Emphasis"],"content":"loadAnnouncements"},{"elements":[],"content":" in its own "},{"elements":["Emphasis"],"content":"useCallback()"},{"elements":[],"content":" hook."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/announcements.tsx"},"span":[991,1008],"sourceCode":"'use client';\n\nimport { formatDistanceToNow } from 'date-fns';\nimport { AlertCircle, ArrowRight, Info, Pin } from 'lucide-react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useAuth } from '@/hooks/use-auth';\nimport { type Announcement, announcementService } from '@/lib/firebase-admin';\nimport { Button } from './ui/button';\n\nexport function Announcements() {\n  const [announcements, setAnnouncements] = useState<Announcement[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { user } = useAuth();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (user) {\n      loadAnnouncements();\n    }\n  }, [user, loadAnnouncements]);\n\n  async function loadAnnouncements() {\n    try {\n      const data = await announcementService.getAll({\n        status: 'published',\n        limitCount: 5,\n        userId: user?.uid,\n        showHidden: false,\n      });\n      setAnnouncements(data);\n    } catch (error) {\n      console.error('Error loading announcements:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\n      case 'normal':\n        return <Info className=\"h-4 w-4 text-blue-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-500';\n      case 'normal':\n        return 'bg-blue-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  if (loading) {\n    return (\n      <Card className=\"flex h-full flex-col shadow-lg\">\n        <CardHeader>\n          <CardTitle>Announcements</CardTitle>\n          <CardDescription>Latest news and updates</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <Skeleton key={i} className=\"h-20 w-full\" />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"flex h-full flex-col shadow-lg\">\n      <CardHeader>\n        <CardTitle>Announcements</CardTitle>\n        <CardDescription>Latest news and updates for families</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex-grow\">\n        <ScrollArea className=\"h-[300px] pr-4\">\n          <div className=\"space-y-6\">\n            {announcements.length === 0 ? (\n              <p className=\"text-muted-foreground py-8 text-center\">\n                No announcements at this time\n              </p>\n            ) : (\n              announcements.map((item) => (\n                <div\n                  key={item.id}\n                  className=\"hover:bg-muted/50 -m-2 flex cursor-pointer gap-4 rounded-lg p-2 transition-colors\"\n                  onClick={() => router.push('/announcements')}\n                >\n                  <div className={`w-1.5 rounded-full ${getPriorityColor(item.priority)}`}></div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-start justify-between gap-2\">\n                      <div className=\"flex items-center gap-2\">\n                        {item.pinned && <Pin className=\"text-muted-foreground h-3 w-3\" />}\n                        <h3 className=\"font-semibold\">{item.title}</h3>\n                      </div>\n                      <p className=\"text-muted-foreground text-xs whitespace-nowrap\">\n                        {item.publishedAt &&\n                          formatDistanceToNow(new Date(item.publishedAt), { addSuffix: true })}\n                      </p>\n                    </div>\n                    <div className=\"mt-1 flex items-center gap-2\">\n                      {getPriorityIcon(item.priority)}\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {item.recipients === 'all' ? 'All Families' : item.recipients}\n                      </Badge>\n                    </div>\n                    <p className=\"text-muted-foreground mt-2 line-clamp-2 text-sm\">\n                      {item.content}\n                    </p>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </ScrollArea>\n      </CardContent>\n      <CardFooter>\n        <Button variant=\"ghost\" className=\"w-full\" asChild>\n          <Link href=\"/announcements\">\n            View All Announcements <ArrowRight className=\"ml-2 h-4 w-4\" />\n          </Link>\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"warning","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[837,838],"sourceCode":"import { Skeleton } from '@/components/ui/skeleton';\n\nexport function CalendarSkeleton() {\n  return (\n    <div className=\"space-y-4\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <Skeleton className=\"h-10 w-48\" />\n        <div className=\"flex gap-2\">\n          <Skeleton className=\"h-10 w-10 rounded-full\" />\n          <Skeleton className=\"h-10 w-10 rounded-full\" />\n        </div>\n      </div>\n\n      {/* Days of week */}\n      <div className=\"grid grid-cols-7 gap-2\">\n        {['S', 'M', 'T', 'W', 'T', 'F', 'S'].map((day) => (\n          <div key={day} className=\"text-center\">\n            <Skeleton className=\"mx-auto h-6 w-6\" />\n          </div>\n        ))}\n      </div>\n\n      {/* Calendar grid */}\n      <div className=\"grid grid-cols-7 gap-2\">\n        {Array.from({ length: 35 }).map((_, i) => (\n          <Skeleton\n            key={i}\n            className=\"h-20 w-full rounded-md\"\n            style={{\n              animationDelay: `${i * 0.02}s`,\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/loading/calendar-skeleton.tsx"},"span":[882,883],"sourceCode":"import { Skeleton } from '@/components/ui/skeleton';\n\nexport function CalendarSkeleton() {\n  return (\n    <div className=\"space-y-4\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <Skeleton className=\"h-10 w-48\" />\n        <div className=\"flex gap-2\">\n          <Skeleton className=\"h-10 w-10 rounded-full\" />\n          <Skeleton className=\"h-10 w-10 rounded-full\" />\n        </div>\n      </div>\n\n      {/* Days of week */}\n      <div className=\"grid grid-cols-7 gap-2\">\n        {['S', 'M', 'T', 'W', 'T', 'F', 'S'].map((day) => (\n          <div key={day} className=\"text-center\">\n            <Skeleton className=\"mx-auto h-6 w-6\" />\n          </div>\n        ))}\n      </div>\n\n      {/* Calendar grid */}\n      <div className=\"grid grid-cols-7 gap-2\">\n        {Array.from({ length: 35 }).map((_, i) => (\n          <Skeleton\n            key={i}\n            className=\"h-20 w-full rounded-md\"\n            style={{\n              animationDelay: `${i * 0.02}s`,\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"warning","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[399,400],"sourceCode":"import { Skeleton } from '@/components/ui/skeleton';\n\ninterface FormSkeletonProps {\n  fields?: number;\n  showButtons?: boolean;\n}\n\nexport function FormSkeleton({ fields = 4, showButtons = true }: FormSkeletonProps) {\n  return (\n    <div className=\"space-y-6\">\n      {/* Form title */}\n      <Skeleton className=\"h-8 w-3/4\" />\n\n      {/* Form fields */}\n      {Array.from({ length: fields }).map((_, i) => (\n        <div key={i} className=\"space-y-2\">\n          <Skeleton className=\"h-4 w-24\" />\n          <Skeleton className=\"h-10 w-full\" />\n          {i === 0 && <Skeleton className=\"h-3 w-48 opacity-50\" />}\n        </div>\n      ))}\n\n      {/* Buttons */}\n      {showButtons && (\n        <div className=\"flex gap-4 pt-4\">\n          <Skeleton className=\"h-10 w-32\" />\n          <Skeleton className=\"h-10 w-32\" />\n        </div>\n      )}\n    </div>\n  );\n}\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/loading/form-skeleton.tsx"},"span":[425,426],"sourceCode":"import { Skeleton } from '@/components/ui/skeleton';\n\ninterface FormSkeletonProps {\n  fields?: number;\n  showButtons?: boolean;\n}\n\nexport function FormSkeleton({ fields = 4, showButtons = true }: FormSkeletonProps) {\n  return (\n    <div className=\"space-y-6\">\n      {/* Form title */}\n      <Skeleton className=\"h-8 w-3/4\" />\n\n      {/* Form fields */}\n      {Array.from({ length: fields }).map((_, i) => (\n        <div key={i} className=\"space-y-2\">\n          <Skeleton className=\"h-4 w-24\" />\n          <Skeleton className=\"h-10 w-full\" />\n          {i === 0 && <Skeleton className=\"h-3 w-48 opacity-50\" />}\n        </div>\n      ))}\n\n      {/* Buttons */}\n      {showButtons && (\n        <div className=\"flex gap-4 pt-4\">\n          <Skeleton className=\"h-10 w-32\" />\n          <Skeleton className=\"h-10 w-32\" />\n        </div>\n      )}\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"warning","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[515,516],"sourceCode":"import { Skeleton } from '@/components/ui/skeleton';\nimport { cn } from '@/lib/utils';\n\ninterface SkeletonWrapperProps {\n  className?: string;\n  height?: string;\n  width?: string;\n  count?: number;\n  children?: React.ReactNode;\n}\n\nexport function SkeletonWrapper({\n  className,\n  height = 'h-96',\n  width = 'w-full',\n  count = 1,\n  children,\n}: SkeletonWrapperProps) {\n  if (children) return <>{children}</>;\n\n  return (\n    <div className={cn('space-y-4', className)}>\n      {Array.from({ length: count }).map((_, i) => (\n        <Skeleton key={i} className={cn(height, width)} />\n      ))}\n    </div>\n  );\n}\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/loading/skeleton-wrapper.tsx"},"span":[546,547],"sourceCode":"import { Skeleton } from '@/components/ui/skeleton';\nimport { cn } from '@/lib/utils';\n\ninterface SkeletonWrapperProps {\n  className?: string;\n  height?: string;\n  width?: string;\n  count?: number;\n  children?: React.ReactNode;\n}\n\nexport function SkeletonWrapper({\n  className,\n  height = 'h-96',\n  width = 'w-full',\n  count = 1,\n  children,\n}: SkeletonWrapperProps) {\n  if (children) return <>{children}</>;\n\n  return (\n    <div className={cn('space-y-4', className)}>\n      {Array.from({ length: count }).map((_, i) => (\n        <Skeleton key={i} className={cn(height, width)} />\n      ))}\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"warning","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[396,397],"sourceCode":"import { Skeleton } from '@/components/ui/skeleton';\n\ninterface TableSkeletonProps {\n  rows?: number;\n  columns?: number;\n}\n\nexport function TableSkeleton({ rows = 5, columns = 4 }: TableSkeletonProps) {\n  return (\n    <div className=\"w-full\">\n      {/* Table header */}\n      <div className=\"border-b\">\n        <div className=\"flex gap-4 p-4\">\n          {Array.from({ length: columns }).map((_, i) => (\n            <Skeleton key={i} className=\"h-4 flex-1\" />\n          ))}\n        </div>\n      </div>\n\n      {/* Table rows */}\n      {Array.from({ length: rows }).map((_, rowIndex) => (\n        <div key={rowIndex} className=\"border-b\">\n          <div className=\"flex gap-4 p-4\">\n            {Array.from({ length: columns }).map((_, colIndex) => (\n              <Skeleton\n                key={colIndex}\n                className=\"h-4 flex-1\"\n                style={{\n                  width: colIndex === 0 ? '40%' : '20%',\n                }}\n              />\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/loading/table-skeleton.tsx"},"span":[431,432],"sourceCode":"import { Skeleton } from '@/components/ui/skeleton';\n\ninterface TableSkeletonProps {\n  rows?: number;\n  columns?: number;\n}\n\nexport function TableSkeleton({ rows = 5, columns = 4 }: TableSkeletonProps) {\n  return (\n    <div className=\"w-full\">\n      {/* Table header */}\n      <div className=\"border-b\">\n        <div className=\"flex gap-4 p-4\">\n          {Array.from({ length: columns }).map((_, i) => (\n            <Skeleton key={i} className=\"h-4 flex-1\" />\n          ))}\n        </div>\n      </div>\n\n      {/* Table rows */}\n      {Array.from({ length: rows }).map((_, rowIndex) => (\n        <div key={rowIndex} className=\"border-b\">\n          <div className=\"flex gap-4 p-4\">\n            {Array.from({ length: columns }).map((_, colIndex) => (\n              <Skeleton\n                key={colIndex}\n                className=\"h-4 flex-1\"\n                style={{\n                  width: colIndex === 0 ? '40%' : '20%',\n                }}\n              />\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"warning","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[572,580],"sourceCode":"import { Skeleton } from '@/components/ui/skeleton';\n\ninterface TableSkeletonProps {\n  rows?: number;\n  columns?: number;\n}\n\nexport function TableSkeleton({ rows = 5, columns = 4 }: TableSkeletonProps) {\n  return (\n    <div className=\"w-full\">\n      {/* Table header */}\n      <div className=\"border-b\">\n        <div className=\"flex gap-4 p-4\">\n          {Array.from({ length: columns }).map((_, i) => (\n            <Skeleton key={i} className=\"h-4 flex-1\" />\n          ))}\n        </div>\n      </div>\n\n      {/* Table rows */}\n      {Array.from({ length: rows }).map((_, rowIndex) => (\n        <div key={rowIndex} className=\"border-b\">\n          <div className=\"flex gap-4 p-4\">\n            {Array.from({ length: columns }).map((_, colIndex) => (\n              <Skeleton\n                key={colIndex}\n                className=\"h-4 flex-1\"\n                style={{\n                  width: colIndex === 0 ? '40%' : '20%',\n                }}\n              />\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/loading/table-skeleton.tsx"},"span":[605,613],"sourceCode":"import { Skeleton } from '@/components/ui/skeleton';\n\ninterface TableSkeletonProps {\n  rows?: number;\n  columns?: number;\n}\n\nexport function TableSkeleton({ rows = 5, columns = 4 }: TableSkeletonProps) {\n  return (\n    <div className=\"w-full\">\n      {/* Table header */}\n      <div className=\"border-b\">\n        <div className=\"flex gap-4 p-4\">\n          {Array.from({ length: columns }).map((_, i) => (\n            <Skeleton key={i} className=\"h-4 flex-1\" />\n          ))}\n        </div>\n      </div>\n\n      {/* Table rows */}\n      {Array.from({ length: rows }).map((_, rowIndex) => (\n        <div key={rowIndex} className=\"border-b\">\n          <div className=\"flex gap-4 p-4\">\n            {Array.from({ length: columns }).map((_, colIndex) => (\n              <Skeleton\n                key={colIndex}\n                className=\"h-4 flex-1\"\n                style={{\n                  width: colIndex === 0 ? '40%' : '20%',\n                }}\n              />\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"warning","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[733,741],"sourceCode":"import { Skeleton } from '@/components/ui/skeleton';\n\ninterface TableSkeletonProps {\n  rows?: number;\n  columns?: number;\n}\n\nexport function TableSkeleton({ rows = 5, columns = 4 }: TableSkeletonProps) {\n  return (\n    <div className=\"w-full\">\n      {/* Table header */}\n      <div className=\"border-b\">\n        <div className=\"flex gap-4 p-4\">\n          {Array.from({ length: columns }).map((_, i) => (\n            <Skeleton key={i} className=\"h-4 flex-1\" />\n          ))}\n        </div>\n      </div>\n\n      {/* Table rows */}\n      {Array.from({ length: rows }).map((_, rowIndex) => (\n        <div key={rowIndex} className=\"border-b\">\n          <div className=\"flex gap-4 p-4\">\n            {Array.from({ length: columns }).map((_, colIndex) => (\n              <Skeleton\n                key={colIndex}\n                className=\"h-4 flex-1\"\n                style={{\n                  width: colIndex === 0 ? '40%' : '20%',\n                }}\n              />\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/loading/table-skeleton.tsx"},"span":[793,801],"sourceCode":"import { Skeleton } from '@/components/ui/skeleton';\n\ninterface TableSkeletonProps {\n  rows?: number;\n  columns?: number;\n}\n\nexport function TableSkeleton({ rows = 5, columns = 4 }: TableSkeletonProps) {\n  return (\n    <div className=\"w-full\">\n      {/* Table header */}\n      <div className=\"border-b\">\n        <div className=\"flex gap-4 p-4\">\n          {Array.from({ length: columns }).map((_, i) => (\n            <Skeleton key={i} className=\"h-4 flex-1\" />\n          ))}\n        </div>\n      </div>\n\n      {/* Table rows */}\n      {Array.from({ length: rows }).map((_, rowIndex) => (\n        <div key={rowIndex} className=\"border-b\">\n          <div className=\"flex gap-4 p-4\">\n            {Array.from({ length: columns }).map((_, colIndex) => (\n              <Skeleton\n                key={colIndex}\n                className=\"h-4 flex-1\"\n                style={{\n                  width: colIndex === 0 ? '40%' : '20%',\n                }}\n              />\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/a11y/noSvgWithoutTitle","severity":"warning","description":"Alternative text title element cannot be empty","message":[{"elements":[],"content":"Alternative text "},{"elements":["Emphasis"],"content":"title"},{"elements":[],"content":" element cannot be empty"}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"For accessibility purposes, "},{"elements":["Emphasis"],"content":"SVGs"},{"elements":[],"content":" should have an alternative text, provided via "},{"elements":["Emphasis"],"content":"title"},{"elements":[],"content":" element. If the svg element has role=\"img\", you should add the "},{"elements":["Emphasis"],"content":"aria-label"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"aria-labelledby"},{"elements":[],"content":" attribute."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/public-header.tsx"},"span":[848,1143],"sourceCode":"'use client';\n\nimport { Menu } from 'lucide-react';\nimport Link from 'next/link';\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\nimport { useAuth } from '@/hooks/use-auth';\n\nconst navItems = [\n  { href: '/', label: 'Home' },\n  { href: '/programs', label: 'Programs' },\n  { href: '/schedule', label: 'Schedule' },\n  { href: '/resources', label: 'Resources' },\n];\n\nexport function PublicHeader() {\n  const { user } = useAuth();\n  const [open, setOpen] = useState(false);\n\n  return (\n    <header className=\"bg-background/95 supports-[backdrop-filter]:bg-background/60 sticky top-0 z-50 w-full border-b backdrop-blur\">\n      <div className=\"container flex h-16 items-center\">\n        <div className=\"mr-8 flex items-center gap-2\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            className=\"text-primary h-6 w-6\"\n          >\n            <path d=\"M12 2L2 7l10 5 10-5-10-5z\" />\n            <path d=\"M2 17l10 5 10-5\" />\n            <path d=\"M2 12l10 5 10-5\" />\n          </svg>\n          <span className=\"hidden text-lg font-bold sm:inline-block\">Homer Enrichment Hub</span>\n          <span className=\"text-lg font-bold sm:hidden\">HEH</span>\n        </div>\n\n        <nav className=\"hidden flex-1 items-center space-x-6 text-sm font-medium md:flex\">\n          {navItems.map((item) => (\n            <Link\n              key={item.href}\n              href={item.href}\n              className=\"hover:text-foreground/80 text-foreground/60 transition-colors\"\n            >\n              {item.label}\n            </Link>\n          ))}\n        </nav>\n\n        <div className=\"ml-auto flex items-center gap-4\">\n          {user ? (\n            <Button asChild variant=\"default\" size=\"sm\">\n              <Link href=\"/dashboard\">Parent Portal</Link>\n            </Button>\n          ) : (\n            <>\n              <Button asChild variant=\"ghost\" size=\"sm\" className=\"hidden sm:flex\">\n                <Link href=\"/\">Sign In</Link>\n              </Button>\n              <Button asChild variant=\"default\" size=\"sm\">\n                <Link href=\"/register\">Register</Link>\n              </Button>\n            </>\n          )}\n\n          <Sheet open={open} onOpenChange={setOpen}>\n            <SheetTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\">\n                <Menu className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Toggle menu</span>\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"right\">\n              <nav className=\"flex flex-col gap-4\">\n                {navItems.map((item) => (\n                  <Link\n                    key={item.href}\n                    href={item.href}\n                    className=\"text-lg font-medium\"\n                    onClick={() => setOpen(false)}\n                  >\n                    {item.label}\n                  </Link>\n                ))}\n                {!user && (\n                  <Link href=\"/\" className=\"text-lg font-medium\" onClick={() => setOpen(false)}>\n                    Sign In\n                  </Link>\n                )}\n              </nav>\n            </SheetContent>\n          </Sheet>\n        </div>\n      </div>\n    </header>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/a11y/noSvgWithoutTitle","severity":"warning","description":"Alternative text title element cannot be empty","message":[{"elements":[],"content":"Alternative text "},{"elements":["Emphasis"],"content":"title"},{"elements":[],"content":" element cannot be empty"}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"For accessibility purposes, "},{"elements":["Emphasis"],"content":"SVGs"},{"elements":[],"content":" should have an alternative text, provided via "},{"elements":["Emphasis"],"content":"title"},{"elements":[],"content":" element. If the svg element has role=\"img\", you should add the "},{"elements":["Emphasis"],"content":"aria-label"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"aria-labelledby"},{"elements":[],"content":" attribute."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/simple-header.tsx"},"span":[1277,1554],"sourceCode":"'use client';\n\nimport { doc, getDoc } from 'firebase/firestore';\nimport { Home, LogOut, Shield, User } from 'lucide-react';\nimport Link from 'next/link';\nimport { useEffect, useState } from 'react';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { useAuth } from '@/hooks/use-auth';\nimport { db } from '@/lib/firebase';\n\nexport function SimpleHeader() {\n  const { user, signOut } = useAuth();\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  useEffect(() => {\n    async function checkAdmin() {\n      if (user) {\n        try {\n          const adminDoc = await getDoc(doc(db, 'admins', user.uid));\n          setIsAdmin(adminDoc.exists());\n        } catch (error) {\n          console.error('Error checking admin status:', error);\n          setIsAdmin(false);\n        }\n      }\n    }\n    checkAdmin();\n  }, [user]);\n\n  return (\n    <header className=\"bg-card sticky top-0 z-20 flex h-16 shrink-0 items-center gap-4 border-b px-4 lg:px-6\">\n      <Link href=\"/dashboard\" className=\"flex items-center gap-2\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          className=\"text-primary h-8 w-8\"\n        >\n          <path d=\"M12 2L2 7l10 5 10-5-10-5z\" />\n          <path d=\"M2 17l10 5 10-5\" />\n          <path d=\"M2 12l10 5 10-5\" />\n        </svg>\n        <h1 className=\"text-lg font-bold\">Homer Enrichment Hub</h1>\n      </Link>\n\n      <div className=\"ml-auto flex items-center gap-2\">\n        {user && (\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"relative h-10 w-10 rounded-full\">\n                <Avatar className=\"h-10 w-10\">\n                  <AvatarImage\n                    src={user.photoURL || 'https://placehold.co/100x100.png'}\n                    alt={user.displayName || 'User'}\n                  />\n                  <AvatarFallback>\n                    {user.displayName?.charAt(0) || user.email?.charAt(0) || 'U'}\n                  </AvatarFallback>\n                </Avatar>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"w-56\" align=\"end\">\n              <DropdownMenuLabel>\n                <p>{user.displayName || 'User'}</p>\n                <p className=\"text-muted-foreground text-xs font-normal\">{user.email}</p>\n              </DropdownMenuLabel>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem asChild>\n                <Link href=\"/dashboard\">\n                  <Home className=\"mr-2 h-4 w-4\" />\n                  <span>Dashboard</span>\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuItem asChild>\n                <Link href=\"/profile\">\n                  <User className=\"mr-2 h-4 w-4\" />\n                  <span>Profile</span>\n                </Link>\n              </DropdownMenuItem>\n              {isAdmin && (\n                <DropdownMenuItem asChild>\n                  <Link href=\"/admin\">\n                    <Shield className=\"mr-2 h-4 w-4\" />\n                    <span>Admin Panel</span>\n                  </Link>\n                </DropdownMenuItem>\n              )}\n              <DropdownMenuSeparator />\n              <DropdownMenuItem onClick={signOut}>\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                <span>Log out</span>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        )}\n      </div>\n    </header>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/security/noDangerouslySetInnerHtml","severity":"warning","description":"Avoid passing content using the dangerouslySetInnerHTML prop.","message":[{"elements":[],"content":"Avoid passing content using the "},{"elements":["Emphasis"],"content":"dangerouslySetInnerHTML"},{"elements":[],"content":" prop."}],"advices":{"advices":[{"log":["warn",[{"elements":[],"content":"Setting content using code can expose users to cross-site scripting (XSS) attacks"}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/ui/chart.tsx"},"span":[2521,2544],"sourceCode":"'use client';\n\nimport * as React from 'react';\nimport * as RechartsPrimitive from 'recharts';\n\nimport { cn } from '@/lib/utils';\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: '', dark: '.dark' } as const;\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  );\n};\n\ntype ChartContextProps = {\n  config: ChartConfig;\n};\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null);\n\nfunction useChart() {\n  const context = React.useContext(ChartContext);\n\n  if (!context) {\n    throw new Error('useChart must be used within a <ChartContainer />');\n  }\n\n  return context;\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    config: ChartConfig;\n    children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>['children'];\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId();\n  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`;\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-sector]:outline-none [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  );\n});\nChartContainer.displayName = 'Chart';\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(([, config]) => config.theme || config.color);\n\n  if (!colorConfig.length) {\n    return null;\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color;\n    return color ? `  --color-${key}: ${color};` : null;\n  })\n  .join('\\n')}\n}\n`\n          )\n          .join('\\n'),\n      }}\n    />\n  );\n};\n\nconst ChartTooltip = RechartsPrimitive.Tooltip;\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  Omit<React.ComponentProps<'div'>, 'content'> & {\n    active?: boolean;\n    payload?: Array<{\n      value: number | string;\n      name: string;\n      dataKey: string;\n      color?: string;\n      payload?: Record<string, unknown>;\n    }>;\n    label?: string;\n    hideLabel?: boolean;\n    hideIndicator?: boolean;\n    indicator?: 'line' | 'dot' | 'dashed';\n    nameKey?: string;\n    labelKey?: string;\n    labelFormatter?: (\n      value: string | number,\n      payload: Array<Record<string, unknown>>\n    ) => React.ReactNode;\n    formatter?: (value: number | string, name: string) => React.ReactNode;\n    color?: string;\n    labelClassName?: string;\n  }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = 'dot',\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart();\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null;\n      }\n\n      const [item] = payload;\n      const key = `${labelKey || item.dataKey || item.name || 'value'}`;\n      const itemConfig = getPayloadConfigFromPayload(config, item, key);\n      const value =\n        !labelKey && typeof label === 'string'\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label;\n\n      if (labelFormatter) {\n        const normalized =\n          typeof value === 'string' || typeof value === 'number' ? value : String(value);\n        return (\n          <div className={cn('font-medium', labelClassName)}>\n            {labelFormatter(normalized, payload)}\n          </div>\n        );\n      }\n\n      if (!value) {\n        return null;\n      }\n\n      return <div className={cn('font-medium', labelClassName)}>{value}</div>;\n    }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);\n\n    if (!active || !payload?.length) {\n      return null;\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== 'dot';\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl',\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, _index) => {\n            const key = `${nameKey || item.name || item.dataKey || 'value'}`;\n            const itemConfig = getPayloadConfigFromPayload(config, item, key);\n            const indicatorColor = color || getPayloadFill(item.payload) || item.color;\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  '[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5',\n                  indicator === 'dot' && 'items-center'\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            'shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]',\n                            {\n                              'h-2.5 w-2.5': indicator === 'dot',\n                              'w-1': indicator === 'line',\n                              'w-0 border-[1.5px] border-dashed bg-transparent':\n                                indicator === 'dashed',\n                              'my-0.5': nestLabel && indicator === 'dashed',\n                            }\n                          )}\n                          style={\n                            {\n                              '--color-bg': indicatorColor,\n                              '--color-border': indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        'flex flex-1 justify-between leading-none',\n                        nestLabel ? 'items-end' : 'items-center'\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n);\nChartTooltipContent.displayName = 'ChartTooltip';\n\nconst ChartLegend = RechartsPrimitive.Legend;\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    payload?: Array<{\n      value: string;\n      type?: string;\n      id?: string;\n      color?: string;\n      dataKey?: string;\n    }>;\n    verticalAlign?: 'top' | 'bottom';\n    hideIcon?: boolean;\n    nameKey?: string;\n  }\n>(({ className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey }, ref) => {\n  const { config } = useChart();\n\n  if (!payload?.length) {\n    return null;\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'flex items-center justify-center gap-4',\n        verticalAlign === 'top' ? 'pb-3' : 'pt-3',\n        className\n      )}\n    >\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || 'value'}`;\n        const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n        return (\n          <div\n            key={item.value}\n            className={cn(\n              '[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3'\n            )}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        );\n      })}\n    </div>\n  );\n});\nChartLegendContent.displayName = 'ChartLegend';\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {\n  if (typeof payload !== 'object' || payload === null) {\n    return undefined;\n  }\n\n  const payloadPayload =\n    'payload' in payload && typeof payload.payload === 'object' && payload.payload !== null\n      ? payload.payload\n      : undefined;\n\n  let configLabelKey: string = key;\n\n  if (key in payload && typeof payload[key as keyof typeof payload] === 'string') {\n    configLabelKey = payload[key as keyof typeof payload] as string;\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\n  ) {\n    configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string;\n  }\n\n  return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config];\n}\n\n// Safely extract a 'fill' color from an arbitrary payload record\nfunction getPayloadFill(payload?: Record<string, unknown>): string | undefined {\n  const fill = payload?.fill;\n  return typeof fill === 'string' ? fill : undefined;\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noDocumentCookie","severity":"warning","description":"Direct assigning to document.cookie is not recommended.","message":[{"elements":[],"content":"Direct assigning to "},{"elements":["Emphasis"],"content":"document.cookie"},{"elements":[],"content":" is not recommended."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Consider using the "},{"elements":[{"Hyperlink":{"href":"https://developer.mozilla.org/en-US/docs/Web/API/CookieStore"}}],"content":"Cookie Store API"},{"elements":[],"content":"."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/ui/sidebar.tsx"},"span":[2443,2541],"sourceCode":"'use client';\n\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { PanelLeft } from 'lucide-react';\nimport * as React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Separator } from '@/components/ui/separator';\nimport { Sheet, SheetContent } from '@/components/ui/sheet';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { useIsMobile } from '@/hooks/use-mobile';\nimport { cn } from '@/lib/utils';\n\nconst SIDEBAR_COOKIE_NAME = 'sidebar_state';\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = '16rem';\nconst SIDEBAR_WIDTH_MOBILE = '18rem';\nconst SIDEBAR_WIDTH_ICON = '3rem';\nconst SIDEBAR_KEYBOARD_SHORTCUT = 'b';\n\ntype SidebarContext = {\n  state: 'expanded' | 'collapsed';\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error('useSidebar must be used within a SidebarProvider.');\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === 'function' ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n      },\n      [setOpenProp, open]\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);\n    }, [isMobile, setOpen]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      window.addEventListener('keydown', handleKeyDown);\n      return () => window.removeEventListener('keydown', handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? 'expanded' : 'collapsed';\n\n    // Update CSS variable based on state\n    // Update CSS variable based on sidebar state\n    React.useEffect(() => {\n      const root = document.documentElement;\n      if (state === 'collapsed') {\n        root.style.setProperty('--sidebar-width', SIDEBAR_WIDTH_ICON);\n      } else {\n        root.style.setProperty('--sidebar-width', SIDEBAR_WIDTH);\n      }\n    }, [state]);\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, toggleSidebar]\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                '--sidebar-width': SIDEBAR_WIDTH,\n                '--sidebar-width-icon': SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              'group/sidebar-wrapper has-[[data-variant=inset]]:bg-sidebar flex min-h-svh w-full',\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  }\n);\nSidebarProvider.displayName = 'SidebarProvider';\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    side?: 'left' | 'right';\n    variant?: 'sidebar' | 'floating' | 'inset';\n    collapsible?: 'offcanvas' | 'icon' | 'none';\n  }\n>(\n  (\n    {\n      side = 'left',\n      variant = 'sidebar',\n      collapsible = 'offcanvas',\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === 'none') {\n      return (\n        <div\n          className={cn(\n            'bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col',\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n            style={\n              {\n                '--sidebar-width': SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer text-sidebar-foreground hidden md:flex\"\n        data-state={state}\n        data-collapsible={state === 'collapsed' ? collapsible : ''}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            'relative h-svh w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear',\n            'group-data-[collapsible=offcanvas]:w-0',\n            'group-data-[side=right]:rotate-180',\n            variant === 'floating' || variant === 'inset'\n              ? 'group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]'\n              : 'group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]'\n          )}\n        />\n        <div\n          className={cn(\n            'fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex',\n            side === 'left'\n              ? 'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'\n              : 'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',\n            // Adjust the padding for floating and inset variants.\n            variant === 'floating' || variant === 'inset'\n              ? 'p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]'\n              : 'group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l',\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"bg-sidebar text-sidebar-foreground group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\nSidebar.displayName = 'Sidebar';\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn('h-7 w-7', className)}\n      onClick={(event) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n});\nSidebarTrigger.displayName = 'SidebarTrigger';\n\nconst SidebarRail = React.forwardRef<HTMLButtonElement, React.ComponentProps<'button'>>(\n  ({ className, ...props }, ref) => {\n    const { toggleSidebar } = useSidebar();\n\n    return (\n      <button\n        ref={ref}\n        data-sidebar=\"rail\"\n        aria-label=\"Toggle Sidebar\"\n        tabIndex={-1}\n        onClick={toggleSidebar}\n        title=\"Toggle Sidebar\"\n        className={cn(\n          'hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex',\n          '[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize',\n          '[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',\n          'group-data-[collapsible=offcanvas]:hover:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full',\n          '[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',\n          '[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',\n          className\n        )}\n        {...props}\n      />\n    );\n  }\n);\nSidebarRail.displayName = 'SidebarRail';\n\nconst SidebarInset = React.forwardRef<HTMLDivElement, React.ComponentProps<'main'>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <main\n        ref={ref}\n        className={cn(\n          'bg-background relative flex min-h-svh flex-1 flex-col',\n          // For variant=inset, we might need specific margin handling\n          'peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow',\n          className\n        )}\n        {...props}\n      />\n    );\n  }\n);\nSidebarInset.displayName = 'SidebarInset';\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        'bg-background focus-visible:ring-sidebar-ring h-8 w-full shadow-none focus-visible:ring-2',\n        className\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInput.displayName = 'SidebarInput';\n\nconst SidebarHeader = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        data-sidebar=\"header\"\n        className={cn('flex flex-col gap-2 p-2', className)}\n        {...props}\n      />\n    );\n  }\n);\nSidebarHeader.displayName = 'SidebarHeader';\n\nconst SidebarFooter = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        data-sidebar=\"footer\"\n        className={cn('flex flex-col gap-2 p-2', className)}\n        {...props}\n      />\n    );\n  }\n);\nSidebarFooter.displayName = 'SidebarFooter';\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn('bg-sidebar-border mx-2 w-auto', className)}\n      {...props}\n    />\n  );\n});\nSidebarSeparator.displayName = 'SidebarSeparator';\n\nconst SidebarContent = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        data-sidebar=\"content\"\n        className={cn(\n          'flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden',\n          className\n        )}\n        {...props}\n      />\n    );\n  }\n);\nSidebarContent.displayName = 'SidebarContent';\n\nconst SidebarGroup = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        data-sidebar=\"group\"\n        className={cn('relative flex w-full min-w-0 flex-col p-2', className)}\n        {...props}\n      />\n    );\n  }\n);\nSidebarGroup.displayName = 'SidebarGroup';\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        'text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium transition-[margin,opa] duration-200 ease-linear outline-none focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\n        'group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0',\n        className\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = 'SidebarGroupLabel';\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<'button'> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : 'button';\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 transition-transform outline-none focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\n        // Increases the hit area of the button on mobile.\n        'after:absolute after:-inset-2 after:md:hidden',\n        'group-data-[collapsible=icon]:hidden',\n        className\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = 'SidebarGroupAction';\n\nconst SidebarGroupContent = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      data-sidebar=\"group-content\"\n      className={cn('w-full text-sm', className)}\n      {...props}\n    />\n  )\n);\nSidebarGroupContent.displayName = 'SidebarGroupContent';\n\nconst SidebarMenu = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(\n  ({ className, ...props }, ref) => (\n    <ul\n      ref={ref}\n      data-sidebar=\"menu\"\n      className={cn('flex w-full min-w-0 flex-col gap-1', className)}\n      {...props}\n    />\n  )\n);\nSidebarMenu.displayName = 'SidebarMenu';\n\nconst SidebarMenuItem = React.forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(\n  ({ className, ...props }, ref) => (\n    <li\n      ref={ref}\n      data-sidebar=\"menu-item\"\n      className={cn('group/menu-item relative', className)}\n      {...props}\n    />\n  )\n);\nSidebarMenuItem.displayName = 'SidebarMenuItem';\n\nconst sidebarMenuButtonVariants = cva(\n  'peer/menu-button ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm transition-[width,height,padding] outline-none group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:font-medium [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        default: 'hover:bg-sidebar-accent hover:text-sidebar-accent-foreground',\n        outline:\n          'bg-background hover:bg-sidebar-accent hover:text-sidebar-accent-foreground shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]',\n      },\n      size: {\n        default: 'h-8 text-sm',\n        sm: 'h-7 text-xs',\n        lg: 'h-12 text-sm group-data-[collapsible=icon]:!p-0',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<'button'> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = 'default',\n      size = 'default',\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : 'button';\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (!tooltip) {\n      return button;\n    }\n\n    if (typeof tooltip === 'string') {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== 'collapsed' || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  }\n);\nSidebarMenuButton.displayName = 'SidebarMenuButton';\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<'button'> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : 'button';\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 transition-transform outline-none focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\n        // Increases the hit area of the button on mobile.\n        'after:absolute after:-inset-2 after:md:hidden',\n        'peer-data-[size=sm]/menu-button:top-1',\n        'peer-data-[size=default]/menu-button:top-1.5',\n        'peer-data-[size=lg]/menu-button:top-2.5',\n        'group-data-[collapsible=icon]:hidden',\n        showOnHover &&\n          'peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0',\n        className\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = 'SidebarMenuAction';\n\nconst SidebarMenuBadge = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        'text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none',\n        'peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground',\n        'peer-data-[size=sm]/menu-button:top-1',\n        'peer-data-[size=default]/menu-button:top-1.5',\n        'peer-data-[size=lg]/menu-button:top-2.5',\n        'group-data-[collapsible=icon]:hidden',\n        className\n      )}\n      {...props}\n    />\n  )\n);\nSidebarMenuBadge.displayName = 'SidebarMenuBadge';\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn('flex h-8 items-center gap-2 rounded-md px-2', className)}\n      {...props}\n    >\n      {showIcon && <Skeleton className=\"size-4 rounded-md\" data-sidebar=\"menu-skeleton-icon\" />}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            '--skeleton-width': width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = 'SidebarMenuSkeleton';\n\nconst SidebarMenuSub = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(\n  ({ className, ...props }, ref) => (\n    <ul\n      ref={ref}\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        'border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5',\n        'group-data-[collapsible=icon]:hidden',\n        className\n      )}\n      {...props}\n    />\n  )\n);\nSidebarMenuSub.displayName = 'SidebarMenuSub';\n\nconst SidebarMenuSubItem = React.forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(\n  ({ ...props }, ref) => <li ref={ref} {...props} />\n);\nSidebarMenuSubItem.displayName = 'SidebarMenuSubItem';\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<'a'> & {\n    asChild?: boolean;\n    size?: 'sm' | 'md';\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = 'md', isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : 'a';\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-none focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',\n        'data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground',\n        size === 'sm' && 'text-xs',\n        size === 'md' && 'text-sm',\n        'group-data-[collapsible=icon]:hidden',\n        className\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = 'SidebarMenuSubButton';\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n"},"tags":[],"source":null},{"category":"lint/correctness/useUniqueElementIds","severity":"error","description":"id attribute should not be a static string literal. Generate unique IDs using useId().","message":[{"elements":["Emphasis"],"content":"id"},{"elements":[],"content":" attribute should not be a static string literal. Generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/admin/communications/compose/page.tsx"},"span":[5070,5226],"sourceCode":"'use client';\n\nimport { ArrowLeft, Save, Send } from 'lucide-react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useAdmin } from '@/hooks/use-admin';\nimport { useToast } from '@/hooks/use-toast';\nimport { announcementService } from '@/lib/firebase-admin';\n\nexport default function ComposeAnnouncementPage() {\n  const router = useRouter();\n  const { admin } = useAdmin();\n  const { toast } = useToast();\n\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [recipients, setRecipients] = useState<'all' | 'mathcounts' | 'enrichment'>('all');\n  const [priority, setPriority] = useState<'low' | 'normal' | 'high'>('normal');\n  const [pinned, setPinned] = useState(false);\n  const [sending, setSending] = useState(false);\n\n  async function handleSubmit(status: 'draft' | 'published') {\n    if (!title || !content) {\n      toast({\n        title: 'Error',\n        description: 'Please fill in all required fields',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    if (!admin) {\n      toast({\n        title: 'Error',\n        description: 'Admin session not found',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setSending(true);\n\n    try {\n      await announcementService.create({\n        title,\n        content,\n        priority,\n        recipients,\n        status,\n        pinned,\n        createdBy: admin.id,\n        createdByName: admin.name,\n        viewCount: 0,\n        acknowledgedBy: [],\n      });\n\n      toast({\n        title: 'Success',\n        description: status === 'published' ? 'Announcement published!' : 'Draft saved!',\n      });\n\n      router.push('/admin/communications');\n    } catch (error) {\n      console.error('Error creating announcement:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to create announcement',\n        variant: 'destructive',\n      });\n    } finally {\n      setSending(false);\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"ghost\" size=\"sm\" asChild>\n          <Link href=\"/admin/communications\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Communications\n          </Link>\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Compose Announcement</CardTitle>\n          <CardDescription>Create a new announcement for families in your programs</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Title</Label>\n            <Input\n              id=\"title\"\n              placeholder=\"Announcement title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"content\">Content</Label>\n            <Textarea\n              id=\"content\"\n              placeholder=\"Write your announcement here...\"\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n              rows={6}\n            />\n          </div>\n\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"recipients\">Recipients</Label>\n              <Select value={recipients} onValueChange={(value: any) => setRecipients(value)}>\n                <SelectTrigger id=\"recipients\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Families</SelectItem>\n                  <SelectItem value=\"mathcounts\">MathCounts Only</SelectItem>\n                  <SelectItem value=\"enrichment\">Enrichment Only</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"priority\">Priority</Label>\n              <Select value={priority} onValueChange={(value: any) => setPriority(value)}>\n                <SelectTrigger id=\"priority\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                  <SelectItem value=\"normal\">Normal</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"pinned\"\n              checked={pinned}\n              onCheckedChange={(checked) => setPinned(checked as boolean)}\n            />\n            <Label htmlFor=\"pinned\" className=\"font-normal\">\n              Pin this announcement to the top\n            </Label>\n          </div>\n\n          <div className=\"flex justify-end gap-4\">\n            <Button variant=\"outline\" onClick={() => handleSubmit('draft')} disabled={sending}>\n              <Save className=\"mr-2 h-4 w-4\" />\n              Save Draft\n            </Button>\n            <Button onClick={() => handleSubmit('published')} disabled={sending}>\n              <Send className=\"mr-2 h-4 w-4\" />\n              Publish Now\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useUniqueElementIds","severity":"error","description":"id attribute should not be a static string literal. Generate unique IDs using useId().","message":[{"elements":["Emphasis"],"content":"id"},{"elements":[],"content":" attribute should not be a static string literal. Generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/admin/communications/compose/page.tsx"},"span":[3150,3328],"sourceCode":"'use client';\n\nimport { ArrowLeft, Save, Send } from 'lucide-react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useAdmin } from '@/hooks/use-admin';\nimport { useToast } from '@/hooks/use-toast';\nimport { announcementService } from '@/lib/firebase-admin';\n\nexport default function ComposeAnnouncementPage() {\n  const router = useRouter();\n  const { admin } = useAdmin();\n  const { toast } = useToast();\n\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [recipients, setRecipients] = useState<'all' | 'mathcounts' | 'enrichment'>('all');\n  const [priority, setPriority] = useState<'low' | 'normal' | 'high'>('normal');\n  const [pinned, setPinned] = useState(false);\n  const [sending, setSending] = useState(false);\n\n  async function handleSubmit(status: 'draft' | 'published') {\n    if (!title || !content) {\n      toast({\n        title: 'Error',\n        description: 'Please fill in all required fields',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    if (!admin) {\n      toast({\n        title: 'Error',\n        description: 'Admin session not found',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setSending(true);\n\n    try {\n      await announcementService.create({\n        title,\n        content,\n        priority,\n        recipients,\n        status,\n        pinned,\n        createdBy: admin.id,\n        createdByName: admin.name,\n        viewCount: 0,\n        acknowledgedBy: [],\n      });\n\n      toast({\n        title: 'Success',\n        description: status === 'published' ? 'Announcement published!' : 'Draft saved!',\n      });\n\n      router.push('/admin/communications');\n    } catch (error) {\n      console.error('Error creating announcement:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to create announcement',\n        variant: 'destructive',\n      });\n    } finally {\n      setSending(false);\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"ghost\" size=\"sm\" asChild>\n          <Link href=\"/admin/communications\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Communications\n          </Link>\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Compose Announcement</CardTitle>\n          <CardDescription>Create a new announcement for families in your programs</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Title</Label>\n            <Input\n              id=\"title\"\n              placeholder=\"Announcement title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"content\">Content</Label>\n            <Textarea\n              id=\"content\"\n              placeholder=\"Write your announcement here...\"\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n              rows={6}\n            />\n          </div>\n\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"recipients\">Recipients</Label>\n              <Select value={recipients} onValueChange={(value: any) => setRecipients(value)}>\n                <SelectTrigger id=\"recipients\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Families</SelectItem>\n                  <SelectItem value=\"mathcounts\">MathCounts Only</SelectItem>\n                  <SelectItem value=\"enrichment\">Enrichment Only</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"priority\">Priority</Label>\n              <Select value={priority} onValueChange={(value: any) => setPriority(value)}>\n                <SelectTrigger id=\"priority\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                  <SelectItem value=\"normal\">Normal</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"pinned\"\n              checked={pinned}\n              onCheckedChange={(checked) => setPinned(checked as boolean)}\n            />\n            <Label htmlFor=\"pinned\" className=\"font-normal\">\n              Pin this announcement to the top\n            </Label>\n          </div>\n\n          <div className=\"flex justify-end gap-4\">\n            <Button variant=\"outline\" onClick={() => handleSubmit('draft')} disabled={sending}>\n              <Save className=\"mr-2 h-4 w-4\" />\n              Save Draft\n            </Button>\n            <Button onClick={() => handleSubmit('published')} disabled={sending}>\n              <Send className=\"mr-2 h-4 w-4\" />\n              Publish Now\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useUniqueElementIds","severity":"error","description":"id attribute should not be a static string literal. Generate unique IDs using useId().","message":[{"elements":["Emphasis"],"content":"id"},{"elements":[],"content":" attribute should not be a static string literal. Generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/admin/communications/compose/page.tsx"},"span":[3958,3989],"sourceCode":"'use client';\n\nimport { ArrowLeft, Save, Send } from 'lucide-react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useAdmin } from '@/hooks/use-admin';\nimport { useToast } from '@/hooks/use-toast';\nimport { announcementService } from '@/lib/firebase-admin';\n\nexport default function ComposeAnnouncementPage() {\n  const router = useRouter();\n  const { admin } = useAdmin();\n  const { toast } = useToast();\n\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [recipients, setRecipients] = useState<'all' | 'mathcounts' | 'enrichment'>('all');\n  const [priority, setPriority] = useState<'low' | 'normal' | 'high'>('normal');\n  const [pinned, setPinned] = useState(false);\n  const [sending, setSending] = useState(false);\n\n  async function handleSubmit(status: 'draft' | 'published') {\n    if (!title || !content) {\n      toast({\n        title: 'Error',\n        description: 'Please fill in all required fields',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    if (!admin) {\n      toast({\n        title: 'Error',\n        description: 'Admin session not found',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setSending(true);\n\n    try {\n      await announcementService.create({\n        title,\n        content,\n        priority,\n        recipients,\n        status,\n        pinned,\n        createdBy: admin.id,\n        createdByName: admin.name,\n        viewCount: 0,\n        acknowledgedBy: [],\n      });\n\n      toast({\n        title: 'Success',\n        description: status === 'published' ? 'Announcement published!' : 'Draft saved!',\n      });\n\n      router.push('/admin/communications');\n    } catch (error) {\n      console.error('Error creating announcement:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to create announcement',\n        variant: 'destructive',\n      });\n    } finally {\n      setSending(false);\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"ghost\" size=\"sm\" asChild>\n          <Link href=\"/admin/communications\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Communications\n          </Link>\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Compose Announcement</CardTitle>\n          <CardDescription>Create a new announcement for families in your programs</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Title</Label>\n            <Input\n              id=\"title\"\n              placeholder=\"Announcement title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"content\">Content</Label>\n            <Textarea\n              id=\"content\"\n              placeholder=\"Write your announcement here...\"\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n              rows={6}\n            />\n          </div>\n\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"recipients\">Recipients</Label>\n              <Select value={recipients} onValueChange={(value: any) => setRecipients(value)}>\n                <SelectTrigger id=\"recipients\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Families</SelectItem>\n                  <SelectItem value=\"mathcounts\">MathCounts Only</SelectItem>\n                  <SelectItem value=\"enrichment\">Enrichment Only</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"priority\">Priority</Label>\n              <Select value={priority} onValueChange={(value: any) => setPriority(value)}>\n                <SelectTrigger id=\"priority\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                  <SelectItem value=\"normal\">Normal</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"pinned\"\n              checked={pinned}\n              onCheckedChange={(checked) => setPinned(checked as boolean)}\n            />\n            <Label htmlFor=\"pinned\" className=\"font-normal\">\n              Pin this announcement to the top\n            </Label>\n          </div>\n\n          <div className=\"flex justify-end gap-4\">\n            <Button variant=\"outline\" onClick={() => handleSubmit('draft')} disabled={sending}>\n              <Save className=\"mr-2 h-4 w-4\" />\n              Save Draft\n            </Button>\n            <Button onClick={() => handleSubmit('published')} disabled={sending}>\n              <Send className=\"mr-2 h-4 w-4\" />\n              Publish Now\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useUniqueElementIds","severity":"error","description":"id attribute should not be a static string literal. Generate unique IDs using useId().","message":[{"elements":["Emphasis"],"content":"id"},{"elements":[],"content":" attribute should not be a static string literal. Generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/admin/communications/compose/page.tsx"},"span":[4594,4623],"sourceCode":"'use client';\n\nimport { ArrowLeft, Save, Send } from 'lucide-react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useAdmin } from '@/hooks/use-admin';\nimport { useToast } from '@/hooks/use-toast';\nimport { announcementService } from '@/lib/firebase-admin';\n\nexport default function ComposeAnnouncementPage() {\n  const router = useRouter();\n  const { admin } = useAdmin();\n  const { toast } = useToast();\n\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [recipients, setRecipients] = useState<'all' | 'mathcounts' | 'enrichment'>('all');\n  const [priority, setPriority] = useState<'low' | 'normal' | 'high'>('normal');\n  const [pinned, setPinned] = useState(false);\n  const [sending, setSending] = useState(false);\n\n  async function handleSubmit(status: 'draft' | 'published') {\n    if (!title || !content) {\n      toast({\n        title: 'Error',\n        description: 'Please fill in all required fields',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    if (!admin) {\n      toast({\n        title: 'Error',\n        description: 'Admin session not found',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setSending(true);\n\n    try {\n      await announcementService.create({\n        title,\n        content,\n        priority,\n        recipients,\n        status,\n        pinned,\n        createdBy: admin.id,\n        createdByName: admin.name,\n        viewCount: 0,\n        acknowledgedBy: [],\n      });\n\n      toast({\n        title: 'Success',\n        description: status === 'published' ? 'Announcement published!' : 'Draft saved!',\n      });\n\n      router.push('/admin/communications');\n    } catch (error) {\n      console.error('Error creating announcement:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to create announcement',\n        variant: 'destructive',\n      });\n    } finally {\n      setSending(false);\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"ghost\" size=\"sm\" asChild>\n          <Link href=\"/admin/communications\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Communications\n          </Link>\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Compose Announcement</CardTitle>\n          <CardDescription>Create a new announcement for families in your programs</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Title</Label>\n            <Input\n              id=\"title\"\n              placeholder=\"Announcement title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"content\">Content</Label>\n            <Textarea\n              id=\"content\"\n              placeholder=\"Write your announcement here...\"\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n              rows={6}\n            />\n          </div>\n\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"recipients\">Recipients</Label>\n              <Select value={recipients} onValueChange={(value: any) => setRecipients(value)}>\n                <SelectTrigger id=\"recipients\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Families</SelectItem>\n                  <SelectItem value=\"mathcounts\">MathCounts Only</SelectItem>\n                  <SelectItem value=\"enrichment\">Enrichment Only</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"priority\">Priority</Label>\n              <Select value={priority} onValueChange={(value: any) => setPriority(value)}>\n                <SelectTrigger id=\"priority\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                  <SelectItem value=\"normal\">Normal</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"pinned\"\n              checked={pinned}\n              onCheckedChange={(checked) => setPinned(checked as boolean)}\n            />\n            <Label htmlFor=\"pinned\" className=\"font-normal\">\n              Pin this announcement to the top\n            </Label>\n          </div>\n\n          <div className=\"flex justify-end gap-4\">\n            <Button variant=\"outline\" onClick={() => handleSubmit('draft')} disabled={sending}>\n              <Save className=\"mr-2 h-4 w-4\" />\n              Save Draft\n            </Button>\n            <Button onClick={() => handleSubmit('published')} disabled={sending}>\n              <Send className=\"mr-2 h-4 w-4\" />\n              Publish Now\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useUniqueElementIds","severity":"error","description":"id attribute should not be a static string literal. Generate unique IDs using useId().","message":[{"elements":["Emphasis"],"content":"id"},{"elements":[],"content":" attribute should not be a static string literal. Generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/admin/communications/compose/page.tsx"},"span":[3450,3673],"sourceCode":"'use client';\n\nimport { ArrowLeft, Save, Send } from 'lucide-react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useAdmin } from '@/hooks/use-admin';\nimport { useToast } from '@/hooks/use-toast';\nimport { announcementService } from '@/lib/firebase-admin';\n\nexport default function ComposeAnnouncementPage() {\n  const router = useRouter();\n  const { admin } = useAdmin();\n  const { toast } = useToast();\n\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [recipients, setRecipients] = useState<'all' | 'mathcounts' | 'enrichment'>('all');\n  const [priority, setPriority] = useState<'low' | 'normal' | 'high'>('normal');\n  const [pinned, setPinned] = useState(false);\n  const [sending, setSending] = useState(false);\n\n  async function handleSubmit(status: 'draft' | 'published') {\n    if (!title || !content) {\n      toast({\n        title: 'Error',\n        description: 'Please fill in all required fields',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    if (!admin) {\n      toast({\n        title: 'Error',\n        description: 'Admin session not found',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setSending(true);\n\n    try {\n      await announcementService.create({\n        title,\n        content,\n        priority,\n        recipients,\n        status,\n        pinned,\n        createdBy: admin.id,\n        createdByName: admin.name,\n        viewCount: 0,\n        acknowledgedBy: [],\n      });\n\n      toast({\n        title: 'Success',\n        description: status === 'published' ? 'Announcement published!' : 'Draft saved!',\n      });\n\n      router.push('/admin/communications');\n    } catch (error) {\n      console.error('Error creating announcement:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to create announcement',\n        variant: 'destructive',\n      });\n    } finally {\n      setSending(false);\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"ghost\" size=\"sm\" asChild>\n          <Link href=\"/admin/communications\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Communications\n          </Link>\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Compose Announcement</CardTitle>\n          <CardDescription>Create a new announcement for families in your programs</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Title</Label>\n            <Input\n              id=\"title\"\n              placeholder=\"Announcement title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"content\">Content</Label>\n            <Textarea\n              id=\"content\"\n              placeholder=\"Write your announcement here...\"\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n              rows={6}\n            />\n          </div>\n\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"recipients\">Recipients</Label>\n              <Select value={recipients} onValueChange={(value: any) => setRecipients(value)}>\n                <SelectTrigger id=\"recipients\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Families</SelectItem>\n                  <SelectItem value=\"mathcounts\">MathCounts Only</SelectItem>\n                  <SelectItem value=\"enrichment\">Enrichment Only</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"priority\">Priority</Label>\n              <Select value={priority} onValueChange={(value: any) => setPriority(value)}>\n                <SelectTrigger id=\"priority\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                  <SelectItem value=\"normal\">Normal</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"pinned\"\n              checked={pinned}\n              onCheckedChange={(checked) => setPinned(checked as boolean)}\n            />\n            <Label htmlFor=\"pinned\" className=\"font-normal\">\n              Pin this announcement to the top\n            </Label>\n          </div>\n\n          <div className=\"flex justify-end gap-4\">\n            <Button variant=\"outline\" onClick={() => handleSubmit('draft')} disabled={sending}>\n              <Save className=\"mr-2 h-4 w-4\" />\n              Save Draft\n            </Button>\n            <Button onClick={() => handleSubmit('published')} disabled={sending}>\n              <Send className=\"mr-2 h-4 w-4\" />\n              Publish Now\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/noNestedComponentDefinitions","severity":"error","description":"Components should not be defined inside other components.","message":[{"elements":[],"content":"Components should not be defined inside other components."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Move it outside of the parent component or pass it as a prop."}]]},{"frame":{"path":null,"span":[1236,1253],"sourceCode":"'use client';\n\nimport { format, formatDistanceToNow } from 'date-fns';\nimport {\n  AlertCircle,\n  ArrowLeft,\n  CheckCircle,\n  Clock,\n  Eye,\n  EyeOff,\n  Info,\n  MoreVertical,\n  Pin,\n  Trash2,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { useEffect, useState } from 'react';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Separator } from '@/components/ui/separator';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { type Announcement, announcementService } from '@/lib/firebase-admin';\n\nexport default function AnnouncementsPage() {\n  const [announcements, setAnnouncements] = useState<Announcement[]>([]);\n  const [hiddenAnnouncements, setHiddenAnnouncements] = useState<Announcement[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedAnnouncement, setSelectedAnnouncement] = useState<Announcement | null>(null);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [announcementToDelete, setAnnouncementToDelete] = useState<Announcement | null>(null);\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadAnnouncements();\n  }, [loadAnnouncements]);\n\n  async function loadAnnouncements() {\n    if (!user) return;\n\n    try {\n      // Load visible announcements\n      const visibleData = await announcementService.getAll({\n        status: 'published',\n        userId: user.uid,\n        showHidden: false,\n      });\n      setAnnouncements(visibleData);\n\n      // Load hidden announcements\n      const allData = await announcementService.getAll({\n        status: 'published',\n        userId: user.uid,\n        showHidden: true,\n      });\n      const hidden = allData.filter((a) => a.hiddenBy?.includes(user.uid));\n      setHiddenAnnouncements(hidden);\n\n      // Mark as viewed\n      if (visibleData.length > 0) {\n        visibleData.forEach(async (announcement) => {\n          if (!announcement.acknowledgedBy.includes(user.uid)) {\n            await announcementService.markAsRead(announcement.id, user.uid);\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error loading announcements:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load announcements',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function handleHide(announcement: Announcement) {\n    if (!user) return;\n\n    try {\n      await announcementService.hide(announcement.id, user.uid);\n      toast({\n        title: 'Hidden',\n        description: 'Announcement hidden from your view',\n      });\n      loadAnnouncements();\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to hide announcement',\n        variant: 'destructive',\n      });\n    }\n  }\n\n  async function handleUnhide(announcement: Announcement) {\n    if (!user) return;\n\n    try {\n      await announcementService.unhide(announcement.id, user.uid);\n      toast({\n        title: 'Restored',\n        description: 'Announcement restored to your view',\n      });\n      loadAnnouncements();\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to restore announcement',\n        variant: 'destructive',\n      });\n    }\n  }\n\n  async function handleDelete() {\n    if (!announcementToDelete) return;\n\n    try {\n      await announcementService.delete(announcementToDelete.id);\n      toast({\n        title: 'Deleted',\n        description: 'Announcement deleted permanently',\n      });\n      loadAnnouncements();\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to delete announcement',\n        variant: 'destructive',\n      });\n    } finally {\n      setDeleteDialogOpen(false);\n      setAnnouncementToDelete(null);\n      setSelectedAnnouncement(null);\n    }\n  }\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return <AlertCircle className=\"h-5 w-5 text-red-500\" />;\n      case 'normal':\n        return <Info className=\"h-5 w-5 text-blue-500\" />;\n      default:\n        return <Info className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return <Badge variant=\"destructive\">High Priority</Badge>;\n      case 'normal':\n        return <Badge>Normal</Badge>;\n      default:\n        return <Badge variant=\"secondary\">Low</Badge>;\n    }\n  };\n\n  const AnnouncementCard = ({\n    announcement,\n    isHidden = false,\n  }: {\n    announcement: Announcement;\n    isHidden?: boolean;\n  }) => (\n    <Card\n      className={`cursor-pointer transition-shadow hover:shadow-lg ${isHidden ? 'opacity-60' : ''}`}\n      onClick={() => setSelectedAnnouncement(announcement)}\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between gap-2\">\n          <div className=\"flex items-center gap-2\">\n            {getPriorityIcon(announcement.priority)}\n            {announcement.pinned && <Pin className=\"text-muted-foreground h-4 w-4\" />}\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {announcement.recipients === 'all' ? 'All' : announcement.recipients}\n            </Badge>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>\n                <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                  <MoreVertical className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                {isHidden ? (\n                  <DropdownMenuItem\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleUnhide(announcement);\n                    }}\n                  >\n                    <Eye className=\"mr-2 h-4 w-4\" />\n                    Unhide\n                  </DropdownMenuItem>\n                ) : (\n                  <DropdownMenuItem\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleHide(announcement);\n                    }}\n                  >\n                    <EyeOff className=\"mr-2 h-4 w-4\" />\n                    Hide\n                  </DropdownMenuItem>\n                )}\n                {user && announcement.createdBy === user.uid && (\n                  <>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem\n                      className=\"text-destructive\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setAnnouncementToDelete(announcement);\n                        setDeleteDialogOpen(true);\n                      }}\n                    >\n                      <Trash2 className=\"mr-2 h-4 w-4\" />\n                      Delete\n                    </DropdownMenuItem>\n                  </>\n                )}\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n        <CardTitle className=\"line-clamp-1\">{announcement.title}</CardTitle>\n        <CardDescription className=\"text-xs\">\n          {announcement.publishedAt &&\n            formatDistanceToNow(new Date(announcement.publishedAt), { addSuffix: true })}{' '}\n          by {announcement.createdByName}\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-muted-foreground line-clamp-3 text-sm\">{announcement.content}</p>\n        <div className=\"text-muted-foreground mt-4 flex items-center gap-4 text-xs\">\n          <span>{announcement.viewCount} views</span>\n          {announcement.acknowledgedBy.includes(user?.uid || '') && (\n            <span className=\"flex items-center gap-1\">\n              <CheckCircle className=\"h-3 w-3\" /> Read\n            </span>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto max-w-6xl space-y-6 p-6\">\n        <Skeleton className=\"h-10 w-64\" />\n        <div className=\"grid gap-4 md:grid-cols-2\">\n          {[1, 2, 3, 4].map((i) => (\n            <Skeleton key={i} className=\"h-40\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (selectedAnnouncement) {\n    const isOwner = user && selectedAnnouncement.createdBy === user.uid;\n\n    return (\n      <div className=\"container mx-auto max-w-4xl p-6\">\n        <Button variant=\"ghost\" onClick={() => setSelectedAnnouncement(null)} className=\"mb-6\">\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          Back to all announcements\n        </Button>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-start justify-between gap-4\">\n              <div className=\"space-y-1\">\n                <div className=\"flex items-center gap-2\">\n                  {selectedAnnouncement.pinned && <Pin className=\"h-4 w-4\" />}\n                  <CardTitle className=\"text-2xl\">{selectedAnnouncement.title}</CardTitle>\n                </div>\n                <CardDescription>\n                  By {selectedAnnouncement.createdByName} •{' '}\n                  {selectedAnnouncement.publishedAt &&\n                    format(new Date(selectedAnnouncement.publishedAt), 'MMMM d, yyyy at h:mm a')}\n                </CardDescription>\n              </div>\n              <div className=\"flex flex-col items-end gap-2\">\n                {getPriorityBadge(selectedAnnouncement.priority)}\n                <Badge variant=\"outline\">\n                  {selectedAnnouncement.recipients === 'all'\n                    ? 'All Families'\n                    : selectedAnnouncement.recipients}\n                </Badge>\n                {isOwner && (\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setAnnouncementToDelete(selectedAnnouncement);\n                      setDeleteDialogOpen(true);\n                    }}\n                  >\n                    <Trash2 className=\"mr-2 h-4 w-4\" />\n                    Delete\n                  </Button>\n                )}\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"prose prose-sm max-w-none\">\n              <p className=\"whitespace-pre-wrap\">{selectedAnnouncement.content}</p>\n            </div>\n            <Separator className=\"my-6\" />\n            <div className=\"text-muted-foreground flex items-center justify-between text-sm\">\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle className=\"h-4 w-4\" />\n                <span>{selectedAnnouncement.viewCount} views</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"h-4 w-4\" />\n                <span>\n                  Posted{' '}\n                  {selectedAnnouncement.publishedAt &&\n                    formatDistanceToNow(new Date(selectedAnnouncement.publishedAt), {\n                      addSuffix: true,\n                    })}\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-6xl space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Announcements</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Stay up to date with all program announcements\n          </p>\n        </div>\n        <Button variant=\"ghost\" asChild>\n          <Link href=\"/dashboard\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Dashboard\n          </Link>\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"visible\" className=\"w-full\">\n        <TabsList>\n          <TabsTrigger value=\"visible\">Announcements ({announcements.length})</TabsTrigger>\n          <TabsTrigger value=\"hidden\">Hidden ({hiddenAnnouncements.length})</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"visible\" className=\"mt-6\">\n          {announcements.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-16\">\n                <Info className=\"text-muted-foreground mb-4 h-12 w-12\" />\n                <p className=\"text-muted-foreground text-lg\">No announcements to show</p>\n                <p className=\"text-muted-foreground mt-2 text-sm\">\n                  Check the hidden tab if you've hidden any announcements\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4 md:grid-cols-2\">\n              {announcements.map((announcement) => (\n                <AnnouncementCard key={announcement.id} announcement={announcement} />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"hidden\" className=\"mt-6\">\n          {hiddenAnnouncements.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-16\">\n                <EyeOff className=\"text-muted-foreground mb-4 h-12 w-12\" />\n                <p className=\"text-muted-foreground text-lg\">No hidden announcements</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4 md:grid-cols-2\">\n              {hiddenAnnouncements.map((announcement) => (\n                <AnnouncementCard key={announcement.id} announcement={announcement} isHidden />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Announcement</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete \"{announcementToDelete?.title}\"? This will remove it\n              for all users and cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleDelete}\n              className=\"bg-destructive text-destructive-foreground\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n"}},{"log":["info",[{"elements":[],"content":"Component definitions inside other components cause them to be recreated on every render, which can lead to performance issues and unexpected behavior."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/announcements/page.tsx"},"span":[5143,5159],"sourceCode":"'use client';\n\nimport { format, formatDistanceToNow } from 'date-fns';\nimport {\n  AlertCircle,\n  ArrowLeft,\n  CheckCircle,\n  Clock,\n  Eye,\n  EyeOff,\n  Info,\n  MoreVertical,\n  Pin,\n  Trash2,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { useEffect, useState } from 'react';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Separator } from '@/components/ui/separator';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { type Announcement, announcementService } from '@/lib/firebase-admin';\n\nexport default function AnnouncementsPage() {\n  const [announcements, setAnnouncements] = useState<Announcement[]>([]);\n  const [hiddenAnnouncements, setHiddenAnnouncements] = useState<Announcement[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedAnnouncement, setSelectedAnnouncement] = useState<Announcement | null>(null);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [announcementToDelete, setAnnouncementToDelete] = useState<Announcement | null>(null);\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadAnnouncements();\n  }, [loadAnnouncements]);\n\n  async function loadAnnouncements() {\n    if (!user) return;\n\n    try {\n      // Load visible announcements\n      const visibleData = await announcementService.getAll({\n        status: 'published',\n        userId: user.uid,\n        showHidden: false,\n      });\n      setAnnouncements(visibleData);\n\n      // Load hidden announcements\n      const allData = await announcementService.getAll({\n        status: 'published',\n        userId: user.uid,\n        showHidden: true,\n      });\n      const hidden = allData.filter((a) => a.hiddenBy?.includes(user.uid));\n      setHiddenAnnouncements(hidden);\n\n      // Mark as viewed\n      if (visibleData.length > 0) {\n        visibleData.forEach(async (announcement) => {\n          if (!announcement.acknowledgedBy.includes(user.uid)) {\n            await announcementService.markAsRead(announcement.id, user.uid);\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error loading announcements:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load announcements',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function handleHide(announcement: Announcement) {\n    if (!user) return;\n\n    try {\n      await announcementService.hide(announcement.id, user.uid);\n      toast({\n        title: 'Hidden',\n        description: 'Announcement hidden from your view',\n      });\n      loadAnnouncements();\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to hide announcement',\n        variant: 'destructive',\n      });\n    }\n  }\n\n  async function handleUnhide(announcement: Announcement) {\n    if (!user) return;\n\n    try {\n      await announcementService.unhide(announcement.id, user.uid);\n      toast({\n        title: 'Restored',\n        description: 'Announcement restored to your view',\n      });\n      loadAnnouncements();\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to restore announcement',\n        variant: 'destructive',\n      });\n    }\n  }\n\n  async function handleDelete() {\n    if (!announcementToDelete) return;\n\n    try {\n      await announcementService.delete(announcementToDelete.id);\n      toast({\n        title: 'Deleted',\n        description: 'Announcement deleted permanently',\n      });\n      loadAnnouncements();\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to delete announcement',\n        variant: 'destructive',\n      });\n    } finally {\n      setDeleteDialogOpen(false);\n      setAnnouncementToDelete(null);\n      setSelectedAnnouncement(null);\n    }\n  }\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return <AlertCircle className=\"h-5 w-5 text-red-500\" />;\n      case 'normal':\n        return <Info className=\"h-5 w-5 text-blue-500\" />;\n      default:\n        return <Info className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return <Badge variant=\"destructive\">High Priority</Badge>;\n      case 'normal':\n        return <Badge>Normal</Badge>;\n      default:\n        return <Badge variant=\"secondary\">Low</Badge>;\n    }\n  };\n\n  const AnnouncementCard = ({\n    announcement,\n    isHidden = false,\n  }: {\n    announcement: Announcement;\n    isHidden?: boolean;\n  }) => (\n    <Card\n      className={`cursor-pointer transition-shadow hover:shadow-lg ${isHidden ? 'opacity-60' : ''}`}\n      onClick={() => setSelectedAnnouncement(announcement)}\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between gap-2\">\n          <div className=\"flex items-center gap-2\">\n            {getPriorityIcon(announcement.priority)}\n            {announcement.pinned && <Pin className=\"text-muted-foreground h-4 w-4\" />}\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {announcement.recipients === 'all' ? 'All' : announcement.recipients}\n            </Badge>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>\n                <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                  <MoreVertical className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                {isHidden ? (\n                  <DropdownMenuItem\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleUnhide(announcement);\n                    }}\n                  >\n                    <Eye className=\"mr-2 h-4 w-4\" />\n                    Unhide\n                  </DropdownMenuItem>\n                ) : (\n                  <DropdownMenuItem\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleHide(announcement);\n                    }}\n                  >\n                    <EyeOff className=\"mr-2 h-4 w-4\" />\n                    Hide\n                  </DropdownMenuItem>\n                )}\n                {user && announcement.createdBy === user.uid && (\n                  <>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem\n                      className=\"text-destructive\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setAnnouncementToDelete(announcement);\n                        setDeleteDialogOpen(true);\n                      }}\n                    >\n                      <Trash2 className=\"mr-2 h-4 w-4\" />\n                      Delete\n                    </DropdownMenuItem>\n                  </>\n                )}\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n        <CardTitle className=\"line-clamp-1\">{announcement.title}</CardTitle>\n        <CardDescription className=\"text-xs\">\n          {announcement.publishedAt &&\n            formatDistanceToNow(new Date(announcement.publishedAt), { addSuffix: true })}{' '}\n          by {announcement.createdByName}\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-muted-foreground line-clamp-3 text-sm\">{announcement.content}</p>\n        <div className=\"text-muted-foreground mt-4 flex items-center gap-4 text-xs\">\n          <span>{announcement.viewCount} views</span>\n          {announcement.acknowledgedBy.includes(user?.uid || '') && (\n            <span className=\"flex items-center gap-1\">\n              <CheckCircle className=\"h-3 w-3\" /> Read\n            </span>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto max-w-6xl space-y-6 p-6\">\n        <Skeleton className=\"h-10 w-64\" />\n        <div className=\"grid gap-4 md:grid-cols-2\">\n          {[1, 2, 3, 4].map((i) => (\n            <Skeleton key={i} className=\"h-40\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (selectedAnnouncement) {\n    const isOwner = user && selectedAnnouncement.createdBy === user.uid;\n\n    return (\n      <div className=\"container mx-auto max-w-4xl p-6\">\n        <Button variant=\"ghost\" onClick={() => setSelectedAnnouncement(null)} className=\"mb-6\">\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          Back to all announcements\n        </Button>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-start justify-between gap-4\">\n              <div className=\"space-y-1\">\n                <div className=\"flex items-center gap-2\">\n                  {selectedAnnouncement.pinned && <Pin className=\"h-4 w-4\" />}\n                  <CardTitle className=\"text-2xl\">{selectedAnnouncement.title}</CardTitle>\n                </div>\n                <CardDescription>\n                  By {selectedAnnouncement.createdByName} •{' '}\n                  {selectedAnnouncement.publishedAt &&\n                    format(new Date(selectedAnnouncement.publishedAt), 'MMMM d, yyyy at h:mm a')}\n                </CardDescription>\n              </div>\n              <div className=\"flex flex-col items-end gap-2\">\n                {getPriorityBadge(selectedAnnouncement.priority)}\n                <Badge variant=\"outline\">\n                  {selectedAnnouncement.recipients === 'all'\n                    ? 'All Families'\n                    : selectedAnnouncement.recipients}\n                </Badge>\n                {isOwner && (\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setAnnouncementToDelete(selectedAnnouncement);\n                      setDeleteDialogOpen(true);\n                    }}\n                  >\n                    <Trash2 className=\"mr-2 h-4 w-4\" />\n                    Delete\n                  </Button>\n                )}\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"prose prose-sm max-w-none\">\n              <p className=\"whitespace-pre-wrap\">{selectedAnnouncement.content}</p>\n            </div>\n            <Separator className=\"my-6\" />\n            <div className=\"text-muted-foreground flex items-center justify-between text-sm\">\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle className=\"h-4 w-4\" />\n                <span>{selectedAnnouncement.viewCount} views</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"h-4 w-4\" />\n                <span>\n                  Posted{' '}\n                  {selectedAnnouncement.publishedAt &&\n                    formatDistanceToNow(new Date(selectedAnnouncement.publishedAt), {\n                      addSuffix: true,\n                    })}\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-6xl space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Announcements</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Stay up to date with all program announcements\n          </p>\n        </div>\n        <Button variant=\"ghost\" asChild>\n          <Link href=\"/dashboard\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Dashboard\n          </Link>\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"visible\" className=\"w-full\">\n        <TabsList>\n          <TabsTrigger value=\"visible\">Announcements ({announcements.length})</TabsTrigger>\n          <TabsTrigger value=\"hidden\">Hidden ({hiddenAnnouncements.length})</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"visible\" className=\"mt-6\">\n          {announcements.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-16\">\n                <Info className=\"text-muted-foreground mb-4 h-12 w-12\" />\n                <p className=\"text-muted-foreground text-lg\">No announcements to show</p>\n                <p className=\"text-muted-foreground mt-2 text-sm\">\n                  Check the hidden tab if you've hidden any announcements\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4 md:grid-cols-2\">\n              {announcements.map((announcement) => (\n                <AnnouncementCard key={announcement.id} announcement={announcement} />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"hidden\" className=\"mt-6\">\n          {hiddenAnnouncements.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-16\">\n                <EyeOff className=\"text-muted-foreground mb-4 h-12 w-12\" />\n                <p className=\"text-muted-foreground text-lg\">No hidden announcements</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4 md:grid-cols-2\">\n              {hiddenAnnouncements.map((announcement) => (\n                <AnnouncementCard key={announcement.id} announcement={announcement} isHidden />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Announcement</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete \"{announcementToDelete?.title}\"? This will remove it\n              for all users and cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleDelete}\n              className=\"bg-destructive text-destructive-foreground\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useUniqueElementIds","severity":"error","description":"id attribute should not be a static string literal. Generate unique IDs using useId().","message":[{"elements":["Emphasis"],"content":"id"},{"elements":[],"content":" attribute should not be a static string literal. Generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/calendar/page.tsx"},"span":[11862,11894],"sourceCode":"'use client';\n\nimport { addMonths } from 'date-fns/addMonths';\nimport { eachDayOfInterval } from 'date-fns/eachDayOfInterval';\nimport { endOfMonth } from 'date-fns/endOfMonth';\nimport { endOfWeek } from 'date-fns/endOfWeek';\n// Optimize date-fns imports by importing only what we need\nimport { format } from 'date-fns/format';\nimport { isSameDay } from 'date-fns/isSameDay';\nimport { isSameMonth } from 'date-fns/isSameMonth';\nimport { isToday } from 'date-fns/isToday';\nimport { startOfMonth } from 'date-fns/startOfMonth';\nimport { startOfWeek } from 'date-fns/startOfWeek';\nimport { subMonths } from 'date-fns/subMonths';\nimport {\n  ArrowLeft,\n  Calendar as CalendarIcon,\n  ChevronLeft,\n  ChevronRight,\n  Clock,\n  Coffee,\n  MapPin,\n  MoreVertical,\n  Palmtree,\n  Plus,\n  Trophy,\n  Users,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { useSearchParams } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { LazyEventDialog } from '@/components/lazy';\nimport { CalendarSkeleton } from '@/components/loading/calendar-skeleton';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { AdminProvider, useAdmin } from '@/hooks/use-admin';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { type CalendarEvent, calendarService } from '@/lib/firebase-admin';\nimport { cn } from '@/lib/utils';\n\nconst eventTypeConfig = {\n  class: { icon: Users, color: 'bg-blue-500', label: 'Class' },\n  competition: { icon: Trophy, color: 'bg-purple-500', label: 'Competition' },\n  meeting: { icon: Coffee, color: 'bg-green-500', label: 'Meeting' },\n  holiday: { icon: Palmtree, color: 'bg-orange-500', label: 'Holiday' },\n  other: { icon: CalendarIcon, color: 'bg-gray-500', label: 'Other' },\n};\n\nfunction CalendarPageContent() {\n  const searchParams = useSearchParams();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n  const [events, setEvents] = useState<CalendarEvent[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [view, setView] = useState<'month' | 'week' | 'day'>('month');\n  const [eventDialogOpen, setEventDialogOpen] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);\n  const { user } = useAuth();\n  const { isAdmin } = useAdmin();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadEvents();\n  }, [loadEvents]);\n\n  useEffect(() => {\n    // Handle navigation from upcoming events\n    const eventDate = searchParams.get('date');\n    const eventId = searchParams.get('eventId');\n\n    if (eventDate) {\n      const date = new Date(eventDate);\n      setCurrentDate(date);\n      setSelectedDate(date);\n\n      // Scroll to selected date section after render\n      setTimeout(() => {\n        const selectedDateElement = document.getElementById('selected-date-events');\n        if (selectedDateElement) {\n          selectedDateElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n      }, 500);\n    }\n  }, [searchParams]);\n\n  async function loadEvents() {\n    try {\n      const start = startOfMonth(currentDate);\n      const end = endOfMonth(currentDate);\n      const data = await calendarService.getEvents(start, end);\n      setEvents(data);\n    } catch (error) {\n      console.error('Error loading events:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n  const calendarStart = startOfWeek(monthStart);\n  const calendarEnd = endOfWeek(monthEnd);\n  const calendarDays = eachDayOfInterval({ start: calendarStart, end: calendarEnd });\n\n  const previousMonth = () => setCurrentDate(subMonths(currentDate, 1));\n  const nextMonth = () => setCurrentDate(addMonths(currentDate, 1));\n  const goToToday = () => setCurrentDate(new Date());\n\n  const getEventsForDay = (day: Date) => {\n    return events.filter((event) => {\n      const eventDate = new Date(event.startDate);\n      return isSameDay(eventDate, day);\n    });\n  };\n\n  const handleAddEvent = () => {\n    setSelectedEvent(null);\n    setEventDialogOpen(true);\n  };\n\n  const handleEditEvent = (event: CalendarEvent) => {\n    setSelectedEvent(event);\n    setEventDialogOpen(true);\n  };\n\n  const handleDeleteEvent = async (eventId: string) => {\n    if (!user || !window.confirm('Are you sure you want to delete this event?')) return;\n\n    try {\n      await calendarService.delete(eventId, user.uid, user.displayName || user.email || 'Unknown');\n      toast({\n        title: 'Event deleted',\n        description: 'The event has been removed from the calendar.',\n      });\n      loadEvents();\n    } catch (error) {\n      console.error('Error deleting event:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to delete event. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto max-w-7xl space-y-6 px-4 py-6\">\n        <Skeleton className=\"h-10 w-64\" />\n        <CalendarSkeleton />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-7xl space-y-4 p-4 sm:space-y-6 sm:p-6\">\n      <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <div className=\"mb-2 flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"sm\" asChild className=\"sm:hidden\">\n              <Link href=\"/dashboard\">\n                <ArrowLeft className=\"h-4 w-4\" />\n              </Link>\n            </Button>\n            <h1 className=\"text-2xl font-bold sm:text-3xl\">Calendar</h1>\n          </div>\n          <p className=\"text-muted-foreground text-sm sm:text-base\">\n            View upcoming classes, competitions, and events\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"ghost\" asChild className=\"hidden sm:inline-flex\">\n            <Link href=\"/dashboard\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back\n            </Link>\n          </Button>\n          {isAdmin && (\n            <Button onClick={handleAddEvent} size=\"sm\" className=\"sm:size-default\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Add Event</span>\n              <span className=\"sm:hidden\">Add</span>\n            </Button>\n          )}\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader className=\"pb-3 sm:pb-6\">\n          <div className=\"flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between\">\n            <CardTitle className=\"text-xl sm:text-2xl\">\n              {format(currentDate, 'MMMM yyyy')}\n            </CardTitle>\n            <div className=\"flex items-center gap-1 sm:gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={goToToday}\n                className=\"text-xs sm:text-sm\"\n              >\n                Today\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={previousMonth}\n                className=\"h-8 w-8 sm:h-9 sm:w-9\"\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={nextMonth}\n                className=\"h-8 w-8 sm:h-9 sm:w-9\"\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {/* Calendar Grid */}\n          <div className=\"bg-muted grid grid-cols-7 gap-px overflow-hidden rounded-lg\">\n            {/* Day Headers */}\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\n              <div\n                key={day}\n                className=\"bg-background text-muted-foreground p-1 text-center text-xs font-medium sm:p-2 sm:text-sm\"\n              >\n                <span className=\"sm:hidden\">{day.slice(0, 1)}</span>\n                <span className=\"hidden sm:inline\">{day}</span>\n              </div>\n            ))}\n\n            {/* Calendar Days */}\n            {calendarDays.map((day, index) => {\n              const dayEvents = getEventsForDay(day);\n              const isCurrentMonth = isSameMonth(day, currentDate);\n              const isSelectedDay = selectedDate && isSameDay(day, selectedDate);\n              const isTodayDate = isToday(day);\n\n              return (\n                <div\n                  key={index}\n                  onClick={() => setSelectedDate(day)}\n                  className={cn(\n                    'bg-background hover:bg-muted/50 min-h-[60px] cursor-pointer p-1 transition-colors sm:min-h-[100px] sm:p-2',\n                    !isCurrentMonth && 'text-muted-foreground bg-muted/30',\n                    isSelectedDay && 'ring-primary ring-2',\n                    isTodayDate && 'bg-primary/5'\n                  )}\n                >\n                  <div className=\"mb-1 flex items-start justify-between\">\n                    <span\n                      className={cn(\n                        'text-xs font-medium sm:text-sm',\n                        isTodayDate &&\n                          'bg-primary text-primary-foreground flex h-5 w-5 items-center justify-center rounded-full text-[10px] sm:h-7 sm:w-7 sm:text-xs'\n                      )}\n                    >\n                      {format(day, 'd')}\n                    </span>\n                  </div>\n\n                  {/* Event Dots - Mobile */}\n                  <div className=\"sm:hidden\">\n                    {dayEvents.length > 0 && (\n                      <div className=\"flex gap-0.5\">\n                        {dayEvents.slice(0, 3).map((event, idx) => {\n                          const config = eventTypeConfig[event.type];\n                          return (\n                            <div\n                              key={idx}\n                              className={cn('h-1.5 w-1.5 rounded-full', config.color)}\n                            />\n                          );\n                        })}\n                        {dayEvents.length > 3 && (\n                          <span className=\"text-muted-foreground ml-0.5 text-[8px]\">\n                            +{dayEvents.length - 3}\n                          </span>\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Event List - Desktop */}\n                  <div className=\"hidden space-y-1 sm:block\">\n                    {dayEvents.slice(0, 3).map((event, eventIndex) => {\n                      const config = eventTypeConfig[event.type];\n                      return (\n                        <div key={eventIndex} className=\"flex items-center gap-1\">\n                          <div className={cn('h-2 w-2 flex-shrink-0 rounded-full', config.color)} />\n                          <span className=\"truncate text-xs\">{event.title}</span>\n                        </div>\n                      );\n                    })}\n                    {dayEvents.length > 3 && (\n                      <span className=\"text-muted-foreground text-xs\">\n                        +{dayEvents.length - 3} more\n                      </span>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Selected Day Events */}\n      {selectedDate && (\n        <Card id=\"selected-date-events\">\n          <CardHeader>\n            <CardTitle>Events on {format(selectedDate, 'MMMM d, yyyy')}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {getEventsForDay(selectedDate).length === 0 ? (\n              <p className=\"text-muted-foreground py-8 text-center\">\n                No events scheduled for this day\n              </p>\n            ) : (\n              <div className=\"space-y-4\">\n                {getEventsForDay(selectedDate).map((event) => {\n                  const config = eventTypeConfig[event.type];\n                  const Icon = config.icon;\n\n                  return (\n                    <div key={event.id} className=\"flex items-start gap-4 rounded-lg border p-4\">\n                      <div className={cn('rounded-lg p-2', config.color, 'bg-opacity-20')}>\n                        <Icon className={cn('h-5 w-5', config.color.replace('bg-', 'text-'))} />\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h3 className=\"font-semibold\">{event.title}</h3>\n                            <div className=\"text-muted-foreground mt-1 flex items-center gap-4 text-sm\">\n                              {!event.allDay && (\n                                <span className=\"flex items-center gap-1\">\n                                  <Clock className=\"h-3 w-3\" />\n                                  {format(new Date(event.startDate), 'h:mm a')}\n                                  {event.endDate &&\n                                    ` - ${format(new Date(event.endDate), 'h:mm a')}`}\n                                </span>\n                              )}\n                              {event.location && (\n                                <span className=\"flex items-center gap-1\">\n                                  <MapPin className=\"h-3 w-3\" />\n                                  {event.location}\n                                </span>\n                              )}\n                            </div>\n                            {event.description && (\n                              <p className=\"text-muted-foreground mt-2 text-sm\">\n                                {event.description}\n                              </p>\n                            )}\n                          </div>\n                          {isAdmin && (\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\">\n                                  <MoreVertical className=\"h-4 w-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem onClick={() => handleEditEvent(event)}>\n                                  Edit\n                                </DropdownMenuItem>\n                                <DropdownMenuItem\n                                  className=\"text-destructive\"\n                                  onClick={() => handleDeleteEvent(event.id)}\n                                >\n                                  Delete\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Event Type Legend */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Event Types</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-4\">\n            {Object.entries(eventTypeConfig).map(([type, config]) => {\n              const Icon = config.icon;\n              return (\n                <div key={type} className=\"flex items-center gap-2\">\n                  <div className={cn('h-4 w-4 rounded-full', config.color)} />\n                  <span className=\"text-sm\">{config.label}</span>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Event Dialog - Only load when needed */}\n      {eventDialogOpen && (\n        <LazyEventDialog\n          open={eventDialogOpen}\n          onOpenChange={setEventDialogOpen}\n          event={selectedEvent}\n          initialDate={selectedDate || undefined}\n          onSuccess={loadEvents}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default function CalendarPage() {\n  return (\n    <AdminProvider>\n      <CalendarPageContent />\n    </AdminProvider>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noAssignInExpressions","severity":"error","description":"The assignment should not be in an expression.","message":[{"elements":[],"content":"The "},{"elements":["Emphasis"],"content":"assignment"},{"elements":[],"content":" should not be in an "},{"elements":["Emphasis"],"content":"expression"},{"elements":[],"content":"."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The use of assignments in expressions is confusing.\nExpressions are often considered as side-effect free."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/debug-auth/page.tsx"},"span":[3602,3628],"sourceCode":"'use client';\n\nimport { signOut } from 'firebase/auth';\nimport { useEffect, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { auth } from '@/lib/firebase';\n\nexport default function DebugAuthPage() {\n  const [authState, setAuthState] = useState<any>(null);\n  const [indexedDBData, setIndexedDBData] = useState<string>('');\n\n  const checkIndexedDB = async () => {\n    try {\n      const databases = await indexedDB.databases();\n      const firebaseDbs = databases.filter((db) => db.name?.includes('firebase'));\n      setIndexedDBData(JSON.stringify(firebaseDbs, null, 2));\n    } catch (error) {\n      setIndexedDBData(`Error checking IndexedDB: ${error}`);\n    }\n  };\n\n  useEffect(() => {\n    // Check current auth state\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      setAuthState({\n        user: user\n          ? {\n              uid: user.uid,\n              email: user.email,\n              displayName: user.displayName,\n              metadata: user.metadata,\n            }\n          : null,\n        currentUser: auth.currentUser\n          ? {\n              uid: auth.currentUser.uid,\n              email: auth.currentUser.email,\n            }\n          : null,\n      });\n    });\n\n    // Check IndexedDB for Firebase data\n    checkIndexedDB();\n\n    return () => unsubscribe();\n  }, [checkIndexedDB]);\n\n  const clearAllAuth = async () => {\n    try {\n      // Sign out from Firebase\n      await signOut(auth);\n\n      // Clear all localStorage\n      localStorage.clear();\n\n      // Clear all sessionStorage\n      sessionStorage.clear();\n\n      // Clear IndexedDB Firebase databases\n      const databases = await indexedDB.databases();\n      for (const db of databases) {\n        if (db.name?.includes('firebase')) {\n          await indexedDB.deleteDatabase(db.name);\n        }\n      }\n\n      // Reload the page\n      window.location.href = '/';\n    } catch (error) {\n      console.error('Error clearing auth:', error);\n      alert(`Error clearing auth: ${error}`);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto max-w-4xl p-4\">\n      <h1 className=\"mb-4 text-2xl font-bold\">Auth Debug Page</h1>\n\n      <Card className=\"mb-4\">\n        <CardHeader>\n          <CardTitle>Current Auth State</CardTitle>\n          <CardDescription>Firebase Auth current state</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <pre className=\"overflow-auto rounded bg-gray-100 p-4\">\n            {JSON.stringify(authState, null, 2)}\n          </pre>\n        </CardContent>\n      </Card>\n\n      <Card className=\"mb-4\">\n        <CardHeader>\n          <CardTitle>IndexedDB Firebase Databases</CardTitle>\n          <CardDescription>Persistent storage used by Firebase</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <pre className=\"overflow-auto rounded bg-gray-100 p-4\">{indexedDBData}</pre>\n        </CardContent>\n      </Card>\n\n      <Card className=\"mb-4\">\n        <CardHeader>\n          <CardTitle>LocalStorage Keys</CardTitle>\n          <CardDescription>Keys stored in localStorage</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <pre className=\"overflow-auto rounded bg-gray-100 p-4\">\n            {JSON.stringify(Object.keys(localStorage), null, 2)}\n          </pre>\n        </CardContent>\n      </Card>\n\n      <div className=\"flex gap-4\">\n        <Button onClick={clearAllAuth} variant=\"destructive\">\n          Clear All Auth Data & Sign Out\n        </Button>\n        <Button onClick={() => (window.location.href = '/')} variant=\"outline\">\n          Go to Login Page\n        </Button>\n        <Button onClick={() => (window.location.href = '/admin')} variant=\"outline\">\n          Try Admin Route\n        </Button>\n      </div>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noAssignInExpressions","severity":"error","description":"The assignment should not be in an expression.","message":[{"elements":[],"content":"The "},{"elements":["Emphasis"],"content":"assignment"},{"elements":[],"content":" should not be in an "},{"elements":["Emphasis"],"content":"expression"},{"elements":[],"content":"."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The use of assignments in expressions is confusing.\nExpressions are often considered as side-effect free."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/debug-auth/page.tsx"},"span":[3727,3758],"sourceCode":"'use client';\n\nimport { signOut } from 'firebase/auth';\nimport { useEffect, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { auth } from '@/lib/firebase';\n\nexport default function DebugAuthPage() {\n  const [authState, setAuthState] = useState<any>(null);\n  const [indexedDBData, setIndexedDBData] = useState<string>('');\n\n  const checkIndexedDB = async () => {\n    try {\n      const databases = await indexedDB.databases();\n      const firebaseDbs = databases.filter((db) => db.name?.includes('firebase'));\n      setIndexedDBData(JSON.stringify(firebaseDbs, null, 2));\n    } catch (error) {\n      setIndexedDBData(`Error checking IndexedDB: ${error}`);\n    }\n  };\n\n  useEffect(() => {\n    // Check current auth state\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      setAuthState({\n        user: user\n          ? {\n              uid: user.uid,\n              email: user.email,\n              displayName: user.displayName,\n              metadata: user.metadata,\n            }\n          : null,\n        currentUser: auth.currentUser\n          ? {\n              uid: auth.currentUser.uid,\n              email: auth.currentUser.email,\n            }\n          : null,\n      });\n    });\n\n    // Check IndexedDB for Firebase data\n    checkIndexedDB();\n\n    return () => unsubscribe();\n  }, [checkIndexedDB]);\n\n  const clearAllAuth = async () => {\n    try {\n      // Sign out from Firebase\n      await signOut(auth);\n\n      // Clear all localStorage\n      localStorage.clear();\n\n      // Clear all sessionStorage\n      sessionStorage.clear();\n\n      // Clear IndexedDB Firebase databases\n      const databases = await indexedDB.databases();\n      for (const db of databases) {\n        if (db.name?.includes('firebase')) {\n          await indexedDB.deleteDatabase(db.name);\n        }\n      }\n\n      // Reload the page\n      window.location.href = '/';\n    } catch (error) {\n      console.error('Error clearing auth:', error);\n      alert(`Error clearing auth: ${error}`);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto max-w-4xl p-4\">\n      <h1 className=\"mb-4 text-2xl font-bold\">Auth Debug Page</h1>\n\n      <Card className=\"mb-4\">\n        <CardHeader>\n          <CardTitle>Current Auth State</CardTitle>\n          <CardDescription>Firebase Auth current state</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <pre className=\"overflow-auto rounded bg-gray-100 p-4\">\n            {JSON.stringify(authState, null, 2)}\n          </pre>\n        </CardContent>\n      </Card>\n\n      <Card className=\"mb-4\">\n        <CardHeader>\n          <CardTitle>IndexedDB Firebase Databases</CardTitle>\n          <CardDescription>Persistent storage used by Firebase</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <pre className=\"overflow-auto rounded bg-gray-100 p-4\">{indexedDBData}</pre>\n        </CardContent>\n      </Card>\n\n      <Card className=\"mb-4\">\n        <CardHeader>\n          <CardTitle>LocalStorage Keys</CardTitle>\n          <CardDescription>Keys stored in localStorage</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <pre className=\"overflow-auto rounded bg-gray-100 p-4\">\n            {JSON.stringify(Object.keys(localStorage), null, 2)}\n          </pre>\n        </CardContent>\n      </Card>\n\n      <div className=\"flex gap-4\">\n        <Button onClick={clearAllAuth} variant=\"destructive\">\n          Clear All Auth Data & Sign Out\n        </Button>\n        <Button onClick={() => (window.location.href = '/')} variant=\"outline\">\n          Go to Login Page\n        </Button>\n        <Button onClick={() => (window.location.href = '/admin')} variant=\"outline\">\n          Try Admin Route\n        </Button>\n      </div>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/noInvalidPositionAtImportRule","severity":"error","description":"This @import is in the wrong position.","message":[{"elements":[],"content":"This "},{"elements":["Emphasis"],"content":"@import"},{"elements":[],"content":" is in the wrong position."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Any "},{"elements":["Emphasis"],"content":"@import"},{"elements":[],"content":" rules must precede all other valid at-rules and style rules in a stylesheet (ignoring @charset and @layer), or else the "},{"elements":["Emphasis"],"content":"@import"},{"elements":[],"content":" rule is invalid."}]]},{"log":["info",[{"elements":[],"content":"Consider moving import position."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/globals.css"},"span":[86,124],"sourceCode":"@config \"../../tailwind.config.ts\";\n@import \"tailwindcss\";\n\n/* Import theme files */\n@import \"../styles/themes/default.css\";\n@import \"../styles/themes/compass-peak.css\";\n@import \"../styles/themes/fireweed-path.css\";\n\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n@layer base {\n  :root {\n    --background: 180 40% 90.2%;\n    --foreground: 224 71.4% 4.1%;\n    --card: 180 40% 95%;\n    --card-foreground: 224 71.4% 4.1%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 224 71.4% 4.1%;\n    --primary: 180 100% 25.1%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 180 15% 90%;\n    --secondary-foreground: 224 71.4% 4.1%;\n    --muted: 180 10% 85%;\n    --muted-foreground: 224 71.4% 4.1%;\n    --accent: 43 89% 38%;\n    --accent-foreground: 0 0% 100%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 180 15% 80%;\n    --input: 180 15% 85%;\n    --ring: 180 100% 25.1%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 180 100% 35%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 180 90% 90%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 180 100% 25.1%;\n    /* Sidebar dimensions */\n    --sidebar-width: 16rem;\n    --sidebar-width-mobile: 18rem;\n    --sidebar-width-icon: 3rem;\n  }\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 180 100% 35%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 43 89% 45%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 180 100% 35%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n    --sidebar-background: 222.2 84% 4.9%;\n    --sidebar-foreground: 210 40% 98%;\n    --sidebar-primary: 180 100% 35%;\n    --sidebar-primary-foreground: 210 40% 98%;\n    --sidebar-accent: 217.2 32.6% 17.5%;\n    --sidebar-accent-foreground: 210 40% 98%;\n    --sidebar-border: 217.2 32.6% 17.5%;\n    --sidebar-ring: 180 100% 35%;\n    /* Sidebar dimensions */\n    --sidebar-width: 16rem;\n    --sidebar-width-mobile: 18rem;\n    --sidebar-width-icon: 3rem;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n\n  /* Ensure sidebar colors work properly */\n  [data-sidebar] {\n    --background: var(--sidebar-background);\n    --foreground: var(--sidebar-foreground);\n    --primary: var(--sidebar-primary);\n    --primary-foreground: var(--sidebar-primary-foreground);\n    --accent: var(--sidebar-accent);\n    --accent-foreground: var(--sidebar-accent-foreground);\n    --border: var(--sidebar-border);\n    --ring: var(--sidebar-ring);\n  }\n\n  /* Ensure proper stacking context for layout */\n  .group\\/sidebar-wrapper {\n    position: relative;\n    z-index: 0;\n  }\n\n  /* Ensure sidebar content stays within bounds during collapse */\n  [data-sidebar=\"sidebar\"] {\n    overflow: hidden;\n  }\n}\n\n/* Print styles for waiver form */\n@media print {\n  body {\n    font-size: 12pt;\n  }\n\n  /* Hide elements with print:hidden class when printing */\n  .print-hidden {\n    display: none;\n  }\n\n  /* Hide UI elements when printing */\n  nav,\n  footer,\n  header,\n  aside {\n    display: none;\n  }\n\n  /* Ensure waiver form fills the page properly */\n  @page {\n    margin: 0.5in;\n    size: letter;\n  }\n\n  /* Prevent page breaks inside sections */\n  section {\n    page-break-inside: avoid;\n  }\n\n  /* Ensure signature lines are visible */\n  .border-b {\n    border-bottom: 1px solid #000;\n  }\n}\n\n/* Fix primary text contrast for readability */\n@layer utilities {\n  /* In light mode, make primary text darker for better readability */\n  .text-primary {\n    color: hsl(201 48% 35%); /* Much darker glacier blue */\n  }\n\n  /* In dark mode, use the regular primary color */\n  .dark .text-primary {\n    color: hsl(var(--primary));\n  }\n\n  /* Ensure hover states have good contrast too */\n  .hover\\:text-primary:hover {\n    color: hsl(201 48% 25%); /* Even darker on hover in light mode */\n  }\n\n  .dark .hover\\:text-primary:hover {\n    color: hsl(201 48% 76%); /* Lighter on hover in dark mode */\n  }\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noUnknownAtRules","severity":"error","description":"Unexpected unknown at-rule: config ","message":[{"elements":[],"content":"Unexpected unknown at-rule: "},{"elements":["Emphasis"],"content":"config"},{"elements":[],"content":" "}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":""},{"elements":["Emphasis"],"content":"config"},{"elements":[],"content":" is not a standard CSS at-rule, which may lead to unexpected styling results or failure to interpret the styles as intended."}]]},{"log":["info",[{"elements":[],"content":"See "},{"elements":[{"Hyperlink":{"href":"https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule"}}],"content":"MDN web docs"},{"elements":[],"content":" for a known list of at-rules."}]]},{"log":["info",[{"elements":[],"content":"To fix this issue, consider removing the unknown at-rule."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/globals.css"},"span":[1,7],"sourceCode":"@config \"../../tailwind.config.ts\";\n@import \"tailwindcss\";\n\n/* Import theme files */\n@import \"../styles/themes/default.css\";\n@import \"../styles/themes/compass-peak.css\";\n@import \"../styles/themes/fireweed-path.css\";\n\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n@layer base {\n  :root {\n    --background: 180 40% 90.2%;\n    --foreground: 224 71.4% 4.1%;\n    --card: 180 40% 95%;\n    --card-foreground: 224 71.4% 4.1%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 224 71.4% 4.1%;\n    --primary: 180 100% 25.1%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 180 15% 90%;\n    --secondary-foreground: 224 71.4% 4.1%;\n    --muted: 180 10% 85%;\n    --muted-foreground: 224 71.4% 4.1%;\n    --accent: 43 89% 38%;\n    --accent-foreground: 0 0% 100%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 180 15% 80%;\n    --input: 180 15% 85%;\n    --ring: 180 100% 25.1%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 180 100% 35%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 180 90% 90%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 180 100% 25.1%;\n    /* Sidebar dimensions */\n    --sidebar-width: 16rem;\n    --sidebar-width-mobile: 18rem;\n    --sidebar-width-icon: 3rem;\n  }\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 180 100% 35%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 43 89% 45%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 180 100% 35%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n    --sidebar-background: 222.2 84% 4.9%;\n    --sidebar-foreground: 210 40% 98%;\n    --sidebar-primary: 180 100% 35%;\n    --sidebar-primary-foreground: 210 40% 98%;\n    --sidebar-accent: 217.2 32.6% 17.5%;\n    --sidebar-accent-foreground: 210 40% 98%;\n    --sidebar-border: 217.2 32.6% 17.5%;\n    --sidebar-ring: 180 100% 35%;\n    /* Sidebar dimensions */\n    --sidebar-width: 16rem;\n    --sidebar-width-mobile: 18rem;\n    --sidebar-width-icon: 3rem;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n\n  /* Ensure sidebar colors work properly */\n  [data-sidebar] {\n    --background: var(--sidebar-background);\n    --foreground: var(--sidebar-foreground);\n    --primary: var(--sidebar-primary);\n    --primary-foreground: var(--sidebar-primary-foreground);\n    --accent: var(--sidebar-accent);\n    --accent-foreground: var(--sidebar-accent-foreground);\n    --border: var(--sidebar-border);\n    --ring: var(--sidebar-ring);\n  }\n\n  /* Ensure proper stacking context for layout */\n  .group\\/sidebar-wrapper {\n    position: relative;\n    z-index: 0;\n  }\n\n  /* Ensure sidebar content stays within bounds during collapse */\n  [data-sidebar=\"sidebar\"] {\n    overflow: hidden;\n  }\n}\n\n/* Print styles for waiver form */\n@media print {\n  body {\n    font-size: 12pt;\n  }\n\n  /* Hide elements with print:hidden class when printing */\n  .print-hidden {\n    display: none;\n  }\n\n  /* Hide UI elements when printing */\n  nav,\n  footer,\n  header,\n  aside {\n    display: none;\n  }\n\n  /* Ensure waiver form fills the page properly */\n  @page {\n    margin: 0.5in;\n    size: letter;\n  }\n\n  /* Prevent page breaks inside sections */\n  section {\n    page-break-inside: avoid;\n  }\n\n  /* Ensure signature lines are visible */\n  .border-b {\n    border-bottom: 1px solid #000;\n  }\n}\n\n/* Fix primary text contrast for readability */\n@layer utilities {\n  /* In light mode, make primary text darker for better readability */\n  .text-primary {\n    color: hsl(201 48% 35%); /* Much darker glacier blue */\n  }\n\n  /* In dark mode, use the regular primary color */\n  .dark .text-primary {\n    color: hsl(var(--primary));\n  }\n\n  /* Ensure hover states have good contrast too */\n  .hover\\:text-primary:hover {\n    color: hsl(201 48% 25%); /* Even darker on hover in light mode */\n  }\n\n  .dark .hover\\:text-primary:hover {\n    color: hsl(201 48% 76%); /* Lighter on hover in dark mode */\n  }\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/noInvalidPositionAtImportRule","severity":"error","description":"This @import is in the wrong position.","message":[{"elements":[],"content":"This "},{"elements":["Emphasis"],"content":"@import"},{"elements":[],"content":" is in the wrong position."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Any "},{"elements":["Emphasis"],"content":"@import"},{"elements":[],"content":" rules must precede all other valid at-rules and style rules in a stylesheet (ignoring @charset and @layer), or else the "},{"elements":["Emphasis"],"content":"@import"},{"elements":[],"content":" rule is invalid."}]]},{"log":["info",[{"elements":[],"content":"Consider moving import position."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/globals.css"},"span":[37,58],"sourceCode":"@config \"../../tailwind.config.ts\";\n@import \"tailwindcss\";\n\n/* Import theme files */\n@import \"../styles/themes/default.css\";\n@import \"../styles/themes/compass-peak.css\";\n@import \"../styles/themes/fireweed-path.css\";\n\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n@layer base {\n  :root {\n    --background: 180 40% 90.2%;\n    --foreground: 224 71.4% 4.1%;\n    --card: 180 40% 95%;\n    --card-foreground: 224 71.4% 4.1%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 224 71.4% 4.1%;\n    --primary: 180 100% 25.1%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 180 15% 90%;\n    --secondary-foreground: 224 71.4% 4.1%;\n    --muted: 180 10% 85%;\n    --muted-foreground: 224 71.4% 4.1%;\n    --accent: 43 89% 38%;\n    --accent-foreground: 0 0% 100%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 180 15% 80%;\n    --input: 180 15% 85%;\n    --ring: 180 100% 25.1%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 180 100% 35%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 180 90% 90%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 180 100% 25.1%;\n    /* Sidebar dimensions */\n    --sidebar-width: 16rem;\n    --sidebar-width-mobile: 18rem;\n    --sidebar-width-icon: 3rem;\n  }\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 180 100% 35%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 43 89% 45%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 180 100% 35%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n    --sidebar-background: 222.2 84% 4.9%;\n    --sidebar-foreground: 210 40% 98%;\n    --sidebar-primary: 180 100% 35%;\n    --sidebar-primary-foreground: 210 40% 98%;\n    --sidebar-accent: 217.2 32.6% 17.5%;\n    --sidebar-accent-foreground: 210 40% 98%;\n    --sidebar-border: 217.2 32.6% 17.5%;\n    --sidebar-ring: 180 100% 35%;\n    /* Sidebar dimensions */\n    --sidebar-width: 16rem;\n    --sidebar-width-mobile: 18rem;\n    --sidebar-width-icon: 3rem;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n\n  /* Ensure sidebar colors work properly */\n  [data-sidebar] {\n    --background: var(--sidebar-background);\n    --foreground: var(--sidebar-foreground);\n    --primary: var(--sidebar-primary);\n    --primary-foreground: var(--sidebar-primary-foreground);\n    --accent: var(--sidebar-accent);\n    --accent-foreground: var(--sidebar-accent-foreground);\n    --border: var(--sidebar-border);\n    --ring: var(--sidebar-ring);\n  }\n\n  /* Ensure proper stacking context for layout */\n  .group\\/sidebar-wrapper {\n    position: relative;\n    z-index: 0;\n  }\n\n  /* Ensure sidebar content stays within bounds during collapse */\n  [data-sidebar=\"sidebar\"] {\n    overflow: hidden;\n  }\n}\n\n/* Print styles for waiver form */\n@media print {\n  body {\n    font-size: 12pt;\n  }\n\n  /* Hide elements with print:hidden class when printing */\n  .print-hidden {\n    display: none;\n  }\n\n  /* Hide UI elements when printing */\n  nav,\n  footer,\n  header,\n  aside {\n    display: none;\n  }\n\n  /* Ensure waiver form fills the page properly */\n  @page {\n    margin: 0.5in;\n    size: letter;\n  }\n\n  /* Prevent page breaks inside sections */\n  section {\n    page-break-inside: avoid;\n  }\n\n  /* Ensure signature lines are visible */\n  .border-b {\n    border-bottom: 1px solid #000;\n  }\n}\n\n/* Fix primary text contrast for readability */\n@layer utilities {\n  /* In light mode, make primary text darker for better readability */\n  .text-primary {\n    color: hsl(201 48% 35%); /* Much darker glacier blue */\n  }\n\n  /* In dark mode, use the regular primary color */\n  .dark .text-primary {\n    color: hsl(var(--primary));\n  }\n\n  /* Ensure hover states have good contrast too */\n  .hover\\:text-primary:hover {\n    color: hsl(201 48% 25%); /* Even darker on hover in light mode */\n  }\n\n  .dark .hover\\:text-primary:hover {\n    color: hsl(201 48% 76%); /* Lighter on hover in dark mode */\n  }\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/noInvalidPositionAtImportRule","severity":"error","description":"This @import is in the wrong position.","message":[{"elements":[],"content":"This "},{"elements":["Emphasis"],"content":"@import"},{"elements":[],"content":" is in the wrong position."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Any "},{"elements":["Emphasis"],"content":"@import"},{"elements":[],"content":" rules must precede all other valid at-rules and style rules in a stylesheet (ignoring @charset and @layer), or else the "},{"elements":["Emphasis"],"content":"@import"},{"elements":[],"content":" rule is invalid."}]]},{"log":["info",[{"elements":[],"content":"Consider moving import position."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/globals.css"},"span":[126,169],"sourceCode":"@config \"../../tailwind.config.ts\";\n@import \"tailwindcss\";\n\n/* Import theme files */\n@import \"../styles/themes/default.css\";\n@import \"../styles/themes/compass-peak.css\";\n@import \"../styles/themes/fireweed-path.css\";\n\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n@layer base {\n  :root {\n    --background: 180 40% 90.2%;\n    --foreground: 224 71.4% 4.1%;\n    --card: 180 40% 95%;\n    --card-foreground: 224 71.4% 4.1%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 224 71.4% 4.1%;\n    --primary: 180 100% 25.1%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 180 15% 90%;\n    --secondary-foreground: 224 71.4% 4.1%;\n    --muted: 180 10% 85%;\n    --muted-foreground: 224 71.4% 4.1%;\n    --accent: 43 89% 38%;\n    --accent-foreground: 0 0% 100%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 180 15% 80%;\n    --input: 180 15% 85%;\n    --ring: 180 100% 25.1%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 180 100% 35%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 180 90% 90%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 180 100% 25.1%;\n    /* Sidebar dimensions */\n    --sidebar-width: 16rem;\n    --sidebar-width-mobile: 18rem;\n    --sidebar-width-icon: 3rem;\n  }\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 180 100% 35%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 43 89% 45%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 180 100% 35%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n    --sidebar-background: 222.2 84% 4.9%;\n    --sidebar-foreground: 210 40% 98%;\n    --sidebar-primary: 180 100% 35%;\n    --sidebar-primary-foreground: 210 40% 98%;\n    --sidebar-accent: 217.2 32.6% 17.5%;\n    --sidebar-accent-foreground: 210 40% 98%;\n    --sidebar-border: 217.2 32.6% 17.5%;\n    --sidebar-ring: 180 100% 35%;\n    /* Sidebar dimensions */\n    --sidebar-width: 16rem;\n    --sidebar-width-mobile: 18rem;\n    --sidebar-width-icon: 3rem;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n\n  /* Ensure sidebar colors work properly */\n  [data-sidebar] {\n    --background: var(--sidebar-background);\n    --foreground: var(--sidebar-foreground);\n    --primary: var(--sidebar-primary);\n    --primary-foreground: var(--sidebar-primary-foreground);\n    --accent: var(--sidebar-accent);\n    --accent-foreground: var(--sidebar-accent-foreground);\n    --border: var(--sidebar-border);\n    --ring: var(--sidebar-ring);\n  }\n\n  /* Ensure proper stacking context for layout */\n  .group\\/sidebar-wrapper {\n    position: relative;\n    z-index: 0;\n  }\n\n  /* Ensure sidebar content stays within bounds during collapse */\n  [data-sidebar=\"sidebar\"] {\n    overflow: hidden;\n  }\n}\n\n/* Print styles for waiver form */\n@media print {\n  body {\n    font-size: 12pt;\n  }\n\n  /* Hide elements with print:hidden class when printing */\n  .print-hidden {\n    display: none;\n  }\n\n  /* Hide UI elements when printing */\n  nav,\n  footer,\n  header,\n  aside {\n    display: none;\n  }\n\n  /* Ensure waiver form fills the page properly */\n  @page {\n    margin: 0.5in;\n    size: letter;\n  }\n\n  /* Prevent page breaks inside sections */\n  section {\n    page-break-inside: avoid;\n  }\n\n  /* Ensure signature lines are visible */\n  .border-b {\n    border-bottom: 1px solid #000;\n  }\n}\n\n/* Fix primary text contrast for readability */\n@layer utilities {\n  /* In light mode, make primary text darker for better readability */\n  .text-primary {\n    color: hsl(201 48% 35%); /* Much darker glacier blue */\n  }\n\n  /* In dark mode, use the regular primary color */\n  .dark .text-primary {\n    color: hsl(var(--primary));\n  }\n\n  /* Ensure hover states have good contrast too */\n  .hover\\:text-primary:hover {\n    color: hsl(201 48% 25%); /* Even darker on hover in light mode */\n  }\n\n  .dark .hover\\:text-primary:hover {\n    color: hsl(201 48% 76%); /* Lighter on hover in dark mode */\n  }\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/noInvalidPositionAtImportRule","severity":"error","description":"This @import is in the wrong position.","message":[{"elements":[],"content":"This "},{"elements":["Emphasis"],"content":"@import"},{"elements":[],"content":" is in the wrong position."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Any "},{"elements":["Emphasis"],"content":"@import"},{"elements":[],"content":" rules must precede all other valid at-rules and style rules in a stylesheet (ignoring @charset and @layer), or else the "},{"elements":["Emphasis"],"content":"@import"},{"elements":[],"content":" rule is invalid."}]]},{"log":["info",[{"elements":[],"content":"Consider moving import position."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/globals.css"},"span":[171,215],"sourceCode":"@config \"../../tailwind.config.ts\";\n@import \"tailwindcss\";\n\n/* Import theme files */\n@import \"../styles/themes/default.css\";\n@import \"../styles/themes/compass-peak.css\";\n@import \"../styles/themes/fireweed-path.css\";\n\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n@layer base {\n  :root {\n    --background: 180 40% 90.2%;\n    --foreground: 224 71.4% 4.1%;\n    --card: 180 40% 95%;\n    --card-foreground: 224 71.4% 4.1%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 224 71.4% 4.1%;\n    --primary: 180 100% 25.1%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 180 15% 90%;\n    --secondary-foreground: 224 71.4% 4.1%;\n    --muted: 180 10% 85%;\n    --muted-foreground: 224 71.4% 4.1%;\n    --accent: 43 89% 38%;\n    --accent-foreground: 0 0% 100%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 180 15% 80%;\n    --input: 180 15% 85%;\n    --ring: 180 100% 25.1%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 180 100% 35%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 180 90% 90%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 180 100% 25.1%;\n    /* Sidebar dimensions */\n    --sidebar-width: 16rem;\n    --sidebar-width-mobile: 18rem;\n    --sidebar-width-icon: 3rem;\n  }\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 180 100% 35%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 43 89% 45%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 180 100% 35%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n    --sidebar-background: 222.2 84% 4.9%;\n    --sidebar-foreground: 210 40% 98%;\n    --sidebar-primary: 180 100% 35%;\n    --sidebar-primary-foreground: 210 40% 98%;\n    --sidebar-accent: 217.2 32.6% 17.5%;\n    --sidebar-accent-foreground: 210 40% 98%;\n    --sidebar-border: 217.2 32.6% 17.5%;\n    --sidebar-ring: 180 100% 35%;\n    /* Sidebar dimensions */\n    --sidebar-width: 16rem;\n    --sidebar-width-mobile: 18rem;\n    --sidebar-width-icon: 3rem;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n\n  /* Ensure sidebar colors work properly */\n  [data-sidebar] {\n    --background: var(--sidebar-background);\n    --foreground: var(--sidebar-foreground);\n    --primary: var(--sidebar-primary);\n    --primary-foreground: var(--sidebar-primary-foreground);\n    --accent: var(--sidebar-accent);\n    --accent-foreground: var(--sidebar-accent-foreground);\n    --border: var(--sidebar-border);\n    --ring: var(--sidebar-ring);\n  }\n\n  /* Ensure proper stacking context for layout */\n  .group\\/sidebar-wrapper {\n    position: relative;\n    z-index: 0;\n  }\n\n  /* Ensure sidebar content stays within bounds during collapse */\n  [data-sidebar=\"sidebar\"] {\n    overflow: hidden;\n  }\n}\n\n/* Print styles for waiver form */\n@media print {\n  body {\n    font-size: 12pt;\n  }\n\n  /* Hide elements with print:hidden class when printing */\n  .print-hidden {\n    display: none;\n  }\n\n  /* Hide UI elements when printing */\n  nav,\n  footer,\n  header,\n  aside {\n    display: none;\n  }\n\n  /* Ensure waiver form fills the page properly */\n  @page {\n    margin: 0.5in;\n    size: letter;\n  }\n\n  /* Prevent page breaks inside sections */\n  section {\n    page-break-inside: avoid;\n  }\n\n  /* Ensure signature lines are visible */\n  .border-b {\n    border-bottom: 1px solid #000;\n  }\n}\n\n/* Fix primary text contrast for readability */\n@layer utilities {\n  /* In light mode, make primary text darker for better readability */\n  .text-primary {\n    color: hsl(201 48% 35%); /* Much darker glacier blue */\n  }\n\n  /* In dark mode, use the regular primary color */\n  .dark .text-primary {\n    color: hsl(var(--primary));\n  }\n\n  /* Ensure hover states have good contrast too */\n  .hover\\:text-primary:hover {\n    color: hsl(201 48% 25%); /* Even darker on hover in light mode */\n  }\n\n  .dark .hover\\:text-primary:hover {\n    color: hsl(201 48% 76%); /* Lighter on hover in dark mode */\n  }\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noUnknownAtRules","severity":"error","description":"Unexpected unknown at-rule: apply ","message":[{"elements":[],"content":"Unexpected unknown at-rule: "},{"elements":["Emphasis"],"content":"apply"},{"elements":[],"content":" "}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":""},{"elements":["Emphasis"],"content":"apply"},{"elements":[],"content":" is not a standard CSS at-rule, which may lead to unexpected styling results or failure to interpret the styles as intended."}]]},{"log":["info",[{"elements":[],"content":"See "},{"elements":[{"Hyperlink":{"href":"https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule"}}],"content":"MDN web docs"},{"elements":[],"content":" for a known list of at-rules."}]]},{"log":["info",[{"elements":[],"content":"To fix this issue, consider removing the unknown at-rule."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/globals.css"},"span":[2809,2814],"sourceCode":"@config \"../../tailwind.config.ts\";\n@import \"tailwindcss\";\n\n/* Import theme files */\n@import \"../styles/themes/default.css\";\n@import \"../styles/themes/compass-peak.css\";\n@import \"../styles/themes/fireweed-path.css\";\n\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n@layer base {\n  :root {\n    --background: 180 40% 90.2%;\n    --foreground: 224 71.4% 4.1%;\n    --card: 180 40% 95%;\n    --card-foreground: 224 71.4% 4.1%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 224 71.4% 4.1%;\n    --primary: 180 100% 25.1%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 180 15% 90%;\n    --secondary-foreground: 224 71.4% 4.1%;\n    --muted: 180 10% 85%;\n    --muted-foreground: 224 71.4% 4.1%;\n    --accent: 43 89% 38%;\n    --accent-foreground: 0 0% 100%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 180 15% 80%;\n    --input: 180 15% 85%;\n    --ring: 180 100% 25.1%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 180 100% 35%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 180 90% 90%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 180 100% 25.1%;\n    /* Sidebar dimensions */\n    --sidebar-width: 16rem;\n    --sidebar-width-mobile: 18rem;\n    --sidebar-width-icon: 3rem;\n  }\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 180 100% 35%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 43 89% 45%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 180 100% 35%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n    --sidebar-background: 222.2 84% 4.9%;\n    --sidebar-foreground: 210 40% 98%;\n    --sidebar-primary: 180 100% 35%;\n    --sidebar-primary-foreground: 210 40% 98%;\n    --sidebar-accent: 217.2 32.6% 17.5%;\n    --sidebar-accent-foreground: 210 40% 98%;\n    --sidebar-border: 217.2 32.6% 17.5%;\n    --sidebar-ring: 180 100% 35%;\n    /* Sidebar dimensions */\n    --sidebar-width: 16rem;\n    --sidebar-width-mobile: 18rem;\n    --sidebar-width-icon: 3rem;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n\n  /* Ensure sidebar colors work properly */\n  [data-sidebar] {\n    --background: var(--sidebar-background);\n    --foreground: var(--sidebar-foreground);\n    --primary: var(--sidebar-primary);\n    --primary-foreground: var(--sidebar-primary-foreground);\n    --accent: var(--sidebar-accent);\n    --accent-foreground: var(--sidebar-accent-foreground);\n    --border: var(--sidebar-border);\n    --ring: var(--sidebar-ring);\n  }\n\n  /* Ensure proper stacking context for layout */\n  .group\\/sidebar-wrapper {\n    position: relative;\n    z-index: 0;\n  }\n\n  /* Ensure sidebar content stays within bounds during collapse */\n  [data-sidebar=\"sidebar\"] {\n    overflow: hidden;\n  }\n}\n\n/* Print styles for waiver form */\n@media print {\n  body {\n    font-size: 12pt;\n  }\n\n  /* Hide elements with print:hidden class when printing */\n  .print-hidden {\n    display: none;\n  }\n\n  /* Hide UI elements when printing */\n  nav,\n  footer,\n  header,\n  aside {\n    display: none;\n  }\n\n  /* Ensure waiver form fills the page properly */\n  @page {\n    margin: 0.5in;\n    size: letter;\n  }\n\n  /* Prevent page breaks inside sections */\n  section {\n    page-break-inside: avoid;\n  }\n\n  /* Ensure signature lines are visible */\n  .border-b {\n    border-bottom: 1px solid #000;\n  }\n}\n\n/* Fix primary text contrast for readability */\n@layer utilities {\n  /* In light mode, make primary text darker for better readability */\n  .text-primary {\n    color: hsl(201 48% 35%); /* Much darker glacier blue */\n  }\n\n  /* In dark mode, use the regular primary color */\n  .dark .text-primary {\n    color: hsl(var(--primary));\n  }\n\n  /* Ensure hover states have good contrast too */\n  .hover\\:text-primary:hover {\n    color: hsl(201 48% 25%); /* Even darker on hover in light mode */\n  }\n\n  .dark .hover\\:text-primary:hover {\n    color: hsl(201 48% 76%); /* Lighter on hover in dark mode */\n  }\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noUnknownAtRules","severity":"error","description":"Unexpected unknown at-rule: apply ","message":[{"elements":[],"content":"Unexpected unknown at-rule: "},{"elements":["Emphasis"],"content":"apply"},{"elements":[],"content":" "}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":""},{"elements":["Emphasis"],"content":"apply"},{"elements":[],"content":" is not a standard CSS at-rule, which may lead to unexpected styling results or failure to interpret the styles as intended."}]]},{"log":["info",[{"elements":[],"content":"See "},{"elements":[{"Hyperlink":{"href":"https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule"}}],"content":"MDN web docs"},{"elements":[],"content":" for a known list of at-rules."}]]},{"log":["info",[{"elements":[],"content":"To fix this issue, consider removing the unknown at-rule."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/globals.css"},"span":[2848,2853],"sourceCode":"@config \"../../tailwind.config.ts\";\n@import \"tailwindcss\";\n\n/* Import theme files */\n@import \"../styles/themes/default.css\";\n@import \"../styles/themes/compass-peak.css\";\n@import \"../styles/themes/fireweed-path.css\";\n\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n@layer base {\n  :root {\n    --background: 180 40% 90.2%;\n    --foreground: 224 71.4% 4.1%;\n    --card: 180 40% 95%;\n    --card-foreground: 224 71.4% 4.1%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 224 71.4% 4.1%;\n    --primary: 180 100% 25.1%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 180 15% 90%;\n    --secondary-foreground: 224 71.4% 4.1%;\n    --muted: 180 10% 85%;\n    --muted-foreground: 224 71.4% 4.1%;\n    --accent: 43 89% 38%;\n    --accent-foreground: 0 0% 100%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 180 15% 80%;\n    --input: 180 15% 85%;\n    --ring: 180 100% 25.1%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 180 100% 35%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 180 90% 90%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 180 100% 25.1%;\n    /* Sidebar dimensions */\n    --sidebar-width: 16rem;\n    --sidebar-width-mobile: 18rem;\n    --sidebar-width-icon: 3rem;\n  }\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 180 100% 35%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 43 89% 45%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 180 100% 35%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n    --sidebar-background: 222.2 84% 4.9%;\n    --sidebar-foreground: 210 40% 98%;\n    --sidebar-primary: 180 100% 35%;\n    --sidebar-primary-foreground: 210 40% 98%;\n    --sidebar-accent: 217.2 32.6% 17.5%;\n    --sidebar-accent-foreground: 210 40% 98%;\n    --sidebar-border: 217.2 32.6% 17.5%;\n    --sidebar-ring: 180 100% 35%;\n    /* Sidebar dimensions */\n    --sidebar-width: 16rem;\n    --sidebar-width-mobile: 18rem;\n    --sidebar-width-icon: 3rem;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n\n  /* Ensure sidebar colors work properly */\n  [data-sidebar] {\n    --background: var(--sidebar-background);\n    --foreground: var(--sidebar-foreground);\n    --primary: var(--sidebar-primary);\n    --primary-foreground: var(--sidebar-primary-foreground);\n    --accent: var(--sidebar-accent);\n    --accent-foreground: var(--sidebar-accent-foreground);\n    --border: var(--sidebar-border);\n    --ring: var(--sidebar-ring);\n  }\n\n  /* Ensure proper stacking context for layout */\n  .group\\/sidebar-wrapper {\n    position: relative;\n    z-index: 0;\n  }\n\n  /* Ensure sidebar content stays within bounds during collapse */\n  [data-sidebar=\"sidebar\"] {\n    overflow: hidden;\n  }\n}\n\n/* Print styles for waiver form */\n@media print {\n  body {\n    font-size: 12pt;\n  }\n\n  /* Hide elements with print:hidden class when printing */\n  .print-hidden {\n    display: none;\n  }\n\n  /* Hide UI elements when printing */\n  nav,\n  footer,\n  header,\n  aside {\n    display: none;\n  }\n\n  /* Ensure waiver form fills the page properly */\n  @page {\n    margin: 0.5in;\n    size: letter;\n  }\n\n  /* Prevent page breaks inside sections */\n  section {\n    page-break-inside: avoid;\n  }\n\n  /* Ensure signature lines are visible */\n  .border-b {\n    border-bottom: 1px solid #000;\n  }\n}\n\n/* Fix primary text contrast for readability */\n@layer utilities {\n  /* In light mode, make primary text darker for better readability */\n  .text-primary {\n    color: hsl(201 48% 35%); /* Much darker glacier blue */\n  }\n\n  /* In dark mode, use the regular primary color */\n  .dark .text-primary {\n    color: hsl(var(--primary));\n  }\n\n  /* Ensure hover states have good contrast too */\n  .hover\\:text-primary:hover {\n    color: hsl(201 48% 25%); /* Even darker on hover in light mode */\n  }\n\n  .dark .hover\\:text-primary:hover {\n    color: hsl(201 48% 76%); /* Lighter on hover in dark mode */\n  }\n}\n"},"tags":[],"source":null},{"category":"assist/source/organizeImports","severity":"error","description":"The imports and exports are not sorted.","message":[{"elements":[],"content":"The imports and exports are not sorted."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Safe fix: Organize Imports (Biome)"}]]},{"diff":{"dictionary":"'use client';\n\nimport { ArrowLeft, Camera, Mail, Phone, Save, User, Users } from 'lucide-react';\nimport Link from 'next/link';\nimport { useEffect, useStateuseId,  } from 'react';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';  );\n}\n","ops":[{"diffOp":{"equal":{"range":[0,126]}}},{"diffOp":{"equal":{"range":[126,147]}}},{"diffOp":{"delete":{"range":[147,155]}}},{"diffOp":{"insert":{"range":[155,160]}}},{"diffOp":{"equal":{"range":[160,162]}}},{"diffOp":{"delete":{"range":[155,160]}}},{"diffOp":{"insert":{"range":[147,155]}}},{"diffOp":{"equal":{"range":[162,178]}}},{"diffOp":{"equal":{"range":[178,305]}}},{"equalLines":{"line_count":478}},{"diffOp":{"equal":{"range":[305,312]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/profile/page.tsx"},"span":[15,96],"sourceCode":"'use client';\n\nimport { ArrowLeft, Camera, Mail, Phone, Save, User, Users } from 'lucide-react';\nimport Link from 'next/link';\nimport { useEffect, useState, useId } from 'react';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { profileService, type UserProfile } from '@/lib/firebase-admin';\n\n// Format phone number as user types\nfunction formatPhoneNumber(value: string): string {\n  // Remove all non-digit characters\n  const phoneNumber = value.replace(/\\D/g, '');\n\n  // Format based on length\n  if (phoneNumber.length <= 3) {\n    return phoneNumber;\n  } else if (phoneNumber.length <= 6) {\n    return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;\n  } else if (phoneNumber.length <= 10) {\n    return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6)}`;\n  } else {\n    // Handle numbers with country code\n    return `+${phoneNumber.slice(0, 1)} (${phoneNumber.slice(1, 4)}) ${phoneNumber.slice(4, 7)}-${phoneNumber.slice(7, 11)}`;\n  }\n}\n\nconst mathPersonalities = [\n  {\n    type: 'Visual Learner',\n    description:\n      'Learns best through diagrams, charts, and visual representations of mathematical concepts.',\n    icon: '👁',\n  },\n  {\n    type: 'Problem Solver',\n    description: 'Enjoys tackling challenging problems and finding creative solutions.',\n    icon: '🧩',\n  },\n  {\n    type: 'Pattern Seeker',\n    description: 'Excels at recognizing patterns and relationships in numbers and sequences.',\n    icon: '🔍',\n  },\n  {\n    type: 'Creative Thinker',\n    description: 'Approaches math with imagination and finds unique ways to solve problems.',\n    icon: '🎨',\n  },\n  {\n    type: 'Logical Analyst',\n    description: 'Thrives on step-by-step reasoning and systematic problem-solving approaches.',\n    icon: '🔬',\n  },\n];\n\nexport default function ProfilePage() {\n  const avatarUploadId = useId();\n  const guardianNameId = useId();\n  const displayNameId = useId();\n  const phoneId = useId();\n  const emailId = useId();\n  const bioId = useId();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [activeTab, setActiveTab] = useState('basic');\n\n  // Form state\n  const [formData, setFormData] = useState({\n    guardianName: '',\n    displayName: '',\n    email: '',\n    phone: '',\n    bio: '',\n    children: [] as { name: string; preferredName?: string; grade: string }[],\n  });\n\n  useEffect(() => {\n    if (user) {\n      loadProfile();\n    }\n  }, [user, loadProfile]);\n\n  async function loadProfile() {\n    if (!user) return;\n\n    try {\n      const data = await profileService.get(user.uid);\n      if (data) {\n        setProfile(data);\n        setFormData({\n          guardianName: data.guardianName || '',\n          displayName: data.displayName || data.guardianName || '',\n          email: data.email || user.email || '',\n          phone: data.phone || '',\n          bio: data.bio || '',\n          children: data.children || [],\n        });\n      } else {\n        // Initialize with user's email\n        setFormData((prev) => ({\n          ...prev,\n          email: user.email || '',\n        }));\n      }\n    } catch (error) {\n      console.error('Error loading profile:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load profile',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function handleSave() {\n    if (!user) return;\n\n    // Validate required fields\n    if (!formData.guardianName || !formData.email || !formData.phone) {\n      toast({\n        title: 'Missing Information',\n        description: 'Please fill in all required fields',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    // Validate children have names and grades if any children are added\n    for (const child of formData.children) {\n      if (!child.name || !child.grade) {\n        toast({\n          title: 'Missing Child Information',\n          description: 'Please provide name and grade for all children',\n          variant: 'destructive',\n        });\n        return;\n      }\n    }\n\n    setSaving(true);\n\n    try {\n      const profileData: any = {\n        guardianName: formData.guardianName,\n        displayName: formData.displayName || formData.guardianName,\n        email: formData.email,\n        phone: formData.phone,\n        bio: formData.bio || '',\n        children: formData.children,\n      };\n\n      if (profile) {\n        await profileService.update(user.uid, profileData);\n      } else {\n        await profileService.create(user.uid, profileData);\n      }\n\n      toast({\n        title: 'Success',\n        description: 'Profile saved successfully',\n      });\n\n      loadProfile();\n    } catch (error) {\n      console.error('Error saving profile:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to save profile',\n        variant: 'destructive',\n      });\n    } finally {\n      setSaving(false);\n    }\n  }\n\n  async function handleAvatarUpload(event: React.ChangeEvent<HTMLInputElement>) {\n    const file = event.target.files?.[0];\n    if (!file || !user) return;\n\n    try {\n      const avatarUrl = await profileService.uploadAvatar(user.uid, file);\n      await profileService.update(user.uid, { avatarUrl });\n      toast({\n        title: 'Success',\n        description: 'Avatar uploaded successfully',\n      });\n      loadProfile();\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to upload avatar',\n        variant: 'destructive',\n      });\n    }\n  }\n\n  function addChild() {\n    setFormData((prev) => ({\n      ...prev,\n      children: [...prev.children, { name: '', preferredName: '', grade: '' }],\n    }));\n  }\n\n  function removeChild(index: number) {\n    setFormData((prev) => ({\n      ...prev,\n      children: prev.children.filter((_, i) => i !== index),\n    }));\n  }\n\n  function updateChild(index: number, field: 'name' | 'preferredName' | 'grade', value: string) {\n    setFormData((prev) => ({\n      ...prev,\n      children: prev.children.map((child, i) =>\n        i === index ? { ...child, [field]: value } : child\n      ),\n    }));\n  }\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto max-w-4xl space-y-6 p-6\">\n        <Skeleton className=\"h-10 w-48\" />\n        <Skeleton className=\"h-96\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-4xl space-y-6 p-6\">\n      <div className=\"mb-6 flex items-center justify-between\">\n        <Button variant=\"ghost\" asChild>\n          <Link href=\"/dashboard\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Dashboard\n          </Link>\n        </Button>\n        <Button onClick={handleSave} disabled={saving}>\n          <Save className=\"mr-2 h-4 w-4\" />\n          {saving ? 'Saving...' : 'Save Changes'}\n        </Button>\n      </div>\n\n      <div>\n        <h1 className=\"text-3xl font-bold\">My Profile</h1>\n        <p className=\"text-muted-foreground\">Manage your account information and preferences</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-6\">\n            <div className=\"relative\">\n              <Avatar className=\"h-24 w-24\">\n                <AvatarImage\n                  src={\n                    profile?.avatarUrl ||\n                    `https://api.dicebear.com/7.x/initials/svg?seed=${user?.uid}`\n                  }\n                  alt={formData.guardianName}\n                />\n                <AvatarFallback>\n                  {formData.guardianName?.charAt(0) || user?.email?.charAt(0) || 'U'}\n                </AvatarFallback>\n              </Avatar>\n              <label htmlFor={avatarUploadId} className=\"absolute right-0 bottom-0 cursor-pointer\">\n                <div className=\"bg-primary text-primary-foreground rounded-full p-2\">\n                  <Camera className=\"h-4 w-4\" />\n                </div>\n                <input\n                  id={avatarUploadId}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  className=\"hidden\"\n                  onChange={handleAvatarUpload}\n                />\n              </label>\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold\">\n                {formData.displayName || formData.guardianName || 'Your Name'}\n              </h2>\n              <p className=\"text-muted-foreground\">{formData.email}</p>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"basic\">Basic Info</TabsTrigger>\n          <TabsTrigger value=\"children\">Children</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"basic\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Contact Information</CardTitle>\n              <CardDescription>Required information for program communications</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor={guardianNameId}>\n                    Guardian Name <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <div className=\"relative\">\n                    <User className=\"text-muted-foreground absolute top-2.5 left-3 h-4 w-4\" />\n                    <Input\n                      id={guardianNameId}\n                      placeholder=\"Your full name\"\n                      value={formData.guardianName}\n                      onChange={(e) =>\n                        setFormData((prev) => ({ ...prev, guardianName: e.target.value }))\n                      }\n                      className=\"pl-10\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor={displayNameId}>Display Name (Optional)</Label>\n                  <Input\n                    id={displayNameId}\n                    placeholder=\"How you'd like to be called\"\n                    value={formData.displayName}\n                    onChange={(e) =>\n                      setFormData((prev) => ({ ...prev, displayName: e.target.value }))\n                    }\n                  />\n                  <p className=\"text-muted-foreground text-xs\">Leave blank to use your full name</p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor={phoneId}>\n                    <Phone className=\"mr-1 inline h-4 w-4\" />\n                    Phone Number <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <Input\n                    id={phoneId}\n                    type=\"tel\"\n                    placeholder=\"(555) 123-4567\"\n                    value={formData.phone}\n                    onChange={(e) => {\n                      const formatted = formatPhoneNumber(e.target.value);\n                      setFormData((prev) => ({ ...prev, phone: formatted }));\n                    }}\n                    maxLength={14} // For format: (123) 456-7890\n                  />\n                  <p className=\"text-muted-foreground text-xs\">US phone number format</p>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor={emailId}>\n                  Email Address <span className=\"text-destructive\">*</span>\n                </Label>\n                <div className=\"relative\">\n                  <Mail className=\"text-muted-foreground absolute top-2.5 left-3 h-4 w-4\" />\n                  <Input\n                    id={emailId}\n                    type=\"email\"\n                    placeholder=\"your@email.com\"\n                    value={formData.email}\n                    onChange={(e) => setFormData((prev) => ({ ...prev, email: e.target.value }))}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor={bioId}>About You (Optional)</Label>\n                <Textarea\n                  id={bioId}\n                  placeholder=\"Tell other families a bit about yourself...\"\n                  value={formData.bio}\n                  onChange={(e) => setFormData((prev) => ({ ...prev, bio: e.target.value }))}\n                  rows={4}\n                />\n                <p className=\"text-muted-foreground text-sm\">\n                  This will be visible to other program participants\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"children\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Registered Children</CardTitle>\n              <CardDescription>\n                Add your children's names and what they prefer to be called\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {formData.children.map((child, index) => (\n                <div key={index} className=\"space-y-4 rounded-lg border p-4\">\n                  <div className=\"grid gap-4 md:grid-cols-3\">\n                    <div className=\"space-y-2\">\n                      <Label>\n                        Full Name <span className=\"text-destructive\">*</span>\n                      </Label>\n                      <Input\n                        placeholder=\"Child's full name\"\n                        value={child.name}\n                        onChange={(e) => updateChild(index, 'name', e.target.value)}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>Preferred Name</Label>\n                      <Input\n                        placeholder=\"What they like to be called\"\n                        value={child.preferredName || ''}\n                        onChange={(e) => updateChild(index, 'preferredName', e.target.value)}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>\n                        Grade <span className=\"text-destructive\">*</span>\n                      </Label>\n                      <Select\n                        value={child.grade || ''}\n                        onValueChange={(value) => updateChild(index, 'grade', value)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select grade\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"K\">Kindergarten</SelectItem>\n                          <SelectItem value=\"1\">1st Grade</SelectItem>\n                          <SelectItem value=\"2\">2nd Grade</SelectItem>\n                          <SelectItem value=\"3\">3rd Grade</SelectItem>\n                          <SelectItem value=\"4\">4th Grade</SelectItem>\n                          <SelectItem value=\"5\">5th Grade</SelectItem>\n                          <SelectItem value=\"6\">6th Grade</SelectItem>\n                          <SelectItem value=\"7\">7th Grade</SelectItem>\n                          <SelectItem value=\"8\">8th Grade</SelectItem>\n                          <SelectItem value=\"9\">9th Grade</SelectItem>\n                          <SelectItem value=\"10\">10th Grade</SelectItem>\n                          <SelectItem value=\"11\">11th Grade</SelectItem>\n                          <SelectItem value=\"12\">12th Grade</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-end\">\n                    <Button variant=\"outline\" size=\"sm\" onClick={() => removeChild(index)}>\n                      Remove Child\n                    </Button>\n                  </div>\n                </div>\n              ))}\n\n              <Button variant=\"outline\" onClick={addChild} className=\"w-full\">\n                <Users className=\"mr-2 h-4 w-4\" />\n                Add Child\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Math Personality tab removed - will be added to individual student profiles */}\n      </Tabs>\n    </div>\n  );\n}\n"},"tags":["fixable"],"source":null},{"category":"lint/a11y/useValidAnchor","severity":"error","description":"Provide a valid value for the attribute href.","message":[{"elements":[],"content":"Provide a valid value for the attribute "},{"elements":["Emphasis"],"content":"href"},{"elements":[],"content":"."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The href attribute should be a valid a URL"}]]},{"log":["info",[{"elements":[],"content":"Check "},{"elements":[{"Hyperlink":{"href":"https://marcysutton.com/links-vs-buttons-in-modern-web-applications"}}],"content":"this thorough explanation"},{"elements":[],"content":" to better understand the context."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/programs/mathcounts/page.tsx"},"span":[13304,13312],"sourceCode":"import { Book, Calendar, Clock, Heart, MapPin, Target, Trophy, Users } from 'lucide-react';\nimport Link from 'next/link';\nimport { PublicHeader } from '@/components/public-header';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n\nexport default function MathCountsPage() {\n  return (\n    <>\n      <PublicHeader />\n      <main className=\"bg-background min-h-screen\">\n        <div className=\"container py-8\">\n          <div className=\"mb-8\">\n            <Badge className=\"mb-4\">Registration Open</Badge>\n            <h1 className=\"text-4xl font-bold tracking-tight\">MathCounts at Homer</h1>\n            <p className=\"text-muted-foreground mt-2 text-lg\">\n              Join our team and discover the excitement of competitive mathematics!\n            </p>\n            <div className=\"mt-6 flex gap-4\">\n              <Button asChild size=\"lg\">\n                <Link href=\"/register\">Register for 2025 Season</Link>\n              </Button>\n              <Button variant=\"outline\" size=\"lg\" asChild>\n                <a href=\"https://www.mathcounts.org/\" target=\"_blank\" rel=\"noopener\">\n                  Visit MathCounts.org\n                </a>\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"grid gap-6 lg:grid-cols-3\">\n            <div className=\"space-y-6 lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>About MathCounts</CardTitle>\n                </CardHeader>\n                <CardContent className=\"prose prose-sm max-w-none\">\n                  <p>\n                    MathCounts is a national mathematics competition program that promotes\n                    achievement through fun and engaging \"bee\" style contests. The program builds\n                    problem-solving skills and fosters achievement through four levels of\n                    competition: school, chapter, state, and national.\n                  </p>\n                  <p>\n                    Our Homer chapter welcomes students in grades 4-8 who enjoy mathematics and want\n                    to challenge themselves in a supportive team environment. Whether you're aiming\n                    for nationals or just want to improve your math skills, MathCounts has something\n                    for everyone.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Tabs defaultValue=\"schedule\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"schedule\">Schedule</TabsTrigger>\n                  <TabsTrigger value=\"competitions\">Competitions</TabsTrigger>\n                  <TabsTrigger value=\"expectations\">Expectations</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"schedule\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Meeting Schedule</CardTitle>\n                      <CardDescription>\n                        Regular practice sessions to prepare for competitions\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"grid gap-4 sm:grid-cols-2\">\n                        <div className=\"flex gap-3\">\n                          <Calendar className=\"text-primary mt-0.5 h-5 w-5\" />\n                          <div>\n                            <p className=\"font-medium\">Weekly Meetings</p>\n                            <p className=\"text-muted-foreground text-sm\">Every Tuesday</p>\n                          </div>\n                        </div>\n                        <div className=\"flex gap-3\">\n                          <Clock className=\"text-primary mt-0.5 h-5 w-5\" />\n                          <div>\n                            <p className=\"font-medium\">Time</p>\n                            <p className=\"text-muted-foreground text-sm\">4:00-5:30 PM</p>\n                          </div>\n                        </div>\n                        <div className=\"flex gap-3\">\n                          <MapPin className=\"text-primary mt-0.5 h-5 w-5\" />\n                          <div>\n                            <p className=\"font-medium\">Location</p>\n                            <p className=\"text-muted-foreground text-sm\">\n                              Homer Middle School, Room 203\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex gap-3\">\n                          <Users className=\"text-primary mt-0.5 h-5 w-5\" />\n                          <div>\n                            <p className=\"font-medium\">First Meeting</p>\n                            <p className=\"text-muted-foreground text-sm\">\n                              Tuesday, September 9, 2025\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"bg-muted mt-4 rounded-lg p-4\">\n                        <p className=\"text-sm\">\n                          <strong>Note:</strong> No meetings during school holidays or breaks.\n                          Parents will be notified of any schedule changes via email.\n                        </p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"competitions\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Competition Schedule</CardTitle>\n                      <CardDescription>Key dates for the 2025 competition season</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div className=\"rounded-lg border p-4\">\n                          <div className=\"flex items-start gap-3\">\n                            <Trophy className=\"mt-0.5 h-5 w-5 text-blue-600\" />\n                            <div className=\"flex-1\">\n                              <p className=\"font-semibold\">Chapter Competition</p>\n                              <p className=\"text-muted-foreground text-sm\">\n                                Saturday, January 18, 2025\n                              </p>\n                              <p className=\"mt-1 text-sm\">\n                                Local competition hosted at Homer High School. Top teams advance to\n                                state.\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"rounded-lg border p-4\">\n                          <div className=\"flex items-start gap-3\">\n                            <Trophy className=\"mt-0.5 h-5 w-5 text-purple-600\" />\n                            <div className=\"flex-1\">\n                              <p className=\"font-semibold\">State Competition</p>\n                              <p className=\"text-muted-foreground text-sm\">\n                                Saturday, March 8, 2025\n                              </p>\n                              <p className=\"mt-1 text-sm\">\n                                Statewide competition in Anchorage. Top teams advance to nationals.\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"rounded-lg border p-4\">\n                          <div className=\"flex items-start gap-3\">\n                            <Trophy className=\"mt-0.5 h-5 w-5 text-yellow-600\" />\n                            <div className=\"flex-1\">\n                              <p className=\"font-semibold\">National Competition</p>\n                              <p className=\"text-muted-foreground text-sm\">May 11-14, 2025</p>\n                              <p className=\"mt-1 text-sm\">\n                                For qualifying teams only. Location TBD.\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"expectations\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Program Expectations</CardTitle>\n                      <CardDescription>What we expect from students and parents</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <h4 className=\"mb-2 flex items-center gap-2 font-semibold\">\n                          <Target className=\"h-4 w-4\" />\n                          Student Expectations\n                        </h4>\n                        <ul className=\"text-muted-foreground ml-6 space-y-1 text-sm\">\n                          <li>• Attend weekly practice sessions regularly</li>\n                          <li>• Complete practice problems between meetings</li>\n                          <li>• Support and encourage teammates</li>\n                          <li>• Maintain good academic standing in school</li>\n                          <li>• Participate in chapter competition</li>\n                        </ul>\n                      </div>\n\n                      <div>\n                        <h4 className=\"mb-2 flex items-center gap-2 font-semibold\">\n                          <Heart className=\"h-4 w-4\" />\n                          Parent Support\n                        </h4>\n                        <ul className=\"text-muted-foreground ml-6 space-y-1 text-sm\">\n                          <li>• Ensure regular attendance at practices</li>\n                          <li>• Provide transportation to/from meetings</li>\n                          <li>• Support home practice time</li>\n                          <li>• Volunteer for competition events when possible</li>\n                          <li>• Communicate with coaches about conflicts</li>\n                        </ul>\n                      </div>\n\n                      <div className=\"bg-primary/5 border-primary/20 rounded-lg border p-4\">\n                        <p className=\"text-sm\">\n                          <strong>Philosophy:</strong> MathCounts is about more than competition. We\n                          focus on building confidence, problem-solving skills, and a love for\n                          mathematics that will serve students throughout their lives.\n                        </p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            </div>\n\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Quick Facts</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-center gap-3\">\n                    <Users className=\"text-muted-foreground h-4 w-4\" />\n                    <span className=\"text-sm\">Open to grades 4-8</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Calendar className=\"text-muted-foreground h-4 w-4\" />\n                    <span className=\"text-sm\">September - March season</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Book className=\"text-muted-foreground h-4 w-4\" />\n                    <span className=\"text-sm\">No prior experience needed</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Trophy className=\"text-muted-foreground h-4 w-4\" />\n                    <span className=\"text-sm\">3 competition levels</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Resources</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  <Button variant=\"outline\" className=\"w-full justify-start\" asChild>\n                    <a\n                      href=\"https://www.mathcounts.org/resources/problem-of-the-week\"\n                      target=\"_blank\"\n                      rel=\"noopener\"\n                    >\n                      Problem of the Week Archive\n                    </a>\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start\" asChild>\n                    <a\n                      href=\"https://www.mathcounts.org/resources/parents\"\n                      target=\"_blank\"\n                      rel=\"noopener\"\n                    >\n                      Parent Resources\n                    </a>\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start\" asChild>\n                    <a href=\"#\" target=\"_blank\" rel=\"noopener\">\n                      2024 Competition Handbook (PDF)\n                    </a>\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-primary text-primary-foreground\">\n                <CardHeader>\n                  <CardTitle className=\"text-primary-foreground\">Ready to Join?</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-primary-foreground/90 mb-4 text-sm\">\n                    Registration is open for the 2025 season. Secure your spot today!\n                  </p>\n                  <Button variant=\"secondary\" className=\"w-full\" asChild>\n                    <Link href=\"/register\">Register Now</Link>\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n    </>\n  );\n}\n"},"tags":[],"source":null},{"category":"assist/source/organizeImports","severity":"error","description":"The imports and exports are not sorted.","message":[{"elements":[],"content":"The imports and exports are not sorted."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Safe fix: Organize Imports (Biome)"}]]},{"diff":{"dictionary":"'use client';\n\nimport { createUserWithEmailAndPassword, updateProfile } from 'firebase/auth';import { ArrowLeft, Info } from 'lucide-react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useEffect, useStateuseId,  } from 'react';\nimport { sendWelcomeEmailAction } from '@/app/actions/send-welcome-email';\nimport { EULADialog } from '@/components/eula-dialog';  );\n}\n","ops":[{"diffOp":{"equal":{"range":[0,93]}}},{"equalLines":{"line_count":1}},{"diffOp":{"equal":{"range":[93,215]}}},{"diffOp":{"equal":{"range":[215,236]}}},{"diffOp":{"delete":{"range":[236,244]}}},{"diffOp":{"insert":{"range":[244,249]}}},{"diffOp":{"equal":{"range":[249,251]}}},{"diffOp":{"delete":{"range":[244,249]}}},{"diffOp":{"insert":{"range":[236,244]}}},{"diffOp":{"equal":{"range":[251,267]}}},{"diffOp":{"equal":{"range":[267,397]}}},{"equalLines":{"line_count":435}},{"diffOp":{"equal":{"range":[397,404]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/signup/page.tsx"},"span":[15,93],"sourceCode":"'use client';\n\nimport { createUserWithEmailAndPassword, updateProfile } from 'firebase/auth';\nimport { doc, getDoc } from 'firebase/firestore';\nimport { ArrowLeft, Info } from 'lucide-react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useEffect, useState, useId } from 'react';\nimport { sendWelcomeEmailAction } from '@/app/actions/send-welcome-email';\nimport { EULADialog } from '@/components/eula-dialog';\nimport { Icons } from '@/components/icons';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { auth, db } from '@/lib/firebase';\nimport { profileService } from '@/lib/firebase-admin';\nimport { formatPhoneNumber } from '@/lib/utils';\n\nexport default function SignUpPage() {\n  const signupFormId = useId();\n  const displayNameId = useId();\n  const emailId = useId();\n  const phoneId = useId();\n  const passwordId = useId();\n  const confirmPasswordId = useId();\n  const announcementsId = useId();\n  const programUpdatesId = useId();\n  const newslettersId = useId();\n  const router = useRouter();\n  const { toast } = useToast();\n  const { user, loading: authLoading } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [showEULA, setShowEULA] = useState(false);\n  const [eulaAccepted, setEulaAccepted] = useState(false);\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    confirmPassword: '',\n    displayName: '',\n    phone: '',\n    emailPreferences: {\n      announcements: true,\n      programUpdates: true,\n      newsletters: true,\n    },\n  });\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  useEffect(() => {\n    // If user is already authenticated, check their profile status\n    if (user && !authLoading) {\n      const checkProfileStatus = async () => {\n        try {\n          const userDoc = await getDoc(doc(db, 'users', user.uid));\n\n          if (!userDoc.exists() || !userDoc.data()?.profileCompleted) {\n            // Profile not complete, redirect to welcome\n            router.push('/welcome');\n          } else {\n            // Profile complete, redirect to dashboard\n            router.push('/dashboard');\n          }\n        } catch (error) {\n          console.error('Error checking profile:', error);\n          router.push('/dashboard');\n        }\n      };\n\n      checkProfileStatus();\n    }\n  }, [user, authLoading, router]);\n\n  async function handleSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    setErrors({});\n\n    // Show EULA if not accepted yet\n    if (!eulaAccepted) {\n      setShowEULA(true);\n      return;\n    }\n\n    // Validate form\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.email) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = 'Please enter a valid email';\n    }\n\n    if (!formData.password) {\n      newErrors.password = 'Password is required';\n    } else if (formData.password.length < 6) {\n      newErrors.password = 'Password must be at least 6 characters';\n    }\n\n    if (formData.password !== formData.confirmPassword) {\n      newErrors.confirmPassword = 'Passwords do not match';\n    }\n\n    if (!formData.displayName) {\n      newErrors.displayName = 'Name is required';\n    }\n\n    if (!formData.phone) {\n      newErrors.phone = 'Phone number is required';\n    } else if (formData.phone.replace(/\\D/g, '').length !== 10) {\n      newErrors.phone = 'Please enter a valid 10-digit phone number';\n    }\n\n    if (Object.keys(newErrors).length > 0) {\n      setErrors(newErrors);\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      // Create user account\n      const userCredential = await createUserWithEmailAndPassword(\n        auth,\n        formData.email,\n        formData.password\n      );\n\n      // Update display name\n      await updateProfile(userCredential.user, {\n        displayName: formData.displayName,\n      });\n\n      // Create user profile with email preferences\n      await profileService.createOrUpdate(userCredential.user.uid, {\n        displayName: formData.displayName,\n        email: formData.email,\n        phone: formData.phone.replace(/\\D/g, ''),\n        role: 'guardian',\n        emailPreferences: formData.emailPreferences,\n        eulaAccepted: true,\n        eulaAcceptedDate: new Date(),\n      });\n\n      // Send welcome email if they opted in for any emails\n      if (\n        formData.emailPreferences.announcements ||\n        formData.emailPreferences.programUpdates ||\n        formData.emailPreferences.newsletters\n      ) {\n        try {\n          await sendWelcomeEmailAction(formData.email, formData.displayName);\n        } catch (emailError) {\n          console.error('Failed to send welcome email:', emailError);\n          // Don't block the sign-up process if email fails\n        }\n      }\n\n      toast({\n        title: 'Account created successfully',\n        description: 'Welcome to Homer Enrichment Hub! Check your email for next steps.',\n      });\n\n      // Redirect to welcome page for profile completion\n      router.push('/welcome');\n    } catch (error: any) {\n      console.error('Sign up error:', error);\n\n      let errorMessage = 'Failed to create account. Please try again.';\n\n      if (error.code === 'auth/email-already-in-use') {\n        errorMessage = 'This email is already registered. Please sign in instead.';\n      } else if (error.code === 'auth/weak-password') {\n        errorMessage = 'Password is too weak. Please use a stronger password.';\n      } else if (error.code === 'auth/invalid-email') {\n        errorMessage = 'Invalid email address.';\n      }\n\n      toast({\n        title: 'Sign up failed',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  function handlePhoneChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const formatted = formatPhoneNumber(e.target.value);\n    setFormData((prev) => ({ ...prev, phone: formatted }));\n  }\n\n  const handleEULAAccept = () => {\n    setEulaAccepted(true);\n    setShowEULA(false);\n    // Resubmit the form after EULA acceptance\n    const form = document.getElementById('signup-form') as HTMLFormElement;\n    if (form) {\n      form.requestSubmit();\n    }\n  };\n\n  const handleEULADecline = () => {\n    setShowEULA(false);\n    toast({\n      title: 'Terms not accepted',\n      description: 'You must accept the terms of service to create an account.',\n      variant: 'destructive',\n    });\n  };\n\n  // Show loading while checking auth status\n  if (authLoading) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center\">\n        <Icons.spinner className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-background flex min-h-screen items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"mb-2 flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"sm\" asChild>\n              <Link href=\"/\">\n                <ArrowLeft className=\"h-4 w-4\" />\n              </Link>\n            </Button>\n            <CardTitle className=\"text-2xl\">Welcome to Homer Enrichment Hub!</CardTitle>\n          </div>\n          <CardDescription>\n            Let's get you set up so you can register your children for MathCounts and other programs\n          </CardDescription>\n        </CardHeader>\n        <form id={signupFormId} onSubmit={handleSubmit}>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor={displayNameId}>Full Name</Label>\n              <Input\n                id={displayNameId}\n                placeholder=\"John Doe\"\n                value={formData.displayName}\n                onChange={(e) => setFormData((prev) => ({ ...prev, displayName: e.target.value }))}\n                disabled={loading}\n                className={errors.displayName ? 'border-destructive' : ''}\n              />\n              {errors.displayName && (\n                <p className=\"text-destructive text-sm\">{errors.displayName}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor={emailId}>Email</Label>\n              <Input\n                id={emailId}\n                type=\"email\"\n                placeholder=\"name@example.com\"\n                value={formData.email}\n                onChange={(e) => setFormData((prev) => ({ ...prev, email: e.target.value }))}\n                disabled={loading}\n                className={errors.email ? 'border-destructive' : ''}\n              />\n              {errors.email && <p className=\"text-destructive text-sm\">{errors.email}</p>}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor={phoneId}>Phone Number</Label>\n              <Input\n                id={phoneId}\n                type=\"tel\"\n                placeholder=\"(555) 123-4567\"\n                value={formData.phone}\n                onChange={handlePhoneChange}\n                disabled={loading}\n                className={errors.phone ? 'border-destructive' : ''}\n              />\n              {errors.phone && <p className=\"text-destructive text-sm\">{errors.phone}</p>}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor={passwordId}>Password</Label>\n              <Input\n                id={passwordId}\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={formData.password}\n                onChange={(e) => setFormData((prev) => ({ ...prev, password: e.target.value }))}\n                disabled={loading}\n                className={errors.password ? 'border-destructive' : ''}\n              />\n              {errors.password && <p className=\"text-destructive text-sm\">{errors.password}</p>}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor={confirmPasswordId}>Confirm Password</Label>\n              <Input\n                id={confirmPasswordId}\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={formData.confirmPassword}\n                onChange={(e) =>\n                  setFormData((prev) => ({ ...prev, confirmPassword: e.target.value }))\n                }\n                disabled={loading}\n                className={errors.confirmPassword ? 'border-destructive' : ''}\n              />\n              {errors.confirmPassword && (\n                <p className=\"text-destructive text-sm\">{errors.confirmPassword}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-4 border-t pt-4\">\n              <div className=\"space-y-2\">\n                <Label className=\"text-base font-semibold\">Email Preferences</Label>\n                <p className=\"text-muted-foreground text-sm\">\n                  Stay connected with updates about programs and activities\n                </p>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start space-x-3\">\n                  <Checkbox\n                    id={announcementsId}\n                    checked={formData.emailPreferences.announcements}\n                    onCheckedChange={(checked) =>\n                      setFormData((prev) => ({\n                        ...prev,\n                        emailPreferences: {\n                          ...prev.emailPreferences,\n                          announcements: checked as boolean,\n                        },\n                      }))\n                    }\n                    disabled={loading}\n                  />\n                  <div className=\"space-y-1\">\n                    <label\n                      htmlFor={announcementsId}\n                      className=\"text-sm leading-none font-medium peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                    >\n                      Important Announcements\n                    </label>\n                    <p className=\"text-muted-foreground text-xs\">\n                      Receive updates about schedule changes, deadlines, and urgent information\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <Checkbox\n                    id={programUpdatesId}\n                    checked={formData.emailPreferences.programUpdates}\n                    onCheckedChange={(checked) =>\n                      setFormData((prev) => ({\n                        ...prev,\n                        emailPreferences: {\n                          ...prev.emailPreferences,\n                          programUpdates: checked as boolean,\n                        },\n                      }))\n                    }\n                    disabled={loading}\n                  />\n                  <div className=\"space-y-1\">\n                    <label\n                      htmlFor={programUpdatesId}\n                      className=\"text-sm leading-none font-medium peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                    >\n                      Program Updates\n                    </label>\n                    <p className=\"text-muted-foreground text-xs\">\n                      Information about MathCounts, new programs, and registration openings\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <Checkbox\n                    id={newslettersId}\n                    checked={formData.emailPreferences.newsletters}\n                    onCheckedChange={(checked) =>\n                      setFormData((prev) => ({\n                        ...prev,\n                        emailPreferences: {\n                          ...prev.emailPreferences,\n                          newsletters: checked as boolean,\n                        },\n                      }))\n                    }\n                    disabled={loading}\n                  />\n                  <div className=\"space-y-1\">\n                    <label\n                      htmlFor={newslettersId}\n                      className=\"text-sm leading-none font-medium peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                    >\n                      Community Newsletter\n                    </label>\n                    <p className=\"text-muted-foreground text-xs\">\n                      Monthly updates about student achievements and upcoming events\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <Alert>\n                <Info className=\"h-4 w-4\" />\n                <AlertDescription>\n                  We recommend keeping announcements enabled to stay informed about important\n                  program updates. You can change these preferences anytime in your profile\n                  settings.\n                </AlertDescription>\n              </Alert>\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex flex-col space-y-2\">\n            <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n              {loading && <Icons.spinner className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Create Account\n            </Button>\n            <p className=\"text-muted-foreground text-center text-sm\">\n              Already have an account?{' '}\n              <Link href=\"/\" className=\"text-primary hover:underline\">\n                Sign in\n              </Link>\n            </p>\n          </CardFooter>\n        </form>\n      </Card>\n\n      <EULADialog open={showEULA} onAccept={handleEULAAccept} onDecline={handleEULADecline} />\n    </div>\n  );\n}\n"},"tags":["fixable"],"source":null},{"category":"assist/source/organizeImports","severity":"error","description":"The imports and exports are not sorted.","message":[{"elements":[],"content":"The imports and exports are not sorted."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Safe fix: Organize Imports (Biome)"}]]},{"diff":{"dictionary":"'use client';\n\nimport { addDoc, collection, serverTimestamp } from 'firebase/firestore';\nimport { AlertCircle, ArrowLeft, User } from 'lucide-react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useStateuseId,  } from 'react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';  );\n}\n","ops":[{"diffOp":{"equal":{"range":[0,224]}}},{"diffOp":{"equal":{"range":[224,234]}}},{"diffOp":{"delete":{"range":[234,242]}}},{"diffOp":{"insert":{"range":[242,247]}}},{"diffOp":{"equal":{"range":[247,249]}}},{"diffOp":{"delete":{"range":[242,247]}}},{"diffOp":{"insert":{"range":[234,242]}}},{"diffOp":{"equal":{"range":[249,265]}}},{"diffOp":{"equal":{"range":[265,379]}}},{"equalLines":{"line_count":378}},{"diffOp":{"equal":{"range":[379,386]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/students/add/page.tsx"},"span":[15,88],"sourceCode":"'use client';\n\nimport { addDoc, collection, serverTimestamp } from 'firebase/firestore';\nimport { AlertCircle, ArrowLeft, User } from 'lucide-react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useState, useId } from 'react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { db } from '@/lib/firebase';\n\ninterface StudentFormData {\n  firstName: string;\n  lastName: string;\n  grade: string;\n  school: string;\n  dateOfBirth: string;\n  medicalNotes: string;\n  emergencyContact: string;\n  emergencyPhone: string;\n  registerForMathCounts: boolean;\n}\n\nexport default function AddStudentPage() {\n  const firstNameId = useId();\n  const lastNameId = useId();\n  const gradeId = useId();\n  const schoolId = useId();\n  const dateOfBirthId = useId();\n  const emergencyContactId = useId();\n  const emergencyPhoneId = useId();\n  const medicalNotesId = useId();\n  const mathcountsId = useId();\n  const router = useRouter();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState<StudentFormData>({\n    firstName: '',\n    lastName: '',\n    grade: '',\n    school: '',\n    dateOfBirth: '',\n    medicalNotes: '',\n    emergencyContact: '',\n    emergencyPhone: '',\n    registerForMathCounts: true, // Default to true since this is why they're here\n  });\n\n  const schools = [\n    'Homer Middle School',\n    'Paul Banks Elementary',\n    'West Homer Elementary',\n    'McNeil Canyon Elementary',\n    'Chapman School',\n    'Fireweed Academy',\n    'Homeschool',\n    'Other',\n  ];\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!user) {\n      toast({\n        title: 'Authentication required',\n        description: 'Please sign in to add a student.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    // Validate required fields\n    if (\n      !formData.firstName ||\n      !formData.lastName ||\n      !formData.grade ||\n      !formData.school ||\n      !formData.dateOfBirth\n    ) {\n      toast({\n        title: 'Missing information',\n        description: 'Please fill in all required fields.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      // Add student to Firestore\n      const studentData = {\n        guardianId: user.uid,\n        displayName: `${formData.firstName} ${formData.lastName}`,\n        firstName: formData.firstName,\n        lastName: formData.lastName,\n        grade: parseInt(formData.grade, 10),\n        school: formData.school,\n        dateOfBirth: formData.dateOfBirth,\n        medicalNotes: formData.medicalNotes,\n        emergencyContact: formData.emergencyContact,\n        emergencyPhone: formData.emergencyPhone,\n        waiverStatus: 'pending',\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n      };\n\n      const docRef = await addDoc(collection(db, 'students'), studentData);\n\n      // If registering for MathCounts, add program registration\n      if (formData.registerForMathCounts) {\n        await addDoc(collection(db, 'registrations'), {\n          studentId: docRef.id,\n          guardianId: user.uid,\n          programId: 'mathcounts-2025',\n          programName: 'MathCounts 2025',\n          status: 'registered',\n          registeredAt: serverTimestamp(),\n          notes: 'Initial registration',\n        });\n      }\n\n      toast({\n        title: 'Student added successfully!',\n        description: formData.registerForMathCounts\n          ? `${formData.firstName} has been registered for MathCounts 2025.`\n          : `${formData.firstName} has been added to your account.`,\n      });\n\n      // Redirect to dashboard\n      router.push('/dashboard');\n    } catch (error) {\n      console.error('Error adding student:', error);\n      toast({\n        title: 'Error adding student',\n        description: 'Please try again or contact support.',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto max-w-3xl px-4 py-8\">\n      <div className=\"mb-6\">\n        <Button variant=\"ghost\" size=\"sm\" asChild>\n          <Link href=\"/dashboard\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Dashboard\n          </Link>\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            Add Your Child\n          </CardTitle>\n          <CardDescription>\n            Register your child for MathCounts 2025 and other enrichment programs\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* MathCounts Registration Alert */}\n            <Alert className=\"border-primary bg-primary/10\">\n              <AlertCircle className=\"text-primary h-4 w-4\" />\n              <AlertDescription>\n                <strong>MathCounts 2025 Registration is Open!</strong>\n                <br />\n                By adding your child, you can immediately register them for MathCounts 2025. The\n                program runs Tuesdays at 4:00 PM starting in January.\n              </AlertDescription>\n            </Alert>\n\n            {/* Student Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Student Information</h3>\n\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor={firstNameId}>\n                    First Name <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <Input\n                    id={firstNameId}\n                    value={formData.firstName}\n                    onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}\n                    placeholder=\"John\"\n                    required\n                    disabled={loading}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor={lastNameId}>\n                    Last Name <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <Input\n                    id={lastNameId}\n                    value={formData.lastName}\n                    onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}\n                    placeholder=\"Doe\"\n                    required\n                    disabled={loading}\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor={gradeId}>\n                    Grade Level <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <Select\n                    value={formData.grade}\n                    onValueChange={(value) => setFormData({ ...formData, grade: value })}\n                    disabled={loading}\n                  >\n                    <SelectTrigger id={gradeId}>\n                      <SelectValue placeholder=\"Select grade\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"5\">5th Grade</SelectItem>\n                      <SelectItem value=\"6\">6th Grade</SelectItem>\n                      <SelectItem value=\"7\">7th Grade</SelectItem>\n                      <SelectItem value=\"8\">8th Grade</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor={schoolId}>\n                    School <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <Select\n                    value={formData.school}\n                    onValueChange={(value) => setFormData({ ...formData, school: value })}\n                    disabled={loading}\n                  >\n                    <SelectTrigger id={schoolId}>\n                      <SelectValue placeholder=\"Select school\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {schools.map((school) => (\n                        <SelectItem key={school} value={school}>\n                          {school}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor={dateOfBirthId}>\n                  Date of Birth <span className=\"text-destructive\">*</span>\n                </Label>\n                <Input\n                  id={dateOfBirthId}\n                  type=\"date\"\n                  value={formData.dateOfBirth}\n                  onChange={(e) => setFormData({ ...formData, dateOfBirth: e.target.value })}\n                  required\n                  disabled={loading}\n                />\n              </div>\n            </div>\n\n            {/* Emergency Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Emergency Information</h3>\n              <p className=\"text-muted-foreground text-sm\">\n                This can be the same as your contact information or someone else we should contact\n                in an emergency.\n              </p>\n\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor={emergencyContactId}>Emergency Contact Name</Label>\n                  <Input\n                    id={emergencyContactId}\n                    value={formData.emergencyContact}\n                    onChange={(e) => setFormData({ ...formData, emergencyContact: e.target.value })}\n                    placeholder=\"Jane Doe\"\n                    disabled={loading}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor={emergencyPhoneId}>Emergency Phone</Label>\n                  <Input\n                    id={emergencyPhoneId}\n                    type=\"tel\"\n                    value={formData.emergencyPhone}\n                    onChange={(e) => setFormData({ ...formData, emergencyPhone: e.target.value })}\n                    placeholder=\"(907) 555-1234\"\n                    disabled={loading}\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor={medicalNotesId}>Medical Notes / Allergies (Optional)</Label>\n                <Input\n                  id={medicalNotesId}\n                  value={formData.medicalNotes}\n                  onChange={(e) => setFormData({ ...formData, medicalNotes: e.target.value })}\n                  placeholder=\"Any allergies, medications, or medical conditions we should know about\"\n                  disabled={loading}\n                />\n              </div>\n            </div>\n\n            {/* Program Registration */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Program Registration</h3>\n\n              <div className=\"space-y-3 rounded-lg border p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <Checkbox\n                    id={mathcountsId}\n                    checked={formData.registerForMathCounts}\n                    onCheckedChange={(checked) =>\n                      setFormData({ ...formData, registerForMathCounts: checked as boolean })\n                    }\n                    disabled={loading}\n                  />\n                  <div className=\"space-y-1\">\n                    <label\n                      htmlFor={mathcountsId}\n                      className=\"text-sm leading-none font-medium peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                    >\n                      Register for MathCounts 2025\n                    </label>\n                    <p className=\"text-muted-foreground text-sm\">\n                      Tuesdays at 4:00 PM • Grades 5-8 • Starts January 2025\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <p className=\"text-muted-foreground text-sm\">\n                More programs coming soon! You can add additional programs later from your\n                dashboard.\n              </p>\n            </div>\n\n            {/* Waiver Reminder */}\n            <Alert>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                <strong>Important:</strong> A signed liability waiver is required before your child\n                can participate in any programs. You'll be able to download and print the waiver\n                form after adding your child.\n              </AlertDescription>\n            </Alert>\n\n            {/* Submit Button */}\n            <div className=\"flex gap-4\">\n              <Button type=\"submit\" disabled={loading} className=\"flex-1\">\n                {loading ? 'Adding Student...' : 'Add Student & Continue'}\n              </Button>\n              <Button type=\"button\" variant=\"outline\" asChild disabled={loading}>\n                <Link href=\"/dashboard\">Cancel</Link>\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"},"tags":["fixable"],"source":null},{"category":"format","severity":"error","description":"Formatter would have printed the following content:","message":[{"elements":[],"content":"Formatter would have printed the following content:"}],"advices":{"advices":[{"diff":{"dictionary":"'use client';\n\nimport { AlertCircle, Download, Printer } from 'lucide-react';              <div className=\"flex items-center gap-2\">\n                <div className=\"h-4 w-4 border border-gray-400\"></div>\n                <span>\n                  <span className=\"font-semibold\">YES</span> - I grant permission for my child to be\n                                  photographed/recorded for program documentation and promotion</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-4 w-4 border border-gray-400\"></div>\n                <span><span className=\"font-semibold\">NO</span> - I do not grant permission for\nphotography/recording</span>\n              </div>\n            </div>  );\n}\n","ops":[{"diffOp":{"equal":{"range":[0,77]}}},{"equalLines":{"line_count":346}},{"diffOp":{"equal":{"range":[77,226]}}},{"diffOp":{"insert":{"range":[226,245]}}},{"diffOp":{"equal":{"range":[245,328]}}},{"diffOp":{"delete":{"range":[328,344]}}},{"diffOp":{"insert":{"range":[344,362]}}},{"diffOp":{"equal":{"range":[362,423]}}},{"diffOp":{"insert":{"range":[226,243]}}},{"diffOp":{"equal":{"range":[423,601]}}},{"diffOp":{"insert":{"range":[226,245]}}},{"diffOp":{"equal":{"range":[601,675]}}},{"diffOp":{"delete":{"range":[344,360]}}},{"diffOp":{"insert":{"range":[344,362]}}},{"diffOp":{"equal":{"range":[675,696]}}},{"diffOp":{"insert":{"range":[226,243]}}},{"diffOp":{"equal":{"range":[696,743]}}},{"equalLines":{"line_count":73}},{"diffOp":{"equal":{"range":[743,750]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/app/waiver/page.tsx"},"span":null,"sourceCode":"'use client';\n\nimport { AlertCircle, Download, Printer } from 'lucide-react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function WaiverPage() {\n  const handlePrint = () => {\n    window.print();\n  };\n\n  const currentYear = new Date().getFullYear();\n  const nextYear = currentYear + 1;\n\n  return (\n    <div className=\"container mx-auto max-w-4xl px-4 py-8\">\n      {/* Screen Instructions */}\n      <div className=\"print-hidden mb-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Liability Waiver Form</CardTitle>\n            <CardDescription>\n              Required for all students participating in Homer Enrichment Hub programs\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Alert className=\"border-amber-200 bg-amber-50\">\n              <AlertCircle className=\"h-4 w-4 text-amber-600\" />\n              <AlertDescription>\n                <strong>Important:</strong> This form must be printed, signed, and returned before\n                your child can participate in any programs.\n              </AlertDescription>\n            </Alert>\n\n            <div className=\"flex gap-4\">\n              <Button onClick={handlePrint}>\n                <Printer className=\"mr-2 h-4 w-4\" />\n                Print Form\n              </Button>\n              <Button variant=\"outline\" onClick={() => window.open('/waiver.pdf', '_blank')}>\n                <Download className=\"mr-2 h-4 w-4\" />\n                Download PDF\n              </Button>\n            </div>\n\n            <div className=\"text-muted-foreground text-sm\">\n              <p className=\"mb-2 font-medium\">Instructions:</p>\n              <ol className=\"list-inside list-decimal space-y-1\">\n                <li>Print this form</li>\n                <li>Complete all sections</li>\n                <li>Sign and date the form</li>\n                <li>Return to Jeffrey Johnson at the next program meeting</li>\n                <li>Or email a scanned copy to jjohnson47@alaska.edu</li>\n              </ol>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Printable Waiver Form */}\n      <div className=\"bg-white p-8 print:p-0\">\n        <div className=\"space-y-6\">\n          {/* Header */}\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold\">HOMER ENRICHMENT HUB</h1>\n            <h2 className=\"mt-2 text-xl\">\n              PARENTAL CONSENT, LIABILITY WAIVER, AND MEDICAL AUTHORIZATION FORM\n            </h2>\n            <p className=\"mt-2 font-semibold\">\n              IMPORTANT: This form must be completed, signed, and returned before your child can\n              participate in any Homer Enrichment Hub programs.\n            </p>\n          </div>\n\n          {/* Participant Information */}\n          <section className=\"border-t pt-4\">\n            <h3 className=\"mb-3 font-bold\">PARTICIPANT INFORMATION</h3>\n            <div className=\"space-y-2\">\n              <div className=\"flex gap-4\">\n                <div className=\"flex-1\">\n                  <span className=\"text-sm\">Child's Full Name:</span>\n                  <div className=\"h-6 border-b border-gray-400\"></div>\n                </div>\n              </div>\n              <div className=\"flex gap-4\">\n                <div className=\"flex-1\">\n                  <span className=\"text-sm\">Date of Birth:</span>\n                  <div className=\"h-6 border-b border-gray-400\"></div>\n                </div>\n                <div className=\"w-24\">\n                  <span className=\"text-sm\">Grade:</span>\n                  <div className=\"h-6 border-b border-gray-400\"></div>\n                </div>\n                <div className=\"flex-1\">\n                  <span className=\"text-sm\">School:</span>\n                  <div className=\"h-6 border-b border-gray-400\"></div>\n                </div>\n              </div>\n              <div>\n                <span className=\"text-sm\">Home Address:</span>\n                <div className=\"h-6 border-b border-gray-400\"></div>\n              </div>\n              <div className=\"flex gap-4\">\n                <div className=\"flex-1\">\n                  <span className=\"text-sm\">City:</span>\n                  <div className=\"h-6 border-b border-gray-400\"></div>\n                </div>\n                <div className=\"w-16\">\n                  <span className=\"text-sm\">State:</span>\n                  <div className=\"h-6 border-b border-gray-400\">AK</div>\n                </div>\n                <div className=\"w-32\">\n                  <span className=\"text-sm\">Zip:</span>\n                  <div className=\"h-6 border-b border-gray-400\"></div>\n                </div>\n              </div>\n            </div>\n          </section>\n\n          {/* Parent/Guardian Information */}\n          <section className=\"border-t pt-4\">\n            <h3 className=\"mb-3 font-bold\">PARENT/GUARDIAN INFORMATION</h3>\n            <div className=\"space-y-2\">\n              <div>\n                <span className=\"text-sm\">Parent/Guardian Name:</span>\n                <div className=\"h-6 border-b border-gray-400\"></div>\n              </div>\n              <div>\n                <span className=\"text-sm\">Relationship to Child:</span>\n                <div className=\"h-6 border-b border-gray-400\"></div>\n              </div>\n              <div className=\"flex gap-4\">\n                <div className=\"flex-1\">\n                  <span className=\"text-sm\">Primary Phone:</span>\n                  <div className=\"h-6 border-b border-gray-400\"></div>\n                </div>\n                <div className=\"flex-1\">\n                  <span className=\"text-sm\">Secondary Phone:</span>\n                  <div className=\"h-6 border-b border-gray-400\"></div>\n                </div>\n              </div>\n              <div>\n                <span className=\"text-sm\">Email:</span>\n                <div className=\"h-6 border-b border-gray-400\"></div>\n              </div>\n              <div className=\"flex gap-4\">\n                <div className=\"flex-1\">\n                  <span className=\"text-sm\">Emergency Contact (if different):</span>\n                  <div className=\"h-6 border-b border-gray-400\"></div>\n                </div>\n                <div className=\"w-48\">\n                  <span className=\"text-sm\">Emergency Phone:</span>\n                  <div className=\"h-6 border-b border-gray-400\"></div>\n                </div>\n              </div>\n            </div>\n          </section>\n\n          {/* Medical Information */}\n          <section className=\"border-t pt-4\">\n            <h3 className=\"mb-3 font-bold\">MEDICAL INFORMATION</h3>\n            <div className=\"space-y-2\">\n              <div>\n                <span className=\"text-sm\">Known Allergies:</span>\n                <div className=\"h-6 border-b border-gray-400\"></div>\n              </div>\n              <div>\n                <span className=\"text-sm\">Medical Conditions:</span>\n                <div className=\"h-6 border-b border-gray-400\"></div>\n              </div>\n              <div>\n                <span className=\"text-sm\">Current Medications:</span>\n                <div className=\"h-6 border-b border-gray-400\"></div>\n              </div>\n              <div className=\"flex gap-4\">\n                <div className=\"flex-1\">\n                  <span className=\"text-sm\">Physician Name:</span>\n                  <div className=\"h-6 border-b border-gray-400\"></div>\n                </div>\n                <div className=\"w-48\">\n                  <span className=\"text-sm\">Phone:</span>\n                  <div className=\"h-6 border-b border-gray-400\"></div>\n                </div>\n              </div>\n              <div className=\"flex gap-4\">\n                <div className=\"flex-1\">\n                  <span className=\"text-sm\">Insurance Provider:</span>\n                  <div className=\"h-6 border-b border-gray-400\"></div>\n                </div>\n                <div className=\"flex-1\">\n                  <span className=\"text-sm\">Policy #:</span>\n                  <div className=\"h-6 border-b border-gray-400\"></div>\n                </div>\n              </div>\n            </div>\n          </section>\n\n          {/* Acknowledgment of Program Independence */}\n          <section className=\"border-t pt-4\">\n            <h3 className=\"mb-3 font-bold\">ACKNOWLEDGMENT OF PROGRAM INDEPENDENCE</h3>\n            <div className=\"mb-3 border border-yellow-300 bg-yellow-50 p-4\">\n              <p className=\"mb-2 font-semibold\">I understand and acknowledge that:</p>\n              <p className=\"mb-2\">\n                The Homer Enrichment Hub is a <strong>COMPLETELY INDEPENDENT</strong> organization\n                that is:\n              </p>\n              <ul className=\"ml-4 list-inside list-disc space-y-1\">\n                <li>\n                  <strong>\n                    NOT organized by, affiliated with, sponsored by, or endorsed by Kenai Peninsula\n                    College or the University of Alaska system\n                  </strong>\n                </li>\n                <li>\n                  <strong>NOT affiliated with the Kenai Peninsula Borough School District</strong>\n                </li>\n                <li>\n                  <strong>NOT affiliated with the City of Homer</strong>\n                </li>\n                <li>\n                  <strong>\n                    NOT affiliated with any school or facility where activities may occur\n                  </strong>\n                </li>\n              </ul>\n              <p className=\"mt-3\">\n                This program is organized by Jeffrey Johnson and Lia Calhoun acting in their{' '}\n                <strong>PERSONAL CAPACITIES</strong> as private individuals. While they happen to be\n                employed as professors at Kenai Peninsula College, this program is{' '}\n                <strong>NOT a Kenai Peninsula College program</strong> and their employment there is\n                mentioned only for identification purposes.\n              </p>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"font-semibold\">Parent/Guardian Initials:</span>\n              <div className=\"h-8 w-16 border border-gray-400\"></div>\n            </div>\n          </section>\n\n          {/* Assumption of Risk */}\n          <section className=\"border-t pt-4\">\n            <h3 className=\"mb-3 font-bold\">ASSUMPTION OF RISK AND RELEASE OF LIABILITY</h3>\n            <p className=\"mb-3\">\n              <strong>In accordance with Alaska Statutes 09.65.290 and 09.65.292</strong>, I\n              acknowledge and agree:\n            </p>\n\n            <div className=\"space-y-3 text-sm\">\n              <div>\n                <p className=\"font-semibold\">1. ASSUMPTION OF INHERENT RISKS:</p>\n                <p>\n                  I understand that participation in educational and recreational activities\n                  involves inherent risks including, but not limited to:\n                </p>\n                <ul className=\"mt-1 ml-4 list-inside list-disc\">\n                  <li>Risk of physical injury during activities or movement between locations</li>\n                  <li>Risk of exposure to communicable diseases</li>\n                  <li>Risk of accidents during transportation to/from activities</li>\n                  <li>Risk of allergic reactions or medical emergencies</li>\n                  <li>Risks inherent in academic competitions and group activities</li>\n                </ul>\n              </div>\n\n              <div>\n                <p className=\"font-semibold\">2. EXPLICIT WAIVER OF NEGLIGENCE:</p>\n                <p>\n                  I hereby <strong>RELEASE, WAIVE, DISCHARGE, AND HOLD HARMLESS</strong>:\n                </p>\n                <ul className=\"mt-1 ml-4 list-inside list-disc\">\n                  <li>Jeffrey Johnson and Lia Calhoun (as private individuals)</li>\n                  <li>The Homer Enrichment Hub organization</li>\n                  <li>Any volunteers or assistants working with the program</li>\n                  <li>The University of Alaska system and Kenai Peninsula College</li>\n                  <li>The Kenai Peninsula Borough School District and individual schools</li>\n                  <li>The City of Homer</li>\n                  <li>Any facilities hosting Hub activities</li>\n                </ul>\n                <p className=\"mt-2\">\n                  From <strong>ANY AND ALL LIABILITY</strong>, including liability for{' '}\n                  <strong>NEGLIGENCE</strong>, for any injury, death, damage, or loss sustained by\n                  my child or me arising from participation in Hub activities, to the fullest extent\n                  permitted by Alaska law.\n                </p>\n              </div>\n\n              <div>\n                <p className=\"font-semibold\">3. INDEMNIFICATION:</p>\n                <p>\n                  I agree to <strong>INDEMNIFY AND DEFEND</strong> all released parties from any\n                  claims, demands, or causes of action, including attorney fees, arising from my\n                  child's participation.\n                </p>\n              </div>\n            </div>\n\n            <div className=\"mt-4 flex items-center gap-2\">\n              <span className=\"font-semibold\">Parent/Guardian Initials:</span>\n              <div className=\"h-8 w-16 border border-gray-400\"></div>\n            </div>\n          </section>\n\n          {/* Medical Authorization */}\n          <section className=\"border-t pt-4\">\n            <h3 className=\"mb-3 font-bold\">MEDICAL AUTHORIZATION</h3>\n            <p className=\"mb-2\">\n              In the event of a medical emergency, I authorize program coordinators to:\n            </p>\n            <ul className=\"ml-4 list-inside list-disc text-sm\">\n              <li>Contact emergency medical services (911)</li>\n              <li>Provide or arrange necessary emergency treatment</li>\n              <li>Share relevant medical information with emergency responders</li>\n            </ul>\n            <p className=\"mt-2 text-sm\">I understand that:</p>\n            <ul className=\"ml-4 list-inside list-disc text-sm\">\n              <li>Program coordinators are not medical professionals</li>\n              <li>The program does not provide health or accident insurance</li>\n              <li>All medical costs are my sole responsibility</li>\n              <li>Coordinators will not administer medications</li>\n            </ul>\n            <div className=\"mt-4 flex items-center gap-2\">\n              <span className=\"font-semibold\">Parent/Guardian Initials:</span>\n              <div className=\"h-8 w-16 border border-gray-400\"></div>\n            </div>\n          </section>\n\n          {/* Program Rules */}\n          <section className=\"border-t pt-4\">\n            <h3 className=\"mb-3 font-bold\">PROGRAM RULES AND CONDUCT</h3>\n            <p className=\"mb-2\">I understand that my child must:</p>\n            <ul className=\"ml-4 list-inside list-disc text-sm\">\n              <li>Follow all program rules and behavioral guidelines</li>\n              <li>Respect coordinators, volunteers, and other participants</li>\n              <li>Care for facilities and equipment</li>\n            </ul>\n            <p className=\"mt-2 text-sm\">\n              I acknowledge that violation of program rules may result in removal without refund (if\n              fees apply).\n            </p>\n            <div className=\"mt-4 flex items-center gap-2\">\n              <span className=\"font-semibold\">Parent/Guardian Initials:</span>\n              <div className=\"h-8 w-16 border border-gray-400\"></div>\n            </div>\n          </section>\n\n          {/* Photography Release */}\n          <section className=\"border-t pt-4\">\n            <h3 className=\"mb-3 font-bold\">PHOTOGRAPHY RELEASE</h3>\n            <div className=\"flex gap-8\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-4 w-4 border border-gray-400\"></div>\n                <span><span className=\"font-semibold\">YES</span> - I grant permission for my child to be\n                photographed/recorded for program documentation and promotion</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-4 w-4 border border-gray-400\"></div>\n                <span><span className=\"font-semibold\">NO</span> - I do not grant permission for\n                photography/recording</span>\n              </div>\n            </div>\n          </section>\n\n          {/* Certification and Signature */}\n          <section className=\"border-t pt-4\">\n            <h3 className=\"mb-3 font-bold\">CERTIFICATION AND SIGNATURE</h3>\n            <div className=\"mb-4 bg-gray-100 p-4\">\n              <p className=\"mb-2 font-semibold\">I CERTIFY THAT:</p>\n              <ul className=\"list-inside list-disc space-y-1 text-sm\">\n                <li>I am the parent or legal guardian with authority to sign this form</li>\n                <li>I have read and understood all provisions of this waiver</li>\n                <li>\n                  I understand this is an independent program not affiliated with any educational\n                  institution\n                </li>\n                <li>I am signing this form voluntarily and without inducement</li>\n                <li>All information provided is accurate and complete</li>\n                <li>I understand this waiver is binding on me, my child, and our heirs</li>\n              </ul>\n              <p className=\"mt-3 font-semibold\">\n                THE TERMS OF THIS WAIVER SHALL BE EFFECTIVE FOR THE ENTIRE {currentYear}-{nextYear}{' '}\n                ACADEMIC YEAR\n              </p>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex gap-4\">\n                <div className=\"flex-1\">\n                  <span className=\"text-sm\">Parent/Guardian Printed Name:</span>\n                  <div className=\"h-6 border-b border-gray-400\"></div>\n                </div>\n                <div className=\"w-32\">\n                  <span className=\"text-sm\">Date:</span>\n                  <div className=\"h-6 border-b border-gray-400\"></div>\n                </div>\n              </div>\n              <div>\n                <span className=\"text-sm\">Parent/Guardian Signature:</span>\n                <div className=\"h-12 border-b border-gray-400\"></div>\n              </div>\n              <div className=\"flex gap-4\">\n                <div className=\"flex-1\">\n                  <span className=\"text-sm\">Child's Signature (if 13 or older):</span>\n                  <div className=\"h-12 border-b border-gray-400\"></div>\n                </div>\n                <div className=\"w-32\">\n                  <span className=\"text-sm\">Date:</span>\n                  <div className=\"h-6 border-b border-gray-400\"></div>\n                </div>\n              </div>\n            </div>\n          </section>\n\n          {/* Footer */}\n          <section className=\"border-t pt-4 text-sm\">\n            <p className=\"mb-2 font-semibold\">Return this form to:</p>\n            <p>\n              Homer Enrichment Hub\n              <br />\n              c/o Jeffrey Johnson\n              <br />\n              [Independent Program Coordinator]\n              <br />\n              Email: jjohnson47@alaska.edu\n            </p>\n            <p className=\"mt-2 text-xs italic\">\n              Note: Email address provided for identification purposes only. This is not a Kenai\n              Peninsula College program.\n            </p>\n            <p className=\"mt-4 text-xs text-gray-500\">Form Version 1.0 - August {currentYear}</p>\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useUniqueElementIds","severity":"error","description":"id attribute should not be a static string literal. Generate unique IDs using useId().","message":[{"elements":["Emphasis"],"content":"id"},{"elements":[],"content":" attribute should not be a static string literal. Generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/calendar/event-dialog.tsx"},"span":[5507,5757],"sourceCode":"'use client';\n\nimport { format, set } from 'date-fns';\nimport { CalendarIcon } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Calendar } from '@/components/ui/calendar';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { type CalendarEvent, calendarService } from '@/lib/firebase-admin';\nimport { cn } from '@/lib/utils';\n\ninterface EventDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  event?: CalendarEvent | null;\n  initialDate?: Date;\n  onSuccess?: () => void;\n}\n\nconst eventTypes = [\n  { value: 'class', label: 'Class' },\n  { value: 'competition', label: 'Competition' },\n  { value: 'meeting', label: 'Meeting' },\n  { value: 'holiday', label: 'Holiday' },\n  { value: 'other', label: 'Other' },\n];\n\nconst timeOptions = Array.from({ length: 48 }, (_, i) => {\n  const hour = Math.floor(i / 2);\n  const minute = i % 2 === 0 ? '00' : '30';\n  const period = hour < 12 ? 'AM' : 'PM';\n  const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;\n  return {\n    value: `${hour.toString().padStart(2, '0')}:${minute}`,\n    label: `${displayHour}:${minute} ${period}`,\n  };\n});\n\nexport function EventDialog({\n  open,\n  onOpenChange,\n  event,\n  initialDate,\n  onSuccess,\n}: EventDialogProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    type: 'class' as CalendarEvent['type'],\n    location: '',\n    allDay: false,\n    startDate: initialDate || new Date(),\n    startTime: '09:00',\n    endDate: initialDate || new Date(),\n    endTime: '10:00',\n  });\n\n  useEffect(() => {\n    if (event) {\n      const startDate = new Date(event.startDate);\n      const endDate = new Date(event.endDate);\n\n      setFormData({\n        title: event.title,\n        description: event.description || '',\n        type: event.type,\n        location: event.location || '',\n        allDay: event.allDay,\n        startDate,\n        startTime: format(startDate, 'HH:mm'),\n        endDate,\n        endTime: format(endDate, 'HH:mm'),\n      });\n    } else if (initialDate) {\n      setFormData((prev) => ({\n        ...prev,\n        startDate: initialDate,\n        endDate: initialDate,\n      }));\n    }\n  }, [event, initialDate]);\n\n  async function handleSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    if (!user) return;\n\n    setLoading(true);\n\n    try {\n      // Combine date and time\n      const [startHour, startMinute] = formData.startTime.split(':').map(Number);\n      const [endHour, endMinute] = formData.endTime.split(':').map(Number);\n\n      const startDateTime = set(formData.startDate, {\n        hours: formData.allDay ? 0 : startHour,\n        minutes: formData.allDay ? 0 : startMinute,\n        seconds: 0,\n        milliseconds: 0,\n      });\n\n      const endDateTime = set(formData.endDate, {\n        hours: formData.allDay ? 23 : endHour,\n        minutes: formData.allDay ? 59 : endMinute,\n        seconds: formData.allDay ? 59 : 0,\n        milliseconds: 0,\n      });\n\n      const eventData: Omit<CalendarEvent, 'id' | 'createdAt' | 'updatedAt'> = {\n        title: formData.title,\n        description: formData.description || undefined,\n        type: formData.type,\n        location: formData.location || undefined,\n        allDay: formData.allDay,\n        startDate: startDateTime,\n        endDate: endDateTime,\n        createdBy: user.uid,\n        createdByName: user.displayName || user.email || 'Unknown',\n      };\n\n      if (event) {\n        await calendarService.update(event.id, eventData);\n        toast({\n          title: 'Event updated',\n          description: 'The event has been updated successfully.',\n        });\n      } else {\n        await calendarService.create(eventData);\n        toast({\n          title: 'Event created',\n          description: 'The event has been created successfully.',\n        });\n      }\n\n      onOpenChange(false);\n      onSuccess?.();\n    } catch (error) {\n      console.error('Error saving event:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to save event. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-h-[90vh] overflow-y-auto sm:max-w-[525px]\">\n        <form onSubmit={handleSubmit}>\n          <DialogHeader>\n            <DialogTitle>{event ? 'Edit Event' : 'Create Event'}</DialogTitle>\n            <DialogDescription className=\"text-sm\">\n              {event ? 'Update the event details' : 'Add a new event to the calendar'}\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"title\">Title</Label>\n              <Input\n                id=\"title\"\n                placeholder=\"Event title\"\n                value={formData.title}\n                onChange={(e) => setFormData((prev) => ({ ...prev, title: e.target.value }))}\n                required\n              />\n            </div>\n\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"type\">Type</Label>\n              <Select\n                value={formData.type}\n                onValueChange={(value) => setFormData((prev) => ({ ...prev, type: value as any }))}\n              >\n                <SelectTrigger id=\"type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {eventTypes.map((type) => (\n                    <SelectItem key={type.value} value={type.value}>\n                      {type.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"all-day\"\n                checked={formData.allDay}\n                onCheckedChange={(checked) => setFormData((prev) => ({ ...prev, allDay: checked }))}\n              />\n              <Label htmlFor=\"all-day\">All day event</Label>\n            </div>\n\n            <div className=\"grid gap-2 sm:grid-cols-2\">\n              <div className=\"grid gap-2\">\n                <Label>Start Date</Label>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className={cn(\n                        'justify-start text-left font-normal',\n                        !formData.startDate && 'text-muted-foreground'\n                      )}\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {format(formData.startDate, 'PPP')}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={formData.startDate}\n                      onSelect={(date) =>\n                        date && setFormData((prev) => ({ ...prev, startDate: date }))\n                      }\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n\n              {!formData.allDay && (\n                <div className=\"grid gap-2\">\n                  <Label>Start Time</Label>\n                  <Select\n                    value={formData.startTime}\n                    onValueChange={(value) =>\n                      setFormData((prev) => ({ ...prev, startTime: value }))\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {timeOptions.map((time) => (\n                        <SelectItem key={time.value} value={time.value}>\n                          {time.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n            </div>\n\n            <div className=\"grid gap-2 sm:grid-cols-2\">\n              <div className=\"grid gap-2\">\n                <Label>End Date</Label>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className={cn(\n                        'justify-start text-left font-normal',\n                        !formData.endDate && 'text-muted-foreground'\n                      )}\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {format(formData.endDate, 'PPP')}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={formData.endDate}\n                      onSelect={(date) =>\n                        date && setFormData((prev) => ({ ...prev, endDate: date }))\n                      }\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n\n              {!formData.allDay && (\n                <div className=\"grid gap-2\">\n                  <Label>End Time</Label>\n                  <Select\n                    value={formData.endTime}\n                    onValueChange={(value) => setFormData((prev) => ({ ...prev, endTime: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {timeOptions.map((time) => (\n                        <SelectItem key={time.value} value={time.value}>\n                          {time.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n            </div>\n\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"location\">Location (Optional)</Label>\n              <Input\n                id=\"location\"\n                placeholder=\"Event location\"\n                value={formData.location}\n                onChange={(e) => setFormData((prev) => ({ ...prev, location: e.target.value }))}\n              />\n            </div>\n\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"description\">Description (Optional)</Label>\n              <Textarea\n                id=\"description\"\n                placeholder=\"Event description\"\n                value={formData.description}\n                onChange={(e) => setFormData((prev) => ({ ...prev, description: e.target.value }))}\n                rows={3}\n              />\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              disabled={loading}\n            >\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={loading}>\n              {loading ? 'Saving...' : event ? 'Update' : 'Create'}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useUniqueElementIds","severity":"error","description":"id attribute should not be a static string literal. Generate unique IDs using useId().","message":[{"elements":["Emphasis"],"content":"id"},{"elements":[],"content":" attribute should not be a static string literal. Generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/calendar/event-dialog.tsx"},"span":[6060,6085],"sourceCode":"'use client';\n\nimport { format, set } from 'date-fns';\nimport { CalendarIcon } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Calendar } from '@/components/ui/calendar';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { type CalendarEvent, calendarService } from '@/lib/firebase-admin';\nimport { cn } from '@/lib/utils';\n\ninterface EventDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  event?: CalendarEvent | null;\n  initialDate?: Date;\n  onSuccess?: () => void;\n}\n\nconst eventTypes = [\n  { value: 'class', label: 'Class' },\n  { value: 'competition', label: 'Competition' },\n  { value: 'meeting', label: 'Meeting' },\n  { value: 'holiday', label: 'Holiday' },\n  { value: 'other', label: 'Other' },\n];\n\nconst timeOptions = Array.from({ length: 48 }, (_, i) => {\n  const hour = Math.floor(i / 2);\n  const minute = i % 2 === 0 ? '00' : '30';\n  const period = hour < 12 ? 'AM' : 'PM';\n  const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;\n  return {\n    value: `${hour.toString().padStart(2, '0')}:${minute}`,\n    label: `${displayHour}:${minute} ${period}`,\n  };\n});\n\nexport function EventDialog({\n  open,\n  onOpenChange,\n  event,\n  initialDate,\n  onSuccess,\n}: EventDialogProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    type: 'class' as CalendarEvent['type'],\n    location: '',\n    allDay: false,\n    startDate: initialDate || new Date(),\n    startTime: '09:00',\n    endDate: initialDate || new Date(),\n    endTime: '10:00',\n  });\n\n  useEffect(() => {\n    if (event) {\n      const startDate = new Date(event.startDate);\n      const endDate = new Date(event.endDate);\n\n      setFormData({\n        title: event.title,\n        description: event.description || '',\n        type: event.type,\n        location: event.location || '',\n        allDay: event.allDay,\n        startDate,\n        startTime: format(startDate, 'HH:mm'),\n        endDate,\n        endTime: format(endDate, 'HH:mm'),\n      });\n    } else if (initialDate) {\n      setFormData((prev) => ({\n        ...prev,\n        startDate: initialDate,\n        endDate: initialDate,\n      }));\n    }\n  }, [event, initialDate]);\n\n  async function handleSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    if (!user) return;\n\n    setLoading(true);\n\n    try {\n      // Combine date and time\n      const [startHour, startMinute] = formData.startTime.split(':').map(Number);\n      const [endHour, endMinute] = formData.endTime.split(':').map(Number);\n\n      const startDateTime = set(formData.startDate, {\n        hours: formData.allDay ? 0 : startHour,\n        minutes: formData.allDay ? 0 : startMinute,\n        seconds: 0,\n        milliseconds: 0,\n      });\n\n      const endDateTime = set(formData.endDate, {\n        hours: formData.allDay ? 23 : endHour,\n        minutes: formData.allDay ? 59 : endMinute,\n        seconds: formData.allDay ? 59 : 0,\n        milliseconds: 0,\n      });\n\n      const eventData: Omit<CalendarEvent, 'id' | 'createdAt' | 'updatedAt'> = {\n        title: formData.title,\n        description: formData.description || undefined,\n        type: formData.type,\n        location: formData.location || undefined,\n        allDay: formData.allDay,\n        startDate: startDateTime,\n        endDate: endDateTime,\n        createdBy: user.uid,\n        createdByName: user.displayName || user.email || 'Unknown',\n      };\n\n      if (event) {\n        await calendarService.update(event.id, eventData);\n        toast({\n          title: 'Event updated',\n          description: 'The event has been updated successfully.',\n        });\n      } else {\n        await calendarService.create(eventData);\n        toast({\n          title: 'Event created',\n          description: 'The event has been created successfully.',\n        });\n      }\n\n      onOpenChange(false);\n      onSuccess?.();\n    } catch (error) {\n      console.error('Error saving event:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to save event. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-h-[90vh] overflow-y-auto sm:max-w-[525px]\">\n        <form onSubmit={handleSubmit}>\n          <DialogHeader>\n            <DialogTitle>{event ? 'Edit Event' : 'Create Event'}</DialogTitle>\n            <DialogDescription className=\"text-sm\">\n              {event ? 'Update the event details' : 'Add a new event to the calendar'}\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"title\">Title</Label>\n              <Input\n                id=\"title\"\n                placeholder=\"Event title\"\n                value={formData.title}\n                onChange={(e) => setFormData((prev) => ({ ...prev, title: e.target.value }))}\n                required\n              />\n            </div>\n\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"type\">Type</Label>\n              <Select\n                value={formData.type}\n                onValueChange={(value) => setFormData((prev) => ({ ...prev, type: value as any }))}\n              >\n                <SelectTrigger id=\"type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {eventTypes.map((type) => (\n                    <SelectItem key={type.value} value={type.value}>\n                      {type.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"all-day\"\n                checked={formData.allDay}\n                onCheckedChange={(checked) => setFormData((prev) => ({ ...prev, allDay: checked }))}\n              />\n              <Label htmlFor=\"all-day\">All day event</Label>\n            </div>\n\n            <div className=\"grid gap-2 sm:grid-cols-2\">\n              <div className=\"grid gap-2\">\n                <Label>Start Date</Label>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className={cn(\n                        'justify-start text-left font-normal',\n                        !formData.startDate && 'text-muted-foreground'\n                      )}\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {format(formData.startDate, 'PPP')}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={formData.startDate}\n                      onSelect={(date) =>\n                        date && setFormData((prev) => ({ ...prev, startDate: date }))\n                      }\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n\n              {!formData.allDay && (\n                <div className=\"grid gap-2\">\n                  <Label>Start Time</Label>\n                  <Select\n                    value={formData.startTime}\n                    onValueChange={(value) =>\n                      setFormData((prev) => ({ ...prev, startTime: value }))\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {timeOptions.map((time) => (\n                        <SelectItem key={time.value} value={time.value}>\n                          {time.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n            </div>\n\n            <div className=\"grid gap-2 sm:grid-cols-2\">\n              <div className=\"grid gap-2\">\n                <Label>End Date</Label>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className={cn(\n                        'justify-start text-left font-normal',\n                        !formData.endDate && 'text-muted-foreground'\n                      )}\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {format(formData.endDate, 'PPP')}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={formData.endDate}\n                      onSelect={(date) =>\n                        date && setFormData((prev) => ({ ...prev, endDate: date }))\n                      }\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n\n              {!formData.allDay && (\n                <div className=\"grid gap-2\">\n                  <Label>End Time</Label>\n                  <Select\n                    value={formData.endTime}\n                    onValueChange={(value) => setFormData((prev) => ({ ...prev, endTime: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {timeOptions.map((time) => (\n                        <SelectItem key={time.value} value={time.value}>\n                          {time.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n            </div>\n\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"location\">Location (Optional)</Label>\n              <Input\n                id=\"location\"\n                placeholder=\"Event location\"\n                value={formData.location}\n                onChange={(e) => setFormData((prev) => ({ ...prev, location: e.target.value }))}\n              />\n            </div>\n\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"description\">Description (Optional)</Label>\n              <Textarea\n                id=\"description\"\n                placeholder=\"Event description\"\n                value={formData.description}\n                onChange={(e) => setFormData((prev) => ({ ...prev, description: e.target.value }))}\n                rows={3}\n              />\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              disabled={loading}\n            >\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={loading}>\n              {loading ? 'Saving...' : event ? 'Update' : 'Create'}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useUniqueElementIds","severity":"error","description":"id attribute should not be a static string literal. Generate unique IDs using useId().","message":[{"elements":["Emphasis"],"content":"id"},{"elements":[],"content":" attribute should not be a static string literal. Generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/calendar/event-dialog.tsx"},"span":[6540,6736],"sourceCode":"'use client';\n\nimport { format, set } from 'date-fns';\nimport { CalendarIcon } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Calendar } from '@/components/ui/calendar';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { type CalendarEvent, calendarService } from '@/lib/firebase-admin';\nimport { cn } from '@/lib/utils';\n\ninterface EventDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  event?: CalendarEvent | null;\n  initialDate?: Date;\n  onSuccess?: () => void;\n}\n\nconst eventTypes = [\n  { value: 'class', label: 'Class' },\n  { value: 'competition', label: 'Competition' },\n  { value: 'meeting', label: 'Meeting' },\n  { value: 'holiday', label: 'Holiday' },\n  { value: 'other', label: 'Other' },\n];\n\nconst timeOptions = Array.from({ length: 48 }, (_, i) => {\n  const hour = Math.floor(i / 2);\n  const minute = i % 2 === 0 ? '00' : '30';\n  const period = hour < 12 ? 'AM' : 'PM';\n  const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;\n  return {\n    value: `${hour.toString().padStart(2, '0')}:${minute}`,\n    label: `${displayHour}:${minute} ${period}`,\n  };\n});\n\nexport function EventDialog({\n  open,\n  onOpenChange,\n  event,\n  initialDate,\n  onSuccess,\n}: EventDialogProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    type: 'class' as CalendarEvent['type'],\n    location: '',\n    allDay: false,\n    startDate: initialDate || new Date(),\n    startTime: '09:00',\n    endDate: initialDate || new Date(),\n    endTime: '10:00',\n  });\n\n  useEffect(() => {\n    if (event) {\n      const startDate = new Date(event.startDate);\n      const endDate = new Date(event.endDate);\n\n      setFormData({\n        title: event.title,\n        description: event.description || '',\n        type: event.type,\n        location: event.location || '',\n        allDay: event.allDay,\n        startDate,\n        startTime: format(startDate, 'HH:mm'),\n        endDate,\n        endTime: format(endDate, 'HH:mm'),\n      });\n    } else if (initialDate) {\n      setFormData((prev) => ({\n        ...prev,\n        startDate: initialDate,\n        endDate: initialDate,\n      }));\n    }\n  }, [event, initialDate]);\n\n  async function handleSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    if (!user) return;\n\n    setLoading(true);\n\n    try {\n      // Combine date and time\n      const [startHour, startMinute] = formData.startTime.split(':').map(Number);\n      const [endHour, endMinute] = formData.endTime.split(':').map(Number);\n\n      const startDateTime = set(formData.startDate, {\n        hours: formData.allDay ? 0 : startHour,\n        minutes: formData.allDay ? 0 : startMinute,\n        seconds: 0,\n        milliseconds: 0,\n      });\n\n      const endDateTime = set(formData.endDate, {\n        hours: formData.allDay ? 23 : endHour,\n        minutes: formData.allDay ? 59 : endMinute,\n        seconds: formData.allDay ? 59 : 0,\n        milliseconds: 0,\n      });\n\n      const eventData: Omit<CalendarEvent, 'id' | 'createdAt' | 'updatedAt'> = {\n        title: formData.title,\n        description: formData.description || undefined,\n        type: formData.type,\n        location: formData.location || undefined,\n        allDay: formData.allDay,\n        startDate: startDateTime,\n        endDate: endDateTime,\n        createdBy: user.uid,\n        createdByName: user.displayName || user.email || 'Unknown',\n      };\n\n      if (event) {\n        await calendarService.update(event.id, eventData);\n        toast({\n          title: 'Event updated',\n          description: 'The event has been updated successfully.',\n        });\n      } else {\n        await calendarService.create(eventData);\n        toast({\n          title: 'Event created',\n          description: 'The event has been created successfully.',\n        });\n      }\n\n      onOpenChange(false);\n      onSuccess?.();\n    } catch (error) {\n      console.error('Error saving event:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to save event. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-h-[90vh] overflow-y-auto sm:max-w-[525px]\">\n        <form onSubmit={handleSubmit}>\n          <DialogHeader>\n            <DialogTitle>{event ? 'Edit Event' : 'Create Event'}</DialogTitle>\n            <DialogDescription className=\"text-sm\">\n              {event ? 'Update the event details' : 'Add a new event to the calendar'}\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"title\">Title</Label>\n              <Input\n                id=\"title\"\n                placeholder=\"Event title\"\n                value={formData.title}\n                onChange={(e) => setFormData((prev) => ({ ...prev, title: e.target.value }))}\n                required\n              />\n            </div>\n\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"type\">Type</Label>\n              <Select\n                value={formData.type}\n                onValueChange={(value) => setFormData((prev) => ({ ...prev, type: value as any }))}\n              >\n                <SelectTrigger id=\"type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {eventTypes.map((type) => (\n                    <SelectItem key={type.value} value={type.value}>\n                      {type.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"all-day\"\n                checked={formData.allDay}\n                onCheckedChange={(checked) => setFormData((prev) => ({ ...prev, allDay: checked }))}\n              />\n              <Label htmlFor=\"all-day\">All day event</Label>\n            </div>\n\n            <div className=\"grid gap-2 sm:grid-cols-2\">\n              <div className=\"grid gap-2\">\n                <Label>Start Date</Label>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className={cn(\n                        'justify-start text-left font-normal',\n                        !formData.startDate && 'text-muted-foreground'\n                      )}\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {format(formData.startDate, 'PPP')}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={formData.startDate}\n                      onSelect={(date) =>\n                        date && setFormData((prev) => ({ ...prev, startDate: date }))\n                      }\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n\n              {!formData.allDay && (\n                <div className=\"grid gap-2\">\n                  <Label>Start Time</Label>\n                  <Select\n                    value={formData.startTime}\n                    onValueChange={(value) =>\n                      setFormData((prev) => ({ ...prev, startTime: value }))\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {timeOptions.map((time) => (\n                        <SelectItem key={time.value} value={time.value}>\n                          {time.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n            </div>\n\n            <div className=\"grid gap-2 sm:grid-cols-2\">\n              <div className=\"grid gap-2\">\n                <Label>End Date</Label>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className={cn(\n                        'justify-start text-left font-normal',\n                        !formData.endDate && 'text-muted-foreground'\n                      )}\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {format(formData.endDate, 'PPP')}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={formData.endDate}\n                      onSelect={(date) =>\n                        date && setFormData((prev) => ({ ...prev, endDate: date }))\n                      }\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n\n              {!formData.allDay && (\n                <div className=\"grid gap-2\">\n                  <Label>End Time</Label>\n                  <Select\n                    value={formData.endTime}\n                    onValueChange={(value) => setFormData((prev) => ({ ...prev, endTime: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {timeOptions.map((time) => (\n                        <SelectItem key={time.value} value={time.value}>\n                          {time.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n            </div>\n\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"location\">Location (Optional)</Label>\n              <Input\n                id=\"location\"\n                placeholder=\"Event location\"\n                value={formData.location}\n                onChange={(e) => setFormData((prev) => ({ ...prev, location: e.target.value }))}\n              />\n            </div>\n\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"description\">Description (Optional)</Label>\n              <Textarea\n                id=\"description\"\n                placeholder=\"Event description\"\n                value={formData.description}\n                onChange={(e) => setFormData((prev) => ({ ...prev, description: e.target.value }))}\n                rows={3}\n              />\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              disabled={loading}\n            >\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={loading}>\n              {loading ? 'Saving...' : event ? 'Update' : 'Create'}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useUniqueElementIds","severity":"error","description":"id attribute should not be a static string literal. Generate unique IDs using useId().","message":[{"elements":["Emphasis"],"content":"id"},{"elements":[],"content":" attribute should not be a static string literal. Generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/calendar/event-dialog.tsx"},"span":[10918,11155],"sourceCode":"'use client';\n\nimport { format, set } from 'date-fns';\nimport { CalendarIcon } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Calendar } from '@/components/ui/calendar';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { type CalendarEvent, calendarService } from '@/lib/firebase-admin';\nimport { cn } from '@/lib/utils';\n\ninterface EventDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  event?: CalendarEvent | null;\n  initialDate?: Date;\n  onSuccess?: () => void;\n}\n\nconst eventTypes = [\n  { value: 'class', label: 'Class' },\n  { value: 'competition', label: 'Competition' },\n  { value: 'meeting', label: 'Meeting' },\n  { value: 'holiday', label: 'Holiday' },\n  { value: 'other', label: 'Other' },\n];\n\nconst timeOptions = Array.from({ length: 48 }, (_, i) => {\n  const hour = Math.floor(i / 2);\n  const minute = i % 2 === 0 ? '00' : '30';\n  const period = hour < 12 ? 'AM' : 'PM';\n  const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;\n  return {\n    value: `${hour.toString().padStart(2, '0')}:${minute}`,\n    label: `${displayHour}:${minute} ${period}`,\n  };\n});\n\nexport function EventDialog({\n  open,\n  onOpenChange,\n  event,\n  initialDate,\n  onSuccess,\n}: EventDialogProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    type: 'class' as CalendarEvent['type'],\n    location: '',\n    allDay: false,\n    startDate: initialDate || new Date(),\n    startTime: '09:00',\n    endDate: initialDate || new Date(),\n    endTime: '10:00',\n  });\n\n  useEffect(() => {\n    if (event) {\n      const startDate = new Date(event.startDate);\n      const endDate = new Date(event.endDate);\n\n      setFormData({\n        title: event.title,\n        description: event.description || '',\n        type: event.type,\n        location: event.location || '',\n        allDay: event.allDay,\n        startDate,\n        startTime: format(startDate, 'HH:mm'),\n        endDate,\n        endTime: format(endDate, 'HH:mm'),\n      });\n    } else if (initialDate) {\n      setFormData((prev) => ({\n        ...prev,\n        startDate: initialDate,\n        endDate: initialDate,\n      }));\n    }\n  }, [event, initialDate]);\n\n  async function handleSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    if (!user) return;\n\n    setLoading(true);\n\n    try {\n      // Combine date and time\n      const [startHour, startMinute] = formData.startTime.split(':').map(Number);\n      const [endHour, endMinute] = formData.endTime.split(':').map(Number);\n\n      const startDateTime = set(formData.startDate, {\n        hours: formData.allDay ? 0 : startHour,\n        minutes: formData.allDay ? 0 : startMinute,\n        seconds: 0,\n        milliseconds: 0,\n      });\n\n      const endDateTime = set(formData.endDate, {\n        hours: formData.allDay ? 23 : endHour,\n        minutes: formData.allDay ? 59 : endMinute,\n        seconds: formData.allDay ? 59 : 0,\n        milliseconds: 0,\n      });\n\n      const eventData: Omit<CalendarEvent, 'id' | 'createdAt' | 'updatedAt'> = {\n        title: formData.title,\n        description: formData.description || undefined,\n        type: formData.type,\n        location: formData.location || undefined,\n        allDay: formData.allDay,\n        startDate: startDateTime,\n        endDate: endDateTime,\n        createdBy: user.uid,\n        createdByName: user.displayName || user.email || 'Unknown',\n      };\n\n      if (event) {\n        await calendarService.update(event.id, eventData);\n        toast({\n          title: 'Event updated',\n          description: 'The event has been updated successfully.',\n        });\n      } else {\n        await calendarService.create(eventData);\n        toast({\n          title: 'Event created',\n          description: 'The event has been created successfully.',\n        });\n      }\n\n      onOpenChange(false);\n      onSuccess?.();\n    } catch (error) {\n      console.error('Error saving event:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to save event. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-h-[90vh] overflow-y-auto sm:max-w-[525px]\">\n        <form onSubmit={handleSubmit}>\n          <DialogHeader>\n            <DialogTitle>{event ? 'Edit Event' : 'Create Event'}</DialogTitle>\n            <DialogDescription className=\"text-sm\">\n              {event ? 'Update the event details' : 'Add a new event to the calendar'}\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"title\">Title</Label>\n              <Input\n                id=\"title\"\n                placeholder=\"Event title\"\n                value={formData.title}\n                onChange={(e) => setFormData((prev) => ({ ...prev, title: e.target.value }))}\n                required\n              />\n            </div>\n\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"type\">Type</Label>\n              <Select\n                value={formData.type}\n                onValueChange={(value) => setFormData((prev) => ({ ...prev, type: value as any }))}\n              >\n                <SelectTrigger id=\"type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {eventTypes.map((type) => (\n                    <SelectItem key={type.value} value={type.value}>\n                      {type.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"all-day\"\n                checked={formData.allDay}\n                onCheckedChange={(checked) => setFormData((prev) => ({ ...prev, allDay: checked }))}\n              />\n              <Label htmlFor=\"all-day\">All day event</Label>\n            </div>\n\n            <div className=\"grid gap-2 sm:grid-cols-2\">\n              <div className=\"grid gap-2\">\n                <Label>Start Date</Label>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className={cn(\n                        'justify-start text-left font-normal',\n                        !formData.startDate && 'text-muted-foreground'\n                      )}\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {format(formData.startDate, 'PPP')}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={formData.startDate}\n                      onSelect={(date) =>\n                        date && setFormData((prev) => ({ ...prev, startDate: date }))\n                      }\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n\n              {!formData.allDay && (\n                <div className=\"grid gap-2\">\n                  <Label>Start Time</Label>\n                  <Select\n                    value={formData.startTime}\n                    onValueChange={(value) =>\n                      setFormData((prev) => ({ ...prev, startTime: value }))\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {timeOptions.map((time) => (\n                        <SelectItem key={time.value} value={time.value}>\n                          {time.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n            </div>\n\n            <div className=\"grid gap-2 sm:grid-cols-2\">\n              <div className=\"grid gap-2\">\n                <Label>End Date</Label>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className={cn(\n                        'justify-start text-left font-normal',\n                        !formData.endDate && 'text-muted-foreground'\n                      )}\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {format(formData.endDate, 'PPP')}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={formData.endDate}\n                      onSelect={(date) =>\n                        date && setFormData((prev) => ({ ...prev, endDate: date }))\n                      }\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n\n              {!formData.allDay && (\n                <div className=\"grid gap-2\">\n                  <Label>End Time</Label>\n                  <Select\n                    value={formData.endTime}\n                    onValueChange={(value) => setFormData((prev) => ({ ...prev, endTime: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {timeOptions.map((time) => (\n                        <SelectItem key={time.value} value={time.value}>\n                          {time.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n            </div>\n\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"location\">Location (Optional)</Label>\n              <Input\n                id=\"location\"\n                placeholder=\"Event location\"\n                value={formData.location}\n                onChange={(e) => setFormData((prev) => ({ ...prev, location: e.target.value }))}\n              />\n            </div>\n\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"description\">Description (Optional)</Label>\n              <Textarea\n                id=\"description\"\n                placeholder=\"Event description\"\n                value={formData.description}\n                onChange={(e) => setFormData((prev) => ({ ...prev, description: e.target.value }))}\n                rows={3}\n              />\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              disabled={loading}\n            >\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={loading}>\n              {loading ? 'Saving...' : event ? 'Update' : 'Create'}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/correctness/useUniqueElementIds","severity":"error","description":"id attribute should not be a static string literal. Generate unique IDs using useId().","message":[{"elements":["Emphasis"],"content":"id"},{"elements":[],"content":" attribute should not be a static string literal. Generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using "},{"elements":["Emphasis"],"content":"useId()"},{"elements":[],"content":"."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/calendar/event-dialog.tsx"},"span":[11305,11582],"sourceCode":"'use client';\n\nimport { format, set } from 'date-fns';\nimport { CalendarIcon } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Calendar } from '@/components/ui/calendar';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { type CalendarEvent, calendarService } from '@/lib/firebase-admin';\nimport { cn } from '@/lib/utils';\n\ninterface EventDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  event?: CalendarEvent | null;\n  initialDate?: Date;\n  onSuccess?: () => void;\n}\n\nconst eventTypes = [\n  { value: 'class', label: 'Class' },\n  { value: 'competition', label: 'Competition' },\n  { value: 'meeting', label: 'Meeting' },\n  { value: 'holiday', label: 'Holiday' },\n  { value: 'other', label: 'Other' },\n];\n\nconst timeOptions = Array.from({ length: 48 }, (_, i) => {\n  const hour = Math.floor(i / 2);\n  const minute = i % 2 === 0 ? '00' : '30';\n  const period = hour < 12 ? 'AM' : 'PM';\n  const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;\n  return {\n    value: `${hour.toString().padStart(2, '0')}:${minute}`,\n    label: `${displayHour}:${minute} ${period}`,\n  };\n});\n\nexport function EventDialog({\n  open,\n  onOpenChange,\n  event,\n  initialDate,\n  onSuccess,\n}: EventDialogProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    type: 'class' as CalendarEvent['type'],\n    location: '',\n    allDay: false,\n    startDate: initialDate || new Date(),\n    startTime: '09:00',\n    endDate: initialDate || new Date(),\n    endTime: '10:00',\n  });\n\n  useEffect(() => {\n    if (event) {\n      const startDate = new Date(event.startDate);\n      const endDate = new Date(event.endDate);\n\n      setFormData({\n        title: event.title,\n        description: event.description || '',\n        type: event.type,\n        location: event.location || '',\n        allDay: event.allDay,\n        startDate,\n        startTime: format(startDate, 'HH:mm'),\n        endDate,\n        endTime: format(endDate, 'HH:mm'),\n      });\n    } else if (initialDate) {\n      setFormData((prev) => ({\n        ...prev,\n        startDate: initialDate,\n        endDate: initialDate,\n      }));\n    }\n  }, [event, initialDate]);\n\n  async function handleSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    if (!user) return;\n\n    setLoading(true);\n\n    try {\n      // Combine date and time\n      const [startHour, startMinute] = formData.startTime.split(':').map(Number);\n      const [endHour, endMinute] = formData.endTime.split(':').map(Number);\n\n      const startDateTime = set(formData.startDate, {\n        hours: formData.allDay ? 0 : startHour,\n        minutes: formData.allDay ? 0 : startMinute,\n        seconds: 0,\n        milliseconds: 0,\n      });\n\n      const endDateTime = set(formData.endDate, {\n        hours: formData.allDay ? 23 : endHour,\n        minutes: formData.allDay ? 59 : endMinute,\n        seconds: formData.allDay ? 59 : 0,\n        milliseconds: 0,\n      });\n\n      const eventData: Omit<CalendarEvent, 'id' | 'createdAt' | 'updatedAt'> = {\n        title: formData.title,\n        description: formData.description || undefined,\n        type: formData.type,\n        location: formData.location || undefined,\n        allDay: formData.allDay,\n        startDate: startDateTime,\n        endDate: endDateTime,\n        createdBy: user.uid,\n        createdByName: user.displayName || user.email || 'Unknown',\n      };\n\n      if (event) {\n        await calendarService.update(event.id, eventData);\n        toast({\n          title: 'Event updated',\n          description: 'The event has been updated successfully.',\n        });\n      } else {\n        await calendarService.create(eventData);\n        toast({\n          title: 'Event created',\n          description: 'The event has been created successfully.',\n        });\n      }\n\n      onOpenChange(false);\n      onSuccess?.();\n    } catch (error) {\n      console.error('Error saving event:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to save event. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-h-[90vh] overflow-y-auto sm:max-w-[525px]\">\n        <form onSubmit={handleSubmit}>\n          <DialogHeader>\n            <DialogTitle>{event ? 'Edit Event' : 'Create Event'}</DialogTitle>\n            <DialogDescription className=\"text-sm\">\n              {event ? 'Update the event details' : 'Add a new event to the calendar'}\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"title\">Title</Label>\n              <Input\n                id=\"title\"\n                placeholder=\"Event title\"\n                value={formData.title}\n                onChange={(e) => setFormData((prev) => ({ ...prev, title: e.target.value }))}\n                required\n              />\n            </div>\n\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"type\">Type</Label>\n              <Select\n                value={formData.type}\n                onValueChange={(value) => setFormData((prev) => ({ ...prev, type: value as any }))}\n              >\n                <SelectTrigger id=\"type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {eventTypes.map((type) => (\n                    <SelectItem key={type.value} value={type.value}>\n                      {type.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"all-day\"\n                checked={formData.allDay}\n                onCheckedChange={(checked) => setFormData((prev) => ({ ...prev, allDay: checked }))}\n              />\n              <Label htmlFor=\"all-day\">All day event</Label>\n            </div>\n\n            <div className=\"grid gap-2 sm:grid-cols-2\">\n              <div className=\"grid gap-2\">\n                <Label>Start Date</Label>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className={cn(\n                        'justify-start text-left font-normal',\n                        !formData.startDate && 'text-muted-foreground'\n                      )}\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {format(formData.startDate, 'PPP')}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={formData.startDate}\n                      onSelect={(date) =>\n                        date && setFormData((prev) => ({ ...prev, startDate: date }))\n                      }\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n\n              {!formData.allDay && (\n                <div className=\"grid gap-2\">\n                  <Label>Start Time</Label>\n                  <Select\n                    value={formData.startTime}\n                    onValueChange={(value) =>\n                      setFormData((prev) => ({ ...prev, startTime: value }))\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {timeOptions.map((time) => (\n                        <SelectItem key={time.value} value={time.value}>\n                          {time.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n            </div>\n\n            <div className=\"grid gap-2 sm:grid-cols-2\">\n              <div className=\"grid gap-2\">\n                <Label>End Date</Label>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className={cn(\n                        'justify-start text-left font-normal',\n                        !formData.endDate && 'text-muted-foreground'\n                      )}\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {format(formData.endDate, 'PPP')}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={formData.endDate}\n                      onSelect={(date) =>\n                        date && setFormData((prev) => ({ ...prev, endDate: date }))\n                      }\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n\n              {!formData.allDay && (\n                <div className=\"grid gap-2\">\n                  <Label>End Time</Label>\n                  <Select\n                    value={formData.endTime}\n                    onValueChange={(value) => setFormData((prev) => ({ ...prev, endTime: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {timeOptions.map((time) => (\n                        <SelectItem key={time.value} value={time.value}>\n                          {time.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n            </div>\n\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"location\">Location (Optional)</Label>\n              <Input\n                id=\"location\"\n                placeholder=\"Event location\"\n                value={formData.location}\n                onChange={(e) => setFormData((prev) => ({ ...prev, location: e.target.value }))}\n              />\n            </div>\n\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"description\">Description (Optional)</Label>\n              <Textarea\n                id=\"description\"\n                placeholder=\"Event description\"\n                value={formData.description}\n                onChange={(e) => setFormData((prev) => ({ ...prev, description: e.target.value }))}\n                rows={3}\n              />\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              disabled={loading}\n            >\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={loading}>\n              {loading ? 'Saving...' : event ? 'Update' : 'Create'}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/a11y/noLabelWithoutControl","severity":"error","description":"A form label must be associated with an input.","message":[{"elements":[],"content":"A form label must be associated with an input."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/eula-dialog.tsx"},"span":[5778,6222],"sourceCode":"'use client';\n\nimport { AlertCircle } from 'lucide-react';\nimport { useState } from 'react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\ninterface EULADialogProps {\n  open: boolean;\n  onAccept: () => void;\n  onDecline: () => void;\n}\n\nexport function EULADialog({ open, onAccept, onDecline }: EULADialogProps) {\n  const [agreements, setAgreements] = useState({\n    termsAccepted: false,\n    independenceAcknowledged: false,\n    waiverAcknowledged: false,\n    communicationConsent: false,\n  });\n\n  const allAgreed = Object.values(agreements).every((v) => v);\n\n  const handleAccept = () => {\n    if (allAgreed) {\n      onAccept();\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={() => {}}>\n      <DialogContent className=\"max-h-[90vh] max-w-4xl\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl\">Homer Enrichment Hub - Terms of Service</DialogTitle>\n          <DialogDescription>Please read carefully before creating your account</DialogDescription>\n        </DialogHeader>\n\n        <ScrollArea className=\"h-[400px] pr-4\">\n          <div className=\"space-y-6 text-sm\">\n            <Alert className=\"border-destructive/50 bg-destructive/10\">\n              <AlertCircle className=\"text-destructive h-4 w-4\" />\n              <AlertDescription>\n                <p className=\"mb-2 font-bold\">CRITICAL NOTICE - THIS PROGRAM IS:</p>\n                <ul className=\"ml-4 space-y-1\">\n                  <li>\n                    • <strong>NOT</strong> a Kenai Peninsula College program\n                  </li>\n                  <li>\n                    • <strong>NOT</strong> a University of Alaska program\n                  </li>\n                  <li>\n                    • <strong>NOT</strong> affiliated with any educational institution\n                  </li>\n                  <li>\n                    • <strong>NOT</strong> affiliated with the school district or City of Homer\n                  </li>\n                </ul>\n              </AlertDescription>\n            </Alert>\n\n            <section>\n              <h3 className=\"mb-2 font-semibold\">1. PROGRAM DESCRIPTION AND INDEPENDENCE</h3>\n              <p className=\"mb-2\">\n                The Homer Enrichment Hub is a <strong>COMPLETELY INDEPENDENT ORGANIZATION</strong>{' '}\n                providing supplemental educational programs for students in the Homer, Alaska area.\n              </p>\n              <p className=\"mb-2\">\n                This program is organized by Jeffrey Johnson and Lia Calhoun acting in their\n                <strong> PERSONAL CAPACITIES</strong> as private individuals. While they are\n                employed as professors at Kenai Peninsula College, that employment is{' '}\n                <strong>completely separate</strong> from this program.\n              </p>\n            </section>\n\n            <section>\n              <h3 className=\"mb-2 font-semibold\">2. LIABILITY ACKNOWLEDGMENT</h3>\n              <p className=\"mb-2\">You acknowledge and agree that:</p>\n              <ul className=\"ml-4 space-y-1\">\n                <li>• This is an independent program with no institutional backing</li>\n                <li>• Participation involves inherent risks</li>\n                <li>• A signed physical waiver will be required before participation</li>\n                <li>• Program coordinators have limited liability as private individuals</li>\n                <li>• No educational institution has any liability for this program</li>\n                <li>• The program does not provide insurance coverage</li>\n              </ul>\n            </section>\n\n            <section>\n              <h3 className=\"mb-2 font-semibold\">3. DATA PRIVACY</h3>\n              <p className=\"mb-2\">\n                We collect only necessary information for program administration. Your data will not\n                be sold or shared with third parties. Records are not official school records and\n                are not subject to FERPA protections.\n              </p>\n            </section>\n\n            <section>\n              <h3 className=\"mb-2 font-semibold\">4. COMMUNICATION CONSENT</h3>\n              <p className=\"mb-2\">\n                By providing your contact information, you consent to receive program announcements,\n                schedule changes, emergency notifications, and general program information. You may\n                opt out of non-emergency communications at any time.\n              </p>\n            </section>\n\n            <section>\n              <h3 className=\"mb-2 font-semibold\">5. ACCOUNT REQUIREMENTS</h3>\n              <p className=\"mb-2\">\n                You must be at least 18 years old to create an account. If registering a child, you\n                must be their parent or legal guardian. You agree to provide accurate information\n                and keep your password secure.\n              </p>\n            </section>\n\n            <div className=\"bg-muted mt-6 rounded-lg p-4\">\n              <p className=\"text-xs\">\n                For the complete Terms of Service, please visit{' '}\n                <a\n                  href=\"/terms\"\n                  target=\"_blank\"\n                  className=\"text-primary hover:underline\"\n                  rel=\"noopener\"\n                >\n                  our full terms page\n                </a>\n                .\n              </p>\n            </div>\n          </div>\n        </ScrollArea>\n\n        <div className=\"space-y-3 border-t pt-4\">\n          <label className=\"flex items-start space-x-2 text-sm\">\n            <Checkbox\n              checked={agreements.termsAccepted}\n              onCheckedChange={(checked) =>\n                setAgreements((prev) => ({ ...prev, termsAccepted: checked as boolean }))\n              }\n              className=\"mt-0.5\"\n            />\n            <span>\n              <strong>I AGREE</strong> to the Terms of Service\n            </span>\n          </label>\n\n          <label className=\"flex items-start space-x-2 text-sm\">\n            <Checkbox\n              checked={agreements.independenceAcknowledged}\n              onCheckedChange={(checked) =>\n                setAgreements((prev) => ({ ...prev, independenceAcknowledged: checked as boolean }))\n              }\n              className=\"mt-0.5\"\n            />\n            <span>\n              <strong>I UNDERSTAND</strong> this is an independent program not affiliated with any\n              educational institution\n            </span>\n          </label>\n\n          <label className=\"flex items-start space-x-2 text-sm\">\n            <Checkbox\n              checked={agreements.waiverAcknowledged}\n              onCheckedChange={(checked) =>\n                setAgreements((prev) => ({ ...prev, waiverAcknowledged: checked as boolean }))\n              }\n              className=\"mt-0.5\"\n            />\n            <span>\n              <strong>I ACKNOWLEDGE</strong> that a signed physical waiver will be required for\n              participation\n            </span>\n          </label>\n\n          <label className=\"flex items-start space-x-2 text-sm\">\n            <Checkbox\n              checked={agreements.communicationConsent}\n              onCheckedChange={(checked) =>\n                setAgreements((prev) => ({ ...prev, communicationConsent: checked as boolean }))\n              }\n              className=\"mt-0.5\"\n            />\n            <span>\n              <strong>I CONSENT</strong> to receive program communications\n            </span>\n          </label>\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={onDecline}>\n            Decline\n          </Button>\n          <Button onClick={handleAccept} disabled={!allAgreed}>\n            I Agree and Continue\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/a11y/noLabelWithoutControl","severity":"error","description":"A form label must be associated with an input.","message":[{"elements":[],"content":"A form label must be associated with an input."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/eula-dialog.tsx"},"span":[6234,6774],"sourceCode":"'use client';\n\nimport { AlertCircle } from 'lucide-react';\nimport { useState } from 'react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\ninterface EULADialogProps {\n  open: boolean;\n  onAccept: () => void;\n  onDecline: () => void;\n}\n\nexport function EULADialog({ open, onAccept, onDecline }: EULADialogProps) {\n  const [agreements, setAgreements] = useState({\n    termsAccepted: false,\n    independenceAcknowledged: false,\n    waiverAcknowledged: false,\n    communicationConsent: false,\n  });\n\n  const allAgreed = Object.values(agreements).every((v) => v);\n\n  const handleAccept = () => {\n    if (allAgreed) {\n      onAccept();\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={() => {}}>\n      <DialogContent className=\"max-h-[90vh] max-w-4xl\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl\">Homer Enrichment Hub - Terms of Service</DialogTitle>\n          <DialogDescription>Please read carefully before creating your account</DialogDescription>\n        </DialogHeader>\n\n        <ScrollArea className=\"h-[400px] pr-4\">\n          <div className=\"space-y-6 text-sm\">\n            <Alert className=\"border-destructive/50 bg-destructive/10\">\n              <AlertCircle className=\"text-destructive h-4 w-4\" />\n              <AlertDescription>\n                <p className=\"mb-2 font-bold\">CRITICAL NOTICE - THIS PROGRAM IS:</p>\n                <ul className=\"ml-4 space-y-1\">\n                  <li>\n                    • <strong>NOT</strong> a Kenai Peninsula College program\n                  </li>\n                  <li>\n                    • <strong>NOT</strong> a University of Alaska program\n                  </li>\n                  <li>\n                    • <strong>NOT</strong> affiliated with any educational institution\n                  </li>\n                  <li>\n                    • <strong>NOT</strong> affiliated with the school district or City of Homer\n                  </li>\n                </ul>\n              </AlertDescription>\n            </Alert>\n\n            <section>\n              <h3 className=\"mb-2 font-semibold\">1. PROGRAM DESCRIPTION AND INDEPENDENCE</h3>\n              <p className=\"mb-2\">\n                The Homer Enrichment Hub is a <strong>COMPLETELY INDEPENDENT ORGANIZATION</strong>{' '}\n                providing supplemental educational programs for students in the Homer, Alaska area.\n              </p>\n              <p className=\"mb-2\">\n                This program is organized by Jeffrey Johnson and Lia Calhoun acting in their\n                <strong> PERSONAL CAPACITIES</strong> as private individuals. While they are\n                employed as professors at Kenai Peninsula College, that employment is{' '}\n                <strong>completely separate</strong> from this program.\n              </p>\n            </section>\n\n            <section>\n              <h3 className=\"mb-2 font-semibold\">2. LIABILITY ACKNOWLEDGMENT</h3>\n              <p className=\"mb-2\">You acknowledge and agree that:</p>\n              <ul className=\"ml-4 space-y-1\">\n                <li>• This is an independent program with no institutional backing</li>\n                <li>• Participation involves inherent risks</li>\n                <li>• A signed physical waiver will be required before participation</li>\n                <li>• Program coordinators have limited liability as private individuals</li>\n                <li>• No educational institution has any liability for this program</li>\n                <li>• The program does not provide insurance coverage</li>\n              </ul>\n            </section>\n\n            <section>\n              <h3 className=\"mb-2 font-semibold\">3. DATA PRIVACY</h3>\n              <p className=\"mb-2\">\n                We collect only necessary information for program administration. Your data will not\n                be sold or shared with third parties. Records are not official school records and\n                are not subject to FERPA protections.\n              </p>\n            </section>\n\n            <section>\n              <h3 className=\"mb-2 font-semibold\">4. COMMUNICATION CONSENT</h3>\n              <p className=\"mb-2\">\n                By providing your contact information, you consent to receive program announcements,\n                schedule changes, emergency notifications, and general program information. You may\n                opt out of non-emergency communications at any time.\n              </p>\n            </section>\n\n            <section>\n              <h3 className=\"mb-2 font-semibold\">5. ACCOUNT REQUIREMENTS</h3>\n              <p className=\"mb-2\">\n                You must be at least 18 years old to create an account. If registering a child, you\n                must be their parent or legal guardian. You agree to provide accurate information\n                and keep your password secure.\n              </p>\n            </section>\n\n            <div className=\"bg-muted mt-6 rounded-lg p-4\">\n              <p className=\"text-xs\">\n                For the complete Terms of Service, please visit{' '}\n                <a\n                  href=\"/terms\"\n                  target=\"_blank\"\n                  className=\"text-primary hover:underline\"\n                  rel=\"noopener\"\n                >\n                  our full terms page\n                </a>\n                .\n              </p>\n            </div>\n          </div>\n        </ScrollArea>\n\n        <div className=\"space-y-3 border-t pt-4\">\n          <label className=\"flex items-start space-x-2 text-sm\">\n            <Checkbox\n              checked={agreements.termsAccepted}\n              onCheckedChange={(checked) =>\n                setAgreements((prev) => ({ ...prev, termsAccepted: checked as boolean }))\n              }\n              className=\"mt-0.5\"\n            />\n            <span>\n              <strong>I AGREE</strong> to the Terms of Service\n            </span>\n          </label>\n\n          <label className=\"flex items-start space-x-2 text-sm\">\n            <Checkbox\n              checked={agreements.independenceAcknowledged}\n              onCheckedChange={(checked) =>\n                setAgreements((prev) => ({ ...prev, independenceAcknowledged: checked as boolean }))\n              }\n              className=\"mt-0.5\"\n            />\n            <span>\n              <strong>I UNDERSTAND</strong> this is an independent program not affiliated with any\n              educational institution\n            </span>\n          </label>\n\n          <label className=\"flex items-start space-x-2 text-sm\">\n            <Checkbox\n              checked={agreements.waiverAcknowledged}\n              onCheckedChange={(checked) =>\n                setAgreements((prev) => ({ ...prev, waiverAcknowledged: checked as boolean }))\n              }\n              className=\"mt-0.5\"\n            />\n            <span>\n              <strong>I ACKNOWLEDGE</strong> that a signed physical waiver will be required for\n              participation\n            </span>\n          </label>\n\n          <label className=\"flex items-start space-x-2 text-sm\">\n            <Checkbox\n              checked={agreements.communicationConsent}\n              onCheckedChange={(checked) =>\n                setAgreements((prev) => ({ ...prev, communicationConsent: checked as boolean }))\n              }\n              className=\"mt-0.5\"\n            />\n            <span>\n              <strong>I CONSENT</strong> to receive program communications\n            </span>\n          </label>\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={onDecline}>\n            Decline\n          </Button>\n          <Button onClick={handleAccept} disabled={!allAgreed}>\n            I Agree and Continue\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/a11y/noLabelWithoutControl","severity":"error","description":"A form label must be associated with an input.","message":[{"elements":[],"content":"A form label must be associated with an input."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/eula-dialog.tsx"},"span":[6786,7301],"sourceCode":"'use client';\n\nimport { AlertCircle } from 'lucide-react';\nimport { useState } from 'react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\ninterface EULADialogProps {\n  open: boolean;\n  onAccept: () => void;\n  onDecline: () => void;\n}\n\nexport function EULADialog({ open, onAccept, onDecline }: EULADialogProps) {\n  const [agreements, setAgreements] = useState({\n    termsAccepted: false,\n    independenceAcknowledged: false,\n    waiverAcknowledged: false,\n    communicationConsent: false,\n  });\n\n  const allAgreed = Object.values(agreements).every((v) => v);\n\n  const handleAccept = () => {\n    if (allAgreed) {\n      onAccept();\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={() => {}}>\n      <DialogContent className=\"max-h-[90vh] max-w-4xl\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl\">Homer Enrichment Hub - Terms of Service</DialogTitle>\n          <DialogDescription>Please read carefully before creating your account</DialogDescription>\n        </DialogHeader>\n\n        <ScrollArea className=\"h-[400px] pr-4\">\n          <div className=\"space-y-6 text-sm\">\n            <Alert className=\"border-destructive/50 bg-destructive/10\">\n              <AlertCircle className=\"text-destructive h-4 w-4\" />\n              <AlertDescription>\n                <p className=\"mb-2 font-bold\">CRITICAL NOTICE - THIS PROGRAM IS:</p>\n                <ul className=\"ml-4 space-y-1\">\n                  <li>\n                    • <strong>NOT</strong> a Kenai Peninsula College program\n                  </li>\n                  <li>\n                    • <strong>NOT</strong> a University of Alaska program\n                  </li>\n                  <li>\n                    • <strong>NOT</strong> affiliated with any educational institution\n                  </li>\n                  <li>\n                    • <strong>NOT</strong> affiliated with the school district or City of Homer\n                  </li>\n                </ul>\n              </AlertDescription>\n            </Alert>\n\n            <section>\n              <h3 className=\"mb-2 font-semibold\">1. PROGRAM DESCRIPTION AND INDEPENDENCE</h3>\n              <p className=\"mb-2\">\n                The Homer Enrichment Hub is a <strong>COMPLETELY INDEPENDENT ORGANIZATION</strong>{' '}\n                providing supplemental educational programs for students in the Homer, Alaska area.\n              </p>\n              <p className=\"mb-2\">\n                This program is organized by Jeffrey Johnson and Lia Calhoun acting in their\n                <strong> PERSONAL CAPACITIES</strong> as private individuals. While they are\n                employed as professors at Kenai Peninsula College, that employment is{' '}\n                <strong>completely separate</strong> from this program.\n              </p>\n            </section>\n\n            <section>\n              <h3 className=\"mb-2 font-semibold\">2. LIABILITY ACKNOWLEDGMENT</h3>\n              <p className=\"mb-2\">You acknowledge and agree that:</p>\n              <ul className=\"ml-4 space-y-1\">\n                <li>• This is an independent program with no institutional backing</li>\n                <li>• Participation involves inherent risks</li>\n                <li>• A signed physical waiver will be required before participation</li>\n                <li>• Program coordinators have limited liability as private individuals</li>\n                <li>• No educational institution has any liability for this program</li>\n                <li>• The program does not provide insurance coverage</li>\n              </ul>\n            </section>\n\n            <section>\n              <h3 className=\"mb-2 font-semibold\">3. DATA PRIVACY</h3>\n              <p className=\"mb-2\">\n                We collect only necessary information for program administration. Your data will not\n                be sold or shared with third parties. Records are not official school records and\n                are not subject to FERPA protections.\n              </p>\n            </section>\n\n            <section>\n              <h3 className=\"mb-2 font-semibold\">4. COMMUNICATION CONSENT</h3>\n              <p className=\"mb-2\">\n                By providing your contact information, you consent to receive program announcements,\n                schedule changes, emergency notifications, and general program information. You may\n                opt out of non-emergency communications at any time.\n              </p>\n            </section>\n\n            <section>\n              <h3 className=\"mb-2 font-semibold\">5. ACCOUNT REQUIREMENTS</h3>\n              <p className=\"mb-2\">\n                You must be at least 18 years old to create an account. If registering a child, you\n                must be their parent or legal guardian. You agree to provide accurate information\n                and keep your password secure.\n              </p>\n            </section>\n\n            <div className=\"bg-muted mt-6 rounded-lg p-4\">\n              <p className=\"text-xs\">\n                For the complete Terms of Service, please visit{' '}\n                <a\n                  href=\"/terms\"\n                  target=\"_blank\"\n                  className=\"text-primary hover:underline\"\n                  rel=\"noopener\"\n                >\n                  our full terms page\n                </a>\n                .\n              </p>\n            </div>\n          </div>\n        </ScrollArea>\n\n        <div className=\"space-y-3 border-t pt-4\">\n          <label className=\"flex items-start space-x-2 text-sm\">\n            <Checkbox\n              checked={agreements.termsAccepted}\n              onCheckedChange={(checked) =>\n                setAgreements((prev) => ({ ...prev, termsAccepted: checked as boolean }))\n              }\n              className=\"mt-0.5\"\n            />\n            <span>\n              <strong>I AGREE</strong> to the Terms of Service\n            </span>\n          </label>\n\n          <label className=\"flex items-start space-x-2 text-sm\">\n            <Checkbox\n              checked={agreements.independenceAcknowledged}\n              onCheckedChange={(checked) =>\n                setAgreements((prev) => ({ ...prev, independenceAcknowledged: checked as boolean }))\n              }\n              className=\"mt-0.5\"\n            />\n            <span>\n              <strong>I UNDERSTAND</strong> this is an independent program not affiliated with any\n              educational institution\n            </span>\n          </label>\n\n          <label className=\"flex items-start space-x-2 text-sm\">\n            <Checkbox\n              checked={agreements.waiverAcknowledged}\n              onCheckedChange={(checked) =>\n                setAgreements((prev) => ({ ...prev, waiverAcknowledged: checked as boolean }))\n              }\n              className=\"mt-0.5\"\n            />\n            <span>\n              <strong>I ACKNOWLEDGE</strong> that a signed physical waiver will be required for\n              participation\n            </span>\n          </label>\n\n          <label className=\"flex items-start space-x-2 text-sm\">\n            <Checkbox\n              checked={agreements.communicationConsent}\n              onCheckedChange={(checked) =>\n                setAgreements((prev) => ({ ...prev, communicationConsent: checked as boolean }))\n              }\n              className=\"mt-0.5\"\n            />\n            <span>\n              <strong>I CONSENT</strong> to receive program communications\n            </span>\n          </label>\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={onDecline}>\n            Decline\n          </Button>\n          <Button onClick={handleAccept} disabled={!allAgreed}>\n            I Agree and Continue\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/a11y/noLabelWithoutControl","severity":"error","description":"A form label must be associated with an input.","message":[{"elements":[],"content":"A form label must be associated with an input."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/eula-dialog.tsx"},"span":[7313,7783],"sourceCode":"'use client';\n\nimport { AlertCircle } from 'lucide-react';\nimport { useState } from 'react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\ninterface EULADialogProps {\n  open: boolean;\n  onAccept: () => void;\n  onDecline: () => void;\n}\n\nexport function EULADialog({ open, onAccept, onDecline }: EULADialogProps) {\n  const [agreements, setAgreements] = useState({\n    termsAccepted: false,\n    independenceAcknowledged: false,\n    waiverAcknowledged: false,\n    communicationConsent: false,\n  });\n\n  const allAgreed = Object.values(agreements).every((v) => v);\n\n  const handleAccept = () => {\n    if (allAgreed) {\n      onAccept();\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={() => {}}>\n      <DialogContent className=\"max-h-[90vh] max-w-4xl\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl\">Homer Enrichment Hub - Terms of Service</DialogTitle>\n          <DialogDescription>Please read carefully before creating your account</DialogDescription>\n        </DialogHeader>\n\n        <ScrollArea className=\"h-[400px] pr-4\">\n          <div className=\"space-y-6 text-sm\">\n            <Alert className=\"border-destructive/50 bg-destructive/10\">\n              <AlertCircle className=\"text-destructive h-4 w-4\" />\n              <AlertDescription>\n                <p className=\"mb-2 font-bold\">CRITICAL NOTICE - THIS PROGRAM IS:</p>\n                <ul className=\"ml-4 space-y-1\">\n                  <li>\n                    • <strong>NOT</strong> a Kenai Peninsula College program\n                  </li>\n                  <li>\n                    • <strong>NOT</strong> a University of Alaska program\n                  </li>\n                  <li>\n                    • <strong>NOT</strong> affiliated with any educational institution\n                  </li>\n                  <li>\n                    • <strong>NOT</strong> affiliated with the school district or City of Homer\n                  </li>\n                </ul>\n              </AlertDescription>\n            </Alert>\n\n            <section>\n              <h3 className=\"mb-2 font-semibold\">1. PROGRAM DESCRIPTION AND INDEPENDENCE</h3>\n              <p className=\"mb-2\">\n                The Homer Enrichment Hub is a <strong>COMPLETELY INDEPENDENT ORGANIZATION</strong>{' '}\n                providing supplemental educational programs for students in the Homer, Alaska area.\n              </p>\n              <p className=\"mb-2\">\n                This program is organized by Jeffrey Johnson and Lia Calhoun acting in their\n                <strong> PERSONAL CAPACITIES</strong> as private individuals. While they are\n                employed as professors at Kenai Peninsula College, that employment is{' '}\n                <strong>completely separate</strong> from this program.\n              </p>\n            </section>\n\n            <section>\n              <h3 className=\"mb-2 font-semibold\">2. LIABILITY ACKNOWLEDGMENT</h3>\n              <p className=\"mb-2\">You acknowledge and agree that:</p>\n              <ul className=\"ml-4 space-y-1\">\n                <li>• This is an independent program with no institutional backing</li>\n                <li>• Participation involves inherent risks</li>\n                <li>• A signed physical waiver will be required before participation</li>\n                <li>• Program coordinators have limited liability as private individuals</li>\n                <li>• No educational institution has any liability for this program</li>\n                <li>• The program does not provide insurance coverage</li>\n              </ul>\n            </section>\n\n            <section>\n              <h3 className=\"mb-2 font-semibold\">3. DATA PRIVACY</h3>\n              <p className=\"mb-2\">\n                We collect only necessary information for program administration. Your data will not\n                be sold or shared with third parties. Records are not official school records and\n                are not subject to FERPA protections.\n              </p>\n            </section>\n\n            <section>\n              <h3 className=\"mb-2 font-semibold\">4. COMMUNICATION CONSENT</h3>\n              <p className=\"mb-2\">\n                By providing your contact information, you consent to receive program announcements,\n                schedule changes, emergency notifications, and general program information. You may\n                opt out of non-emergency communications at any time.\n              </p>\n            </section>\n\n            <section>\n              <h3 className=\"mb-2 font-semibold\">5. ACCOUNT REQUIREMENTS</h3>\n              <p className=\"mb-2\">\n                You must be at least 18 years old to create an account. If registering a child, you\n                must be their parent or legal guardian. You agree to provide accurate information\n                and keep your password secure.\n              </p>\n            </section>\n\n            <div className=\"bg-muted mt-6 rounded-lg p-4\">\n              <p className=\"text-xs\">\n                For the complete Terms of Service, please visit{' '}\n                <a\n                  href=\"/terms\"\n                  target=\"_blank\"\n                  className=\"text-primary hover:underline\"\n                  rel=\"noopener\"\n                >\n                  our full terms page\n                </a>\n                .\n              </p>\n            </div>\n          </div>\n        </ScrollArea>\n\n        <div className=\"space-y-3 border-t pt-4\">\n          <label className=\"flex items-start space-x-2 text-sm\">\n            <Checkbox\n              checked={agreements.termsAccepted}\n              onCheckedChange={(checked) =>\n                setAgreements((prev) => ({ ...prev, termsAccepted: checked as boolean }))\n              }\n              className=\"mt-0.5\"\n            />\n            <span>\n              <strong>I AGREE</strong> to the Terms of Service\n            </span>\n          </label>\n\n          <label className=\"flex items-start space-x-2 text-sm\">\n            <Checkbox\n              checked={agreements.independenceAcknowledged}\n              onCheckedChange={(checked) =>\n                setAgreements((prev) => ({ ...prev, independenceAcknowledged: checked as boolean }))\n              }\n              className=\"mt-0.5\"\n            />\n            <span>\n              <strong>I UNDERSTAND</strong> this is an independent program not affiliated with any\n              educational institution\n            </span>\n          </label>\n\n          <label className=\"flex items-start space-x-2 text-sm\">\n            <Checkbox\n              checked={agreements.waiverAcknowledged}\n              onCheckedChange={(checked) =>\n                setAgreements((prev) => ({ ...prev, waiverAcknowledged: checked as boolean }))\n              }\n              className=\"mt-0.5\"\n            />\n            <span>\n              <strong>I ACKNOWLEDGE</strong> that a signed physical waiver will be required for\n              participation\n            </span>\n          </label>\n\n          <label className=\"flex items-start space-x-2 text-sm\">\n            <Checkbox\n              checked={agreements.communicationConsent}\n              onCheckedChange={(checked) =>\n                setAgreements((prev) => ({ ...prev, communicationConsent: checked as boolean }))\n              }\n              className=\"mt-0.5\"\n            />\n            <span>\n              <strong>I CONSENT</strong> to receive program communications\n            </span>\n          </label>\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={onDecline}>\n            Decline\n          </Button>\n          <Button onClick={handleAccept} disabled={!allAgreed}>\n            I Agree and Continue\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"},"tags":[],"source":null},{"category":"assist/source/organizeImports","severity":"error","description":"The imports and exports are not sorted.","message":[{"elements":[],"content":"The imports and exports are not sorted."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Safe fix: Organize Imports (Biome)"}]]},{"diff":{"dictionary":"'use client';\n\nimport { doc, getDoc } from 'firebase/firestore';\nimport { ArrowRight, BookOpen, Calendar, Info, Mail, Phone, User, UserPlus } from 'lucide-react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useEffect, useStateuseId,  } from 'react';\nimport { Icons } from '@/components/icons';\nimport { Alert, AlertDescription } from '@/components/ui/alert';  );\n}\n","ops":[{"diffOp":{"equal":{"range":[0,237]}}},{"diffOp":{"equal":{"range":[237,258]}}},{"diffOp":{"delete":{"range":[258,266]}}},{"diffOp":{"insert":{"range":[266,271]}}},{"diffOp":{"equal":{"range":[271,273]}}},{"diffOp":{"delete":{"range":[266,271]}}},{"diffOp":{"insert":{"range":[258,266]}}},{"diffOp":{"equal":{"range":[273,289]}}},{"diffOp":{"equal":{"range":[289,398]}}},{"equalLines":{"line_count":394}},{"diffOp":{"equal":{"range":[398,405]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/guardian-info-form.tsx"},"span":[15,64],"sourceCode":"'use client';\n\nimport { doc, getDoc } from 'firebase/firestore';\nimport { ArrowRight, BookOpen, Calendar, Info, Mail, Phone, User, UserPlus } from 'lucide-react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useEffect, useState, useId } from 'react';\nimport { Icons } from '@/components/icons';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { db } from '@/lib/firebase';\nimport { profileService } from '@/lib/firebase-admin';\nimport { formatPhoneNumber } from '@/lib/utils';\n\nexport function GuardianInfoForm() {\n  const displayNameId = useId();\n  const emailId = useId();\n  const phoneId = useId();\n  const announcementsId = useId();\n  const programUpdatesId = useId();\n  const newslettersId = useId();\n  const { user } = useAuth();\n  const router = useRouter();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [isProfileComplete, setIsProfileComplete] = useState(false);\n  const [formData, setFormData] = useState({\n    displayName: '',\n    email: '',\n    phone: '',\n    emailPreferences: {\n      announcements: true,\n      programUpdates: true,\n      newsletters: true,\n    },\n  });\n\n  useEffect(() => {\n    async function loadUserData() {\n      if (!user) return;\n\n      try {\n        // Check if profile is already complete\n        const userDoc = await getDoc(doc(db, 'users', user.uid));\n        const userData = userDoc.data();\n\n        if (userData?.profileCompleted) {\n          setIsProfileComplete(true);\n          return;\n        }\n\n        // Only pre-fill with auth provider data, not database data\n        // This ensures new users get a clean form\n        setFormData({\n          displayName: user.displayName || '',\n          email: user.email || '',\n          phone: '',\n          emailPreferences: {\n            announcements: true,\n            programUpdates: true,\n            newsletters: true,\n          },\n        });\n      } catch (error) {\n        console.error('Error loading user data:', error);\n      }\n    }\n\n    loadUserData();\n  }, [user]);\n\n  async function handleSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    if (!user) return;\n\n    setLoading(true);\n\n    try {\n      // Update user profile\n      await profileService.createOrUpdate(user.uid, {\n        displayName: formData.displayName,\n        email: formData.email,\n        phone: formData.phone.replace(/\\D/g, ''),\n        emailPreferences: formData.emailPreferences,\n        profileCompleted: true,\n      });\n\n      toast({\n        title: 'Profile updated successfully',\n        description: 'Your guardian information has been saved.',\n      });\n\n      // Mark as complete\n      setIsProfileComplete(true);\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      toast({\n        title: 'Error updating profile',\n        description: 'Please try again or contact support.',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  function handlePhoneChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const formatted = formatPhoneNumber(e.target.value);\n    setFormData((prev) => ({ ...prev, phone: formatted }));\n  }\n\n  // Don't show email verification message for Google/OAuth users\n  // They are automatically verified through their provider\n  if (!user) {\n    return null;\n  }\n\n  // Show next steps if profile is complete\n  if (isProfileComplete) {\n    return (\n      <Card className=\"mx-auto max-w-3xl\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl\">Welcome to Homer Enrichment Hub! 🎉</CardTitle>\n          <CardDescription>\n            Your guardian profile is all set. Here's what to do next:\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid gap-4 sm:grid-cols-2\">\n            <Link href=\"/students/add\" className=\"block\">\n              <div className=\"group bg-card hover:bg-accent cursor-pointer rounded-lg border p-4 transition-all hover:shadow-md\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"bg-primary/10 rounded-lg p-2\">\n                    <UserPlus className=\"text-primary h-5 w-5\" />\n                  </div>\n                  <div className=\"space-y-1\">\n                    <h3 className=\"group-hover:text-primary font-medium\">Add Your Children</h3>\n                    <p className=\"text-muted-foreground text-sm\">\n                      Register your children in the system\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </Link>\n\n            <Link href=\"/programs\" className=\"block\">\n              <div className=\"group bg-card hover:bg-accent cursor-pointer rounded-lg border p-4 transition-all hover:shadow-md\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"bg-primary/10 rounded-lg p-2\">\n                    <BookOpen className=\"text-primary h-5 w-5\" />\n                  </div>\n                  <div className=\"space-y-1\">\n                    <h3 className=\"group-hover:text-primary font-medium\">Browse Programs</h3>\n                    <p className=\"text-muted-foreground text-sm\">\n                      Explore MathCounts and other activities\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </Link>\n\n            <Link href=\"/calendar\" className=\"block\">\n              <div className=\"group bg-card hover:bg-accent cursor-pointer rounded-lg border p-4 transition-all hover:shadow-md\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"bg-primary/10 rounded-lg p-2\">\n                    <Calendar className=\"text-primary h-5 w-5\" />\n                  </div>\n                  <div className=\"space-y-1\">\n                    <h3 className=\"group-hover:text-primary font-medium\">View Schedule</h3>\n                    <p className=\"text-muted-foreground text-sm\">Check dates and deadlines</p>\n                  </div>\n                </div>\n              </div>\n            </Link>\n\n            <Link href=\"/dashboard\" className=\"block\">\n              <div className=\"group bg-card hover:bg-accent cursor-pointer rounded-lg border p-4 transition-all hover:shadow-md\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"bg-primary/10 rounded-lg p-2\">\n                    <ArrowRight className=\"text-primary h-5 w-5\" />\n                  </div>\n                  <div className=\"space-y-1\">\n                    <h3 className=\"group-hover:text-primary font-medium\">Go to Dashboard</h3>\n                    <p className=\"text-muted-foreground text-sm\">Access all features</p>\n                  </div>\n                </div>\n              </div>\n            </Link>\n          </div>\n\n          <Alert>\n            <Mail className=\"h-4 w-4\" />\n            <AlertDescription>\n              <strong>Questions?</strong> Contact Jeffrey at{' '}\n              <a\n                href=\"mailto:jeffreyverlynjohnson@gmail.com\"\n                className=\"text-primary hover:underline\"\n              >\n                jeffreyverlynjohnson@gmail.com\n              </a>\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"mx-auto max-w-2xl\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl\">Complete Your Guardian Profile</CardTitle>\n        <CardDescription>\n          Let's make sure we have your correct information for program communications\n        </CardDescription>\n      </CardHeader>\n      <form onSubmit={handleSubmit}>\n        <CardContent className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor={displayNameId}>\n                <User className=\"mr-1 inline h-4 w-4\" />\n                Full Name\n              </Label>\n              <Input\n                id={displayNameId}\n                placeholder=\"Your full name\"\n                value={formData.displayName}\n                onChange={(e) => setFormData((prev) => ({ ...prev, displayName: e.target.value }))}\n                required\n                disabled={loading}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor={emailId}>\n                <Mail className=\"mr-1 inline h-4 w-4\" />\n                Email Address\n              </Label>\n              <Input\n                id={emailId}\n                type=\"email\"\n                placeholder=\"your@email.com\"\n                value={formData.email}\n                onChange={(e) => setFormData((prev) => ({ ...prev, email: e.target.value }))}\n                required\n                disabled={loading}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor={phoneId}>\n                <Phone className=\"mr-1 inline h-4 w-4\" />\n                Phone Number\n              </Label>\n              <Input\n                id={phoneId}\n                type=\"tel\"\n                placeholder=\"(555) 123-4567\"\n                value={formData.phone}\n                onChange={handlePhoneChange}\n                required\n                disabled={loading}\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-4 border-t pt-4\">\n            <div className=\"space-y-2\">\n              <Label className=\"text-base font-semibold\">Email Preferences</Label>\n              <p className=\"text-muted-foreground text-sm\">\n                Stay connected with updates about programs and activities\n              </p>\n            </div>\n\n            <div className=\"space-y-3\">\n              <div className=\"flex items-start space-x-3\">\n                <Checkbox\n                  id={announcementsId}\n                  checked={formData.emailPreferences.announcements}\n                  onCheckedChange={(checked) =>\n                    setFormData((prev) => ({\n                      ...prev,\n                      emailPreferences: {\n                        ...prev.emailPreferences,\n                        announcements: checked as boolean,\n                      },\n                    }))\n                  }\n                  disabled={loading}\n                />\n                <div className=\"space-y-1\">\n                  <label\n                    htmlFor={announcementsId}\n                    className=\"text-sm leading-none font-medium peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                  >\n                    Important Announcements\n                  </label>\n                  <p className=\"text-muted-foreground text-xs\">\n                    Receive updates about schedule changes, deadlines, and urgent information\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-3\">\n                <Checkbox\n                  id={programUpdatesId}\n                  checked={formData.emailPreferences.programUpdates}\n                  onCheckedChange={(checked) =>\n                    setFormData((prev) => ({\n                      ...prev,\n                      emailPreferences: {\n                        ...prev.emailPreferences,\n                        programUpdates: checked as boolean,\n                      },\n                    }))\n                  }\n                  disabled={loading}\n                />\n                <div className=\"space-y-1\">\n                  <label\n                    htmlFor={programUpdatesId}\n                    className=\"text-sm leading-none font-medium peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                  >\n                    Program Updates\n                  </label>\n                  <p className=\"text-muted-foreground text-xs\">\n                    Information about MathCounts, new programs, and registration openings\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-3\">\n                <Checkbox\n                  id={newslettersId}\n                  checked={formData.emailPreferences.newsletters}\n                  onCheckedChange={(checked) =>\n                    setFormData((prev) => ({\n                      ...prev,\n                      emailPreferences: {\n                        ...prev.emailPreferences,\n                        newsletters: checked as boolean,\n                      },\n                    }))\n                  }\n                  disabled={loading}\n                />\n                <div className=\"space-y-1\">\n                  <label\n                    htmlFor={newslettersId}\n                    className=\"text-sm leading-none font-medium peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                  >\n                    Community Newsletter\n                  </label>\n                  <p className=\"text-muted-foreground text-xs\">\n                    Monthly updates about student achievements and upcoming events\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <Alert>\n              <Info className=\"h-4 w-4\" />\n              <AlertDescription>\n                We recommend keeping announcements enabled to stay informed about important program\n                updates. You can change these preferences anytime in your profile settings.\n              </AlertDescription>\n            </Alert>\n          </div>\n\n          <Alert>\n            <AlertDescription>\n              <strong>Remember:</strong> You can always sign in using:\n              <ul className=\"mt-2 ml-4 list-disc text-sm\">\n                <li>Your email and password</li>\n                <li>Google sign-in</li>\n                <li>Magic link (we'll email you a sign-in link)</li>\n              </ul>\n            </AlertDescription>\n          </Alert>\n\n          <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n            {loading && <Icons.spinner className=\"mr-2 h-4 w-4 animate-spin\" />}\n            Save and Continue\n          </Button>\n\n          <p className=\"text-muted-foreground text-center text-sm\">\n            Need help? Contact Jeffrey at{' '}\n            <a\n              href=\"mailto:jeffreyverlynjohnson@gmail.com\"\n              className=\"text-primary hover:underline\"\n            >\n              jeffreyverlynjohnson@gmail.com\n            </a>\n          </p>\n        </CardContent>\n      </form>\n    </Card>\n  );\n}\n"},"tags":["fixable"],"source":null},{"category":"lint/correctness/noNestedComponentDefinitions","severity":"error","description":"Components should not be defined inside other components.","message":[{"elements":[],"content":"Components should not be defined inside other components."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Move it outside of the parent component or pass it as a prop."}]]},{"frame":{"path":null,"span":[326,334],"sourceCode":"'use client';\n\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\nimport type * as React from 'react';\nimport { DayPicker } from 'react-day-picker';\nimport { buttonVariants } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({ className, classNames, showOutsideDays = true, ...props }: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn('p-3', className)}\n      classNames={{\n        months: 'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',\n        month: 'space-y-4',\n        caption: 'flex justify-center pt-1 relative items-center',\n        caption_label: 'text-sm font-medium',\n        nav: 'space-x-1 flex items-center',\n        nav_button: cn(\n          buttonVariants({ variant: 'outline' }),\n          'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100'\n        ),\n        nav_button_previous: 'absolute left-1',\n        nav_button_next: 'absolute right-1',\n        table: 'w-full border-collapse space-y-1',\n        head_row: 'flex',\n        head_cell: 'text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]',\n        row: 'flex w-full mt-2',\n        cell: 'h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20',\n        day: cn(\n          buttonVariants({ variant: 'ghost' }),\n          'h-9 w-9 p-0 font-normal aria-selected:opacity-100'\n        ),\n        day_range_end: 'day-range-end',\n        day_selected:\n          'bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground',\n        day_today: 'bg-accent text-accent-foreground',\n        day_outside:\n          'day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground',\n        day_disabled: 'text-muted-foreground opacity-50',\n        day_range_middle: 'aria-selected:bg-accent aria-selected:text-accent-foreground',\n        day_hidden: 'invisible',\n        ...classNames,\n      }}\n      components={{\n        Chevron: ({ orientation }) => {\n          if (orientation === 'left') {\n            return <ChevronLeft className=\"h-4 w-4\" />;\n          }\n          return <ChevronRight className=\"h-4 w-4\" />;\n        },\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = 'Calendar';\n\nexport { Calendar };\n"}},{"log":["info",[{"elements":[],"content":"Component definitions inside other components cause them to be recreated on every render, which can lead to performance issues and unexpected behavior."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/ui/calendar.tsx"},"span":[2336,2343],"sourceCode":"'use client';\n\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\nimport type * as React from 'react';\nimport { DayPicker } from 'react-day-picker';\nimport { buttonVariants } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({ className, classNames, showOutsideDays = true, ...props }: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn('p-3', className)}\n      classNames={{\n        months: 'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',\n        month: 'space-y-4',\n        caption: 'flex justify-center pt-1 relative items-center',\n        caption_label: 'text-sm font-medium',\n        nav: 'space-x-1 flex items-center',\n        nav_button: cn(\n          buttonVariants({ variant: 'outline' }),\n          'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100'\n        ),\n        nav_button_previous: 'absolute left-1',\n        nav_button_next: 'absolute right-1',\n        table: 'w-full border-collapse space-y-1',\n        head_row: 'flex',\n        head_cell: 'text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]',\n        row: 'flex w-full mt-2',\n        cell: 'h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20',\n        day: cn(\n          buttonVariants({ variant: 'ghost' }),\n          'h-9 w-9 p-0 font-normal aria-selected:opacity-100'\n        ),\n        day_range_end: 'day-range-end',\n        day_selected:\n          'bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground',\n        day_today: 'bg-accent text-accent-foreground',\n        day_outside:\n          'day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground',\n        day_disabled: 'text-muted-foreground opacity-50',\n        day_range_middle: 'aria-selected:bg-accent aria-selected:text-accent-foreground',\n        day_hidden: 'invisible',\n        ...classNames,\n      }}\n      components={{\n        Chevron: ({ orientation }) => {\n          if (orientation === 'left') {\n            return <ChevronLeft className=\"h-4 w-4\" />;\n          }\n          return <ChevronRight className=\"h-4 w-4\" />;\n        },\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = 'Calendar';\n\nexport { Calendar };\n"},"tags":[],"source":null},{"category":"lint/a11y/useSemanticElements","severity":"error","description":"The elements with this role can be changed to the following elements:\n<section>","message":[{"elements":[],"content":"The elements with this role can be changed to the following elements:\n<section>"}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"For examples and more information, see "},{"elements":[{"Hyperlink":{"href":"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles"}}],"content":"WAI-ARIA Roles"}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/ui/carousel.tsx"},"span":[3129,3142],"sourceCode":"'use client';\n\nimport useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react';\nimport { ArrowLeft, ArrowRight } from 'lucide-react';\nimport * as React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ntype CarouselApi = UseEmblaCarouselType[1];\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>;\ntype CarouselOptions = UseCarouselParameters[0];\ntype CarouselPlugin = UseCarouselParameters[1];\n\ntype CarouselProps = {\n  opts?: CarouselOptions;\n  plugins?: CarouselPlugin;\n  orientation?: 'horizontal' | 'vertical';\n  setApi?: (api: CarouselApi) => void;\n};\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0];\n  api: ReturnType<typeof useEmblaCarousel>[1];\n  scrollPrev: () => void;\n  scrollNext: () => void;\n  canScrollPrev: boolean;\n  canScrollNext: boolean;\n} & CarouselProps;\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null);\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext);\n\n  if (!context) {\n    throw new Error('useCarousel must be used within a <Carousel />');\n  }\n\n  return context;\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(({ orientation = 'horizontal', opts, setApi, plugins, className, children, ...props }, ref) => {\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      ...opts,\n      axis: orientation === 'horizontal' ? 'x' : 'y',\n    },\n    plugins\n  );\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false);\n  const [canScrollNext, setCanScrollNext] = React.useState(false);\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) {\n      return;\n    }\n\n    setCanScrollPrev(api.canScrollPrev());\n    setCanScrollNext(api.canScrollNext());\n  }, []);\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev();\n  }, [api]);\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext();\n  }, [api]);\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === 'ArrowLeft') {\n        event.preventDefault();\n        scrollPrev();\n      } else if (event.key === 'ArrowRight') {\n        event.preventDefault();\n        scrollNext();\n      }\n    },\n    [scrollPrev, scrollNext]\n  );\n\n  React.useEffect(() => {\n    if (!api || !setApi) {\n      return;\n    }\n\n    setApi(api);\n  }, [api, setApi]);\n\n  React.useEffect(() => {\n    if (!api) {\n      return;\n    }\n\n    onSelect(api);\n    api.on('reInit', onSelect);\n    api.on('select', onSelect);\n\n    return () => {\n      api?.off('select', onSelect);\n    };\n  }, [api, onSelect]);\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        orientation: orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext,\n      }}\n    >\n      <div\n        ref={ref}\n        onKeyDownCapture={handleKeyDown}\n        className={cn('relative', className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        {...props}\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  );\n});\nCarousel.displayName = 'Carousel';\n\nconst CarouselContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const { carouselRef, orientation } = useCarousel();\n\n    return (\n      <div ref={carouselRef} className=\"overflow-hidden\">\n        <div\n          ref={ref}\n          className={cn(\n            'flex',\n            orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',\n            className\n          )}\n          {...props}\n        />\n      </div>\n    );\n  }\n);\nCarouselContent.displayName = 'CarouselContent';\n\nconst CarouselItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const { orientation } = useCarousel();\n\n    return (\n      <div\n        ref={ref}\n        role=\"group\"\n        aria-roledescription=\"slide\"\n        className={cn(\n          'min-w-0 shrink-0 grow-0 basis-full',\n          orientation === 'horizontal' ? 'pl-4' : 'pt-4',\n          className\n        )}\n        {...props}\n      />\n    );\n  }\n);\nCarouselItem.displayName = 'CarouselItem';\n\nconst CarouselPrevious = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\n  ({ className, variant = 'outline', size = 'icon', ...props }, ref) => {\n    const { orientation, scrollPrev, canScrollPrev } = useCarousel();\n\n    return (\n      <Button\n        ref={ref}\n        variant={variant}\n        size={size}\n        className={cn(\n          'absolute h-8 w-8 rounded-full',\n          orientation === 'horizontal'\n            ? 'top-1/2 -left-12 -translate-y-1/2'\n            : '-top-12 left-1/2 -translate-x-1/2 rotate-90',\n          className\n        )}\n        disabled={!canScrollPrev}\n        onClick={scrollPrev}\n        {...props}\n      >\n        <ArrowLeft className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Previous slide</span>\n      </Button>\n    );\n  }\n);\nCarouselPrevious.displayName = 'CarouselPrevious';\n\nconst CarouselNext = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\n  ({ className, variant = 'outline', size = 'icon', ...props }, ref) => {\n    const { orientation, scrollNext, canScrollNext } = useCarousel();\n\n    return (\n      <Button\n        ref={ref}\n        variant={variant}\n        size={size}\n        className={cn(\n          'absolute h-8 w-8 rounded-full',\n          orientation === 'horizontal'\n            ? 'top-1/2 -right-12 -translate-y-1/2'\n            : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',\n          className\n        )}\n        disabled={!canScrollNext}\n        onClick={scrollNext}\n        {...props}\n      >\n        <ArrowRight className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Next slide</span>\n      </Button>\n    );\n  }\n);\nCarouselNext.displayName = 'CarouselNext';\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n};\n"},"tags":[],"source":null},{"category":"lint/a11y/useSemanticElements","severity":"error","description":"The elements with this role can be changed to the following elements:\n<fieldset>","message":[{"elements":[],"content":"The elements with this role can be changed to the following elements:\n<fieldset>"}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"For examples and more information, see "},{"elements":[{"Hyperlink":{"href":"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles"}}],"content":"WAI-ARIA Roles"}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/ui/carousel.tsx"},"span":[4099,4111],"sourceCode":"'use client';\n\nimport useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react';\nimport { ArrowLeft, ArrowRight } from 'lucide-react';\nimport * as React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ntype CarouselApi = UseEmblaCarouselType[1];\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>;\ntype CarouselOptions = UseCarouselParameters[0];\ntype CarouselPlugin = UseCarouselParameters[1];\n\ntype CarouselProps = {\n  opts?: CarouselOptions;\n  plugins?: CarouselPlugin;\n  orientation?: 'horizontal' | 'vertical';\n  setApi?: (api: CarouselApi) => void;\n};\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0];\n  api: ReturnType<typeof useEmblaCarousel>[1];\n  scrollPrev: () => void;\n  scrollNext: () => void;\n  canScrollPrev: boolean;\n  canScrollNext: boolean;\n} & CarouselProps;\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null);\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext);\n\n  if (!context) {\n    throw new Error('useCarousel must be used within a <Carousel />');\n  }\n\n  return context;\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(({ orientation = 'horizontal', opts, setApi, plugins, className, children, ...props }, ref) => {\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      ...opts,\n      axis: orientation === 'horizontal' ? 'x' : 'y',\n    },\n    plugins\n  );\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false);\n  const [canScrollNext, setCanScrollNext] = React.useState(false);\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) {\n      return;\n    }\n\n    setCanScrollPrev(api.canScrollPrev());\n    setCanScrollNext(api.canScrollNext());\n  }, []);\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev();\n  }, [api]);\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext();\n  }, [api]);\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === 'ArrowLeft') {\n        event.preventDefault();\n        scrollPrev();\n      } else if (event.key === 'ArrowRight') {\n        event.preventDefault();\n        scrollNext();\n      }\n    },\n    [scrollPrev, scrollNext]\n  );\n\n  React.useEffect(() => {\n    if (!api || !setApi) {\n      return;\n    }\n\n    setApi(api);\n  }, [api, setApi]);\n\n  React.useEffect(() => {\n    if (!api) {\n      return;\n    }\n\n    onSelect(api);\n    api.on('reInit', onSelect);\n    api.on('select', onSelect);\n\n    return () => {\n      api?.off('select', onSelect);\n    };\n  }, [api, onSelect]);\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        orientation: orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext,\n      }}\n    >\n      <div\n        ref={ref}\n        onKeyDownCapture={handleKeyDown}\n        className={cn('relative', className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        {...props}\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  );\n});\nCarousel.displayName = 'Carousel';\n\nconst CarouselContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const { carouselRef, orientation } = useCarousel();\n\n    return (\n      <div ref={carouselRef} className=\"overflow-hidden\">\n        <div\n          ref={ref}\n          className={cn(\n            'flex',\n            orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',\n            className\n          )}\n          {...props}\n        />\n      </div>\n    );\n  }\n);\nCarouselContent.displayName = 'CarouselContent';\n\nconst CarouselItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const { orientation } = useCarousel();\n\n    return (\n      <div\n        ref={ref}\n        role=\"group\"\n        aria-roledescription=\"slide\"\n        className={cn(\n          'min-w-0 shrink-0 grow-0 basis-full',\n          orientation === 'horizontal' ? 'pl-4' : 'pt-4',\n          className\n        )}\n        {...props}\n      />\n    );\n  }\n);\nCarouselItem.displayName = 'CarouselItem';\n\nconst CarouselPrevious = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\n  ({ className, variant = 'outline', size = 'icon', ...props }, ref) => {\n    const { orientation, scrollPrev, canScrollPrev } = useCarousel();\n\n    return (\n      <Button\n        ref={ref}\n        variant={variant}\n        size={size}\n        className={cn(\n          'absolute h-8 w-8 rounded-full',\n          orientation === 'horizontal'\n            ? 'top-1/2 -left-12 -translate-y-1/2'\n            : '-top-12 left-1/2 -translate-x-1/2 rotate-90',\n          className\n        )}\n        disabled={!canScrollPrev}\n        onClick={scrollPrev}\n        {...props}\n      >\n        <ArrowLeft className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Previous slide</span>\n      </Button>\n    );\n  }\n);\nCarouselPrevious.displayName = 'CarouselPrevious';\n\nconst CarouselNext = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\n  ({ className, variant = 'outline', size = 'icon', ...props }, ref) => {\n    const { orientation, scrollNext, canScrollNext } = useCarousel();\n\n    return (\n      <Button\n        ref={ref}\n        variant={variant}\n        size={size}\n        className={cn(\n          'absolute h-8 w-8 rounded-full',\n          orientation === 'horizontal'\n            ? 'top-1/2 -right-12 -translate-y-1/2'\n            : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',\n          className\n        )}\n        disabled={!canScrollNext}\n        onClick={scrollNext}\n        {...props}\n      >\n        <ArrowRight className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Next slide</span>\n      </Button>\n    );\n  }\n);\nCarouselNext.displayName = 'CarouselNext';\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n};\n"},"tags":[],"source":null},{"category":"format","severity":"error","description":"Formatter would have printed the following content:","message":[{"elements":[],"content":"Formatter would have printed the following content:"}],"advices":{"advices":[{"diff":{"dictionary":"import { useId } from 'react';\nimport { Input } from './input';\nimport { Label } from './label';        {label} {required && <span className=\"text-destructive\">*</span>}\n      </Label>\n      <Select {...props}>\n        {children}</Select>\n      {error && <p className=\"text-sm text-destructive mt-1\">{error}</p>}\n    </div>    </div>\n  );\n}","ops":[{"diffOp":{"equal":{"range":[0,96]}}},{"equalLines":{"line_count":56}},{"diffOp":{"equal":{"range":[96,210]}}},{"diffOp":{"delete":{"range":[210,219]}}},{"diffOp":{"equal":{"range":[219,229]}}},{"diffOp":{"delete":{"range":[210,217]}}},{"diffOp":{"equal":{"range":[229,323]}}},{"equalLines":{"line_count":18}},{"diffOp":{"equal":{"range":[323,340]}}},{"diffOp":{"insert":{"range":[210,211]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/components/ui/form-field.tsx"},"span":null,"sourceCode":"import { useId } from 'react';\nimport { Input } from './input';\nimport { Label } from './label';\nimport { Select } from './select';\nimport { Textarea } from './textarea';\n\ninterface FormFieldProps {\n  label: string;\n  required?: boolean;\n  error?: string;\n  children?: React.ReactNode;\n  className?: string;\n}\n\nexport function FormField({ label, required, error, children, className }: FormFieldProps) {\n  const id = useId();\n\n  return (\n    <div className={className}>\n      <Label htmlFor={id}>\n        {label} {required && <span className=\"text-destructive\">*</span>}\n      </Label>\n      {children && React.cloneElement(children as React.ReactElement, { id })}\n      {error && <p className=\"text-sm text-destructive mt-1\">{error}</p>}\n    </div>\n  );\n}\n\ninterface FormInputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label: string;\n  error?: string;\n}\n\nexport function FormInput({ label, error, required, ...props }: FormInputProps) {\n  const id = useId();\n\n  return (\n    <div>\n      <Label htmlFor={id}>\n        {label} {required && <span className=\"text-destructive\">*</span>}\n      </Label>\n      <Input id={id} required={required} {...props} />\n      {error && <p className=\"text-sm text-destructive mt-1\">{error}</p>}\n    </div>\n  );\n}\n\ninterface FormSelectProps extends React.ComponentProps<typeof Select> {\n  label: string;\n  error?: string;\n  required?: boolean;\n}\n\nexport function FormSelect({ label, error, required, children, ...props }: FormSelectProps) {\n  const id = useId();\n\n  return (\n    <div>\n      <Label htmlFor={id}>\n        {label} {required && <span className=\"text-destructive\">*</span>}\n      </Label>\n      <Select {...props}>\n        {children}\n      </Select>\n      {error && <p className=\"text-sm text-destructive mt-1\">{error}</p>}\n    </div>\n  );\n}\n\ninterface FormTextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  label: string;\n  error?: string;\n}\n\nexport function FormTextarea({ label, error, required, ...props }: FormTextareaProps) {\n  const id = useId();\n\n  return (\n    <div>\n      <Label htmlFor={id}>\n        {label} {required && <span className=\"text-destructive\">*</span>}\n      </Label>\n      <Textarea id={id} required={required} {...props} />\n      {error && <p className=\"text-sm text-destructive mt-1\">{error}</p>}\n    </div>\n  );\n}"},"tags":[],"source":null},{"category":"lint/suspicious/noControlCharactersInRegex","severity":"error","description":"Unexpected control character in a regular expression.","message":[{"elements":[],"content":"Unexpected control character in a regular expression."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Control characters are unusual and potentially incorrect inputs, so they are disallowed."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/lib/validation.ts"},"span":[1310,1314],"sourceCode":"/**\n * Input validation and sanitization utilities for enhanced security\n */\n\nimport { z } from 'zod';\n\n/**\n * Email validation schema with comprehensive rules\n */\nexport const emailSchema = z\n  .string()\n  .min(1, 'Email is required')\n  .email('Please enter a valid email address')\n  .max(255, 'Email is too long')\n  .transform((email) => email.toLowerCase().trim());\n\n/**\n * Password validation schema with security requirements\n */\nexport const passwordSchema = z\n  .string()\n  .min(6, 'Password must be at least 6 characters')\n  .max(100, 'Password is too long')\n  .regex(/^[\\x20-\\x7E]+$/, 'Password contains invalid characters');\n\n/**\n * Strong password validation with additional requirements\n */\nexport const strongPasswordSchema = z\n  .string()\n  .min(8, 'Password must be at least 8 characters')\n  .max(100, 'Password is too long')\n  .regex(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/,\n    'Password must contain uppercase, lowercase, number and special character'\n  );\n\n/**\n * Sanitizes a string input by removing potentially harmful characters\n * @param input - The string to sanitize\n * @returns Sanitized string\n */\nexport function sanitizeString(input: string): string {\n  return input\n    .trim()\n    .replace(/[<>]/g, '') // Remove potential HTML tags\n    .replace(/[\\x00-\\x1F\\x7F]/g, ''); // Remove control characters\n}\n\n/**\n * Validates and sanitizes a display name\n */\nexport const displayNameSchema = z\n  .string()\n  .min(1, 'Name is required')\n  .max(50, 'Name is too long')\n  .regex(/^[a-zA-Z0-9\\s\\-']+$/, 'Name contains invalid characters')\n  .transform(sanitizeString);\n\n/**\n * Validates a URL\n */\nexport const urlSchema = z.string().url('Please enter a valid URL').max(2048, 'URL is too long');\n\n/**\n * Validates a positive integer\n */\nexport const positiveIntegerSchema = z\n  .number()\n  .int('Must be a whole number')\n  .positive('Must be a positive number');\n\n/**\n * Validates a grade percentage (0-100)\n */\nexport const gradePercentageSchema = z\n  .number()\n  .min(0, 'Grade cannot be less than 0')\n  .max(100, 'Grade cannot be more than 100');\n\n/**\n * Validates a text area input with reasonable limits\n */\nexport const textAreaSchema = z.string().max(5000, 'Text is too long').transform(sanitizeString);\n\n/**\n * Creates a required field schema with custom error message\n * @param fieldName - The name of the field for error messages\n * @returns Zod schema for required string field\n */\nexport function requiredString(fieldName: string) {\n  return z.string().min(1, `${fieldName} is required`);\n}\n\n/**\n * Validates an array has at least one item\n * @param schema - The schema for array items\n * @param errorMessage - Custom error message\n * @returns Zod schema for non-empty array\n */\nexport function nonEmptyArray<T>(\n  schema: z.ZodType<T>,\n  errorMessage = 'At least one item is required'\n) {\n  return z.array(schema).min(1, errorMessage);\n}\n\n/**\n * Common form schemas used across the application\n */\nexport const commonSchemas = {\n  email: emailSchema,\n  password: passwordSchema,\n  displayName: displayNameSchema,\n  url: urlSchema,\n  textArea: textAreaSchema,\n} as const;\n"},"tags":[],"source":null},{"category":"lint/suspicious/noControlCharactersInRegex","severity":"error","description":"Unexpected control character in a regular expression.","message":[{"elements":[],"content":"Unexpected control character in a regular expression."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Control characters are unusual and potentially incorrect inputs, so they are disallowed."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"src/lib/validation.ts"},"span":[1315,1319],"sourceCode":"/**\n * Input validation and sanitization utilities for enhanced security\n */\n\nimport { z } from 'zod';\n\n/**\n * Email validation schema with comprehensive rules\n */\nexport const emailSchema = z\n  .string()\n  .min(1, 'Email is required')\n  .email('Please enter a valid email address')\n  .max(255, 'Email is too long')\n  .transform((email) => email.toLowerCase().trim());\n\n/**\n * Password validation schema with security requirements\n */\nexport const passwordSchema = z\n  .string()\n  .min(6, 'Password must be at least 6 characters')\n  .max(100, 'Password is too long')\n  .regex(/^[\\x20-\\x7E]+$/, 'Password contains invalid characters');\n\n/**\n * Strong password validation with additional requirements\n */\nexport const strongPasswordSchema = z\n  .string()\n  .min(8, 'Password must be at least 8 characters')\n  .max(100, 'Password is too long')\n  .regex(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/,\n    'Password must contain uppercase, lowercase, number and special character'\n  );\n\n/**\n * Sanitizes a string input by removing potentially harmful characters\n * @param input - The string to sanitize\n * @returns Sanitized string\n */\nexport function sanitizeString(input: string): string {\n  return input\n    .trim()\n    .replace(/[<>]/g, '') // Remove potential HTML tags\n    .replace(/[\\x00-\\x1F\\x7F]/g, ''); // Remove control characters\n}\n\n/**\n * Validates and sanitizes a display name\n */\nexport const displayNameSchema = z\n  .string()\n  .min(1, 'Name is required')\n  .max(50, 'Name is too long')\n  .regex(/^[a-zA-Z0-9\\s\\-']+$/, 'Name contains invalid characters')\n  .transform(sanitizeString);\n\n/**\n * Validates a URL\n */\nexport const urlSchema = z.string().url('Please enter a valid URL').max(2048, 'URL is too long');\n\n/**\n * Validates a positive integer\n */\nexport const positiveIntegerSchema = z\n  .number()\n  .int('Must be a whole number')\n  .positive('Must be a positive number');\n\n/**\n * Validates a grade percentage (0-100)\n */\nexport const gradePercentageSchema = z\n  .number()\n  .min(0, 'Grade cannot be less than 0')\n  .max(100, 'Grade cannot be more than 100');\n\n/**\n * Validates a text area input with reasonable limits\n */\nexport const textAreaSchema = z.string().max(5000, 'Text is too long').transform(sanitizeString);\n\n/**\n * Creates a required field schema with custom error message\n * @param fieldName - The name of the field for error messages\n * @returns Zod schema for required string field\n */\nexport function requiredString(fieldName: string) {\n  return z.string().min(1, `${fieldName} is required`);\n}\n\n/**\n * Validates an array has at least one item\n * @param schema - The schema for array items\n * @param errorMessage - Custom error message\n * @returns Zod schema for non-empty array\n */\nexport function nonEmptyArray<T>(\n  schema: z.ZodType<T>,\n  errorMessage = 'At least one item is required'\n) {\n  return z.array(schema).min(1, errorMessage);\n}\n\n/**\n * Common form schemas used across the application\n */\nexport const commonSchemas = {\n  email: emailSchema,\n  password: passwordSchema,\n  displayName: displayNameSchema,\n  url: urlSchema,\n  textArea: textAreaSchema,\n} as const;\n"},"tags":[],"source":null}],"command":"check"}
