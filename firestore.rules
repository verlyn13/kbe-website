rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Admin collection - users can check their own admin status, admins can read all
    match /admins/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if false; // Only through Admin SDK
    }
    
    // Registrations - parents read own, admins read/write all
    match /registrations/{registrationId} {
      allow read: if isAdmin() || 
        (isSignedIn() && resource.data.guardianId == request.auth.uid);
      allow create: if isSignedIn() && 
        request.resource.data.guardianId == request.auth.uid;
      allow update: if isAdmin() || 
        (isSignedIn() && resource.data.guardianId == request.auth.uid);
      allow delete: if isAdmin();
    }
    
    // Programs - all authenticated users can read
    match /programs/{programId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Announcements - all authenticated users can read
    match /announcements/{announcementId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Students subcollection
    match /registrations/{registrationId}/students/{studentId} {
      allow read: if isAdmin() || 
        (isSignedIn() && get(/databases/$(database)/documents/registrations/$(registrationId)).data.parentEmail == request.auth.token.email);
      allow write: if isAdmin();
    }
    
    // Users collection (basic user data)
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // User profiles collection
    match /profiles/{userId} {
      allow read: if isSignedIn(); // Allow all signed-in users to read profiles
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isAdmin(); // Only admins can delete profiles
    }
    
    // Hidden announcements collection
    match /hiddenAnnouncements/{userId}/userHidden/{announcementId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    // Activity logs collection
    match /activityLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isSignedIn();
      allow update: if false; // Logs should never be updated
      allow delete: if false; // Logs should never be deleted
    }
    
    // Calendar events collection
    match /events/{eventId} {
      allow read: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Students collection - guardians can manage their own students
    match /students/{studentId} {
      allow read: if isSignedIn() && 
        (resource == null || resource.data.guardianId == request.auth.uid || isAdmin());
      allow create: if isSignedIn() && 
        request.resource.data.guardianId == request.auth.uid;
      allow update: if isSignedIn() && 
        (resource.data.guardianId == request.auth.uid || isAdmin());
      allow delete: if isSignedIn() && 
        (resource.data.guardianId == request.auth.uid || isAdmin());
    }
  }
}